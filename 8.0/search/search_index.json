{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Appium XCUITest Driver documentation! The XCUITest driver is a test automation framework for iOS, iPadOS and tvOS devices, enabling automated black-box testing of native, hybrid and WebKit web apps, on both emulators and real devices. </p> <p>The XCUITest driver is part of the Appium test automation tool. For information on Appium itself, please visit the Appium documentation.</p>"},{"location":"#explore-the-documentation","title":"Explore the Documentation","text":"<ul> <li>Check out the Overview to learn how the driver works</li> <li>Go through the Installation steps to get set up</li> <li>Follow the Device Preparation instructions to configure your test device</li> <li>Browse the Reference documentation for everything exposed by the driver</li> <li>Read the different Guides for a variety of instructions, tips and tricks</li> <li>For contributions to the driver, refer to the Contributing page</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to this project are welcome! To start off, clone it from GitHub and run:</p> <pre><code>npm install\n</code></pre> <p>To watch changes during development:</p> <pre><code>npm run watch\n</code></pre> <p>To run unit/functional tests:</p> <pre><code>npm run test # unit \nnpm run e2e-test # functional\n</code></pre> <p>To develop documentation:</p> <pre><code>npm run install-docs-deps # install the dependencies (Python packages)\nnpm run dev:docs # serve the docs locally and watch for changes\n</code></pre> <p>There are also a number of environment variables that can be used when running the tests locally. These include:</p> <ul> <li><code>REAL_DEVICE</code> - set to anything truthy, makes the tests use real device capabilities</li> <li><code>_FORCE_LOGS</code> - set to <code>1</code> to get the log output, not just spec</li> <li><code>PLATFORM_VERSION</code> - change the version to run the tests against (defaults to <code>11.3</code>)</li> <li><code>XCCONFIG_FILE</code> - specify where the Xcode config file is for a real device run (if   blank, and running a real device test, it will search for the first file in   the root directory of the repo with the extension <code>.xcconfig</code>)</li> <li><code>UICATALOG_REAL_DEVICE</code> - path to the real device build of UICatalog, in case   the <code>npm</code> installed one is not built for a real device</li> </ul>"},{"location":"endpoints-wda/","title":"Endpoints wda","text":""},{"location":"endpoints-wda/#webdriveragent-jsonwp-endpoints","title":"WebDriverAgent JSONWP Endpoints","text":""},{"location":"endpoints-wda/#session-less-commands","title":"Session-less commands","text":"method endpoint req params opt params POST /wda/homescreen GET /source accessible GET /inspector GET /inspector.js GET /screenshot POST /session desiredCapabilities GET /status GET /* ** POST /* ** PUT /* ** DELETE /* **"},{"location":"endpoints-wda/#session-commands","title":"Session commands","text":"method endpoint req params opt params GET /alert/text POST /alert/accept POST /alert/dismiss POST /wda/deactivateApp duration POST /timeouts * GET /source accessible GET /element/:uuid/enabled GET /element/:uuid/rect GET /element/:uuid/attribute/:name GET /element/:uuid/text GET /element/:uuid/displayed GET /wda/element/:uuid/accessible GET /element/:uuid/name POST /element/:uuid/value value POST /element/:uuid/click POST /element/:uuid/clear POST /wda/element/:uuid/doubleTap POST /wda/element/:uuid/touchAndHold duration POST /wda/element/:uuid/scroll name, direction, predicateString, toVisible POST /uiaElement/:uuid/value value POST /wda/element/:uuid/dragfromtoforduration fromX, fromY, toX, toY, duration POST /wda/tap/:uuid x, y POST /wda/keys value GET /window/size POST /element using, value POST /elements using, value GET /wda/uiaElement/:uuid/getVisibleCells POST /element/:uuid/element using, value POST /element/:uuid/elements using, value GET /orientation POST /orientation orientation GET /screenshot POST /wda/touch_id match <p>* implemented but intentionally not supported</p> <p>** not implemented handlers</p>"},{"location":"endpoints/","title":"Endpoints","text":""},{"location":"endpoints/#appium-ios-jsonwp-endpoints","title":"Appium iOS JSONWP Endpoints","text":""},{"location":"endpoints/#session-less-commands","title":"Session-less commands","text":"method endpoint req params opt params GET /status POST /session desiredCapabilities requiredCapabilities GET /sessions"},{"location":"endpoints/#session-commands","title":"Session commands","text":"method endpoint req params opt params GET /:sessionId DELETE /:sessionId POST /timeouts type, ms POST /timeouts/async_script ms POST /timeouts/implicit_wait ms GET /window_handle GET /window_handles GET /url POST /url url POST /forward none POST /back none POST /refresh none POST /execute script, args POST /execute_async script, args GET /screenshot POST /frame id POST /window name DELETE /window GET /window/:windowhandle/size GET /cookie POST /cookie cookie DELETE /cookie DELETE /cookie/:name GET /source GET /title POST /element using, value POST /elements using, value POST /element/active none POST /element/:elementId/element using, value POST /element/:elementId/elements using, value POST /element/:elementId/click none POST /element/:elementId/submit none GET /element/:elementId/text none POST /element/:elementId/value value POST /keys value GET /element/:elementId/name POST /element/:elementId/clear none GET /element/:elementId/selected GET /element/:elementId/enabled GET /element/:elementId/attribute/:name GET /element/:elementId/equals/:otherId GET /element/:elementId/displayed GET /element/:elementId/location GET /element/:elementId/location_in_view GET /element/:elementId/size GET /element/:elementId/css/:propertyName GET /orientation POST /orientation orientation GET /alert_text POST /alert_text text POST /accept_alert none POST /dismiss_alert none POST /click button GET /location POST /location location POST /log type GET /log/types GET /context POST /context name GET /contexts POST /receive_async_response status, value"},{"location":"endpoints/#appium-specific-commands","title":"Appium-specific commands","text":"method endpoint req params opt params POST /appium/device/shake none GET /appium/device/system_time POST /appium/device/lock seconds POST /appium/device/rotate x, y, radius, rotation, touchCount, duration element POST /appium/device/remove_app appId or bundleId POST /appium/device/hide_keyboard strategy, key, keyCode, keyName POST /appium/device/push_file path, data POST /appium/device/pull_file path POST /appium/device/pull_folder path POST /appium/simulator/touch_id match POST /appium/app/launch none POST /appium/app/close none POST /appium/app/background seconds POST /appium/app/strings language, stringFile POST /appium/element/:elementId/value value POST /appium/receive_async_response response"},{"location":"overview/","title":"Overview","text":"<p>The XCUITest driver combines several different technologies to achieve its functionality:</p> <ul> <li>Native testing is based on Apple's XCTest framework   and Appium's fork of Facebook's WebDriverAgent server   (the original project is not supported anymore)<ul> <li>In native mode, the driver operates in scope of WebDriver W3C protocol   with several platform-specific extensions</li> </ul> </li> <li>Webview communication is done via Webkit remote debugger protocol<ul> <li>In webview mode, the driver can only operate in scope of the obsolete JSONWP protocol</li> </ul> </li> <li>Real device communication is provided by the <code>appium-ios-device</code> library</li> <li>Simulator communication is provided by the <code>appium-ios-simulator</code> library</li> </ul>"},{"location":"guides/attach-to-running-wda/","title":"Attach to a Running WebDriverAgent","text":"<p>The XCUITest driver provides the <code>appium:webDriverAgentUrl</code> capability to attach to a running WebDriverAgent (WDA) application. This works for real devices and simulators, but the primary usage is for real devices.</p>"},{"location":"guides/attach-to-running-wda/#usage","title":"Usage","text":"<ol> <li>Start a WebDriverAgent application on a device</li> <li>Start an XCUITest driver session with <code>appium:webDriverAgentUrl</code> capability</li> </ol> <p>Please read Manage WebDriverAgent by Yourself and Real Device Configuration about how to prepare WDA for a real device.</p> <p>The <code>appium:webDriverAgentUrl</code> value should be the WDA URL: <code>http://&lt;reachable ip address for the device&gt;:8100</code>. If the environment has port-forward to the connected device, it can be <code>http://localhost:8100</code>.</p> <pre><code>{\n  \"platformName\": \"ios\",\n  \"appium:automationName\": \"xcuitest\",\n  \"appium:platformVersion\": \"15.5\",\n  \"appium:udid\": \"&lt;device udid&gt;\",\n  \"appium:deviceName\": \"iPhone\",\n  \"appium:webDriverAgentUrl\": \"http://&lt;reachable ip address for the device&gt;:8100\"\n}\n</code></pre> <p>This method allows you to manage the WDA process by yourself. The XCUITest driver then simply attaches to the WDA process, which may improve the application performance.</p> <p>Some XCUITest driver APIs (for example, mobile: calibrateWebToRealCoordinatesTranslation) might still require the port number of the remote device if it is a real device. Providing the <code>appium:webDriverAgentUrl</code> capability might not be sufficient to recognize the remote port number, in case it is different from the local one. Consider settings the <code>appium:wdaRemotePort</code> capability in such cases, to supply the driver with the appropriate data.</p>"},{"location":"guides/audio-capture/","title":"Audio Capture","text":"<p>Appium XCUITest driver provides a possibility to record iOS audio stream and save it to a file, which could be then retrieved on the client side. Apple does not provide any API to directly retrieve the audio stream from a Simulator or a real device, but it is possible to redirect that stream to the host machine, where it could be captured.</p> <ul> <li><code>mobile: startAudioRecording</code></li> <li><code>mobile: stopAudioRecording</code></li> </ul>"},{"location":"guides/audio-capture/#server-requirements","title":"Server Requirements","text":"<ul> <li>The host machine must have <code>ffmpeg</code> installed and added to PATH.   It can be installed via <code>brew</code>: <code>brew install ffmpeg</code>.</li> <li> <p>For macOS 10.15+, applications recording Microphone audio need to be explicitly granted this permission.   This can be done in the following settings menu:</p> <ul> <li>macOS &lt; 13: System Preferences -&gt; Security &amp; Privacy -&gt; Privacy -&gt; Microphone</li> <li>macOS 13+: System Settings -&gt; Privacy &amp; Security -&gt; Microphone</li> </ul> <p>Ensure that either <code>ffmpeg</code> itself or the parent Appium process (e.g. Terminal) is present in that list.</p> </li> <li> <p>As this is a potentially insecure feature, it must be explicitly allowed on the server side. See   the Appium documentation on Security for more details.   The feature name is <code>audio_record</code>.</p> </li> </ul>"},{"location":"guides/audio-capture/#simulator-setup","title":"Simulator Setup","text":"<p>The following steps are necessary to setup iOS Simulator audio capture:</p> <ul> <li>Install Soundflower</li> <li>Redirect Simulator audio output to Soundflower: from the main Simulator menu, select   I/O -&gt; Audio Output -&gt; Soundflower (2ch)</li> <li>In terminal, run <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> to get the identifier of the   <code>Soundflower (2ch)</code> device. This identifier prefixed with <code>:</code> will be then used as <code>audioInput</code>   argument to <code>mobile: startAudioRecording</code> call</li> <li>Test that your setup works as expected. Run any audio playback in Simulator and execute the   following command in Terminal, replacing the <code>-i</code> argument value with the one you got from the   previous step:   <pre><code>ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4\n</code></pre>   After 5 seconds, a file named <code>out.mp4</code> should be created on your desktop, containing the recorded   audio stream.</li> </ul>"},{"location":"guides/audio-capture/#real-device-setup","title":"Real Device Setup","text":"<p>The following steps are necessary to setup iOS Real Device audio capture:</p> <ul> <li>Connect your device to the Mac host with a cable</li> <li>Open the Audio MIDI Setup application<ul> <li>Via Finder: Applications -&gt; Utilities -&gt; Audio MIDI Setup</li> <li>Via terminal: <code>open -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app</code></li> </ul> </li> <li>Find your phone in the list of devices there and click <code>Enable</code> next to it</li> <li>In terminal, run <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> to get the identifier of your   device in the <code>AVFoundation audio devices</code> list. This identifier prefixed with <code>:</code> will be then   used as <code>audioInput</code> argument to <code>mobile: startAudioRecording</code> call</li> <li>Test that your setup works as expected. Run any audio playback on the device and execute the   following command in Terminal, replacing the <code>-i</code> argument value with the value you got from the   previous step:   <pre><code>ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4\n</code></pre>   After 5 seconds, a file named <code>out.mp4</code> should be created on your desktop, containing the recorded   audio stream.</li> </ul> <p>Note</p> <p>Apple does not allow phone calls to be redirected this way. You can only record application or system sounds.</p>"},{"location":"guides/audio-capture/#further-reading","title":"Further Reading","text":"<ul> <li>https://github.com/appium/appium-xcuitest-driver/pull/1207</li> <li>https://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/</li> <li>http://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/</li> </ul>"},{"location":"guides/capability-sets/","title":"Basic Examples of Session Capability Sets","text":"<p>This article describes necessary capabilities that must be provided in order to implement some common automation testing scenarios. It only describes very minimum sets of capabilities required to be included. For refined setups more of them might need to be provided. Check the Capabilities article for more details on each option available for the fine-tuning of XCUITest driver sessions.</p>"},{"location":"guides/capability-sets/#application-file-real-device","title":"Application File (Real Device)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:udid\": \"&lt;Phone_UUID&gt;\",\n  \"appium:app\": \"/path/to/local/package.ipa\"\n}\n</code></pre> <p><code>appium:app</code> could also be a remote app or an archive:</p> <pre><code>  \"appium:app\": \"https://example.com/package.ipa\"\n  \"appium:app\": \"https://example.com/package.zip\"\n</code></pre> <p><code>appium:udid</code> could also be set to <code>auto</code> in order to select the first matched device connected to the host (or a single one if only one is connected):</p> <pre><code>  \"appium:udid\": \"auto\"\n</code></pre>"},{"location":"guides/capability-sets/#application-file-simulator","title":"Application File (Simulator)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:deviceName\": \"&lt;Simulator_Name&gt;\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:app\": \"/path/to/local/package.app\"\n}\n</code></pre> <p><code>appium:app</code> could also be an archive:</p> <pre><code>  \"appium:app\": \"https://example.com/package.zip\"\n  \"appium:app\": \"/path/to/local/package.zip\"\n</code></pre>"},{"location":"guides/capability-sets/#safari-real-device","title":"Safari (Real Device)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"browserName\": \"Safari\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:udid\": \"&lt;Phone_UUID&gt;\"\n}\n</code></pre> <p>You may also provide <code>appium:safariInitialUrl</code> capability value to navigate to the desired page during the session startup:</p> <pre><code>  \"appium:safariInitialUrl\": \"https://server.com/page\"\n</code></pre>"},{"location":"guides/capability-sets/#safari-simulator","title":"Safari (Simulator)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"browserName\": \"Safari\",\n  \"appium:deviceName\": \"&lt;Simulator_Name&gt;\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\"\n}\n</code></pre>"},{"location":"guides/capability-sets/#pre-installed-app-real-device","title":"Pre-Installed App (Real Device)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:udid\": \"&lt;Phone_UUID&gt;\",\n  \"appium:bundleId\": \"&lt;Bundle_ID_Of_Preinstalled_App&gt;\",\n  \"appium:noReset\": true\n}\n</code></pre> <p>The <code>appium:noReset</code> capability is set to <code>true</code> in order to tell the driver the app identified by <code>appium:bundleId</code> is already preinstalled and must not be reset.</p>"},{"location":"guides/capability-sets/#pre-installed-app-simulator","title":"Pre-Installed App (Simulator)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:deviceName\": \"&lt;Simulator_Name&gt;\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:bundleId\": \"&lt;Bundle_ID_Of_Preinstalled_App&gt;\",\n  \"appium:noReset\": true\n}\n</code></pre>"},{"location":"guides/capability-sets/#deeplink-real-device-running-ios-17","title":"Deeplink (Real Device running iOS 17+)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:udid\": \"&lt;Phone_UUID&gt;\",\n  \"appium:initialDeeplinkUrl\": \"&lt;Deeplink_Url&gt;\"\n}\n</code></pre>"},{"location":"guides/capability-sets/#deeplink-simulator-running-ios-17","title":"Deeplink (Simulator running iOS 17+)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:deviceName\": \"&lt;Simulator_Name&gt;\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:initialDeeplinkUrl\": \"&lt;Deeplink_Url&gt;\"\n}\n</code></pre>"},{"location":"guides/capability-sets/#custom-launch-real-device","title":"Custom Launch (Real Device)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\",\n  \"appium:udid\": \"&lt;Phone_UUID&gt;\",\n}\n</code></pre> <p>This will start your test at the Home screen. Afterwards you may use any of the application management methods, like mobile: installApp or mobile: activateApp to manage the life cycle of your app or switch between contexts to manage web pages. Check the full list of mobile: execute methods for more details.</p>"},{"location":"guides/capability-sets/#custom-launch-simulator","title":"Custom Launch (Simulator)","text":"<pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:automationName\": \"XCUITest\",\n  \"appium:deviceName\": \"&lt;Simulator_Name&gt;\",\n  \"appium:platformVersion\": \"&lt;iOS_Version&gt;\"\n}\n</code></pre>"},{"location":"guides/ci-setup/","title":"Continuous Integration","text":"<p>Setting up the XCUITest driver in an automated environment brings a few challenges with it. Any scenario where user interaction is required must be automated or avoided altogether. For real device setup, you should first follow the Real Device Configuration tutorial.</p>"},{"location":"guides/ci-setup/#keychains","title":"Keychains","text":"<p>One common scenario is a prompt asking for a keychain to be unlocked in order to sign the WebDriverAgent. There are multiple possible solutions for this:</p> <ol> <li>Keychains can be set to have no timeout and be unlocked manually once. This can be done using the    keychain access application. Sometimes keychains still lock themselves though and this approach    is not recommended.</li> <li>It is possible to create a second keychain,    which just stores the required certificate to sign the WebDriverAgent. The issue with this    approach is that Codesign wants to unlock all listed keychains regardless of the specified    keychain, thus leading to a password prompt. This can be avoided by setting the default keychain    and basically hiding the login keychain at the start of the build.    See this Stackoverflow article    for how to utilize this approach. It is impractical when running other build jobs simultaneously.</li> <li>Stick with the existing keychains as in approach 1, but explicitly call unlock keychain before    each build. This can be done using fastlane unlock_keychain    or by using security unlock-keychain directly.    The password can be saved as a CI variable/secret or on the machine itself.</li> </ol> <p>It is recommended to go with the second or third option. The third one is the easiest and most reliable one to set up, at the cost of having to set the keychain password as an environment variable.</p>"},{"location":"guides/ci-setup/#xcode","title":"Xcode","text":"<p>When setting up a new machine as a CI server, you are probably going to install Xcode, without executing it once, because you are not going to use it for development. Make sure to start Xcode at least once and do the initial set up and install the suggested extensions.</p>"},{"location":"guides/ci-setup/#linking-apple-account","title":"Linking Apple Account","text":"<p>This only applies for real device set up. Make sure to link your 'Apple Developer Account' in the machine's system wide \"Account Panel\" when using the \"Basic Automatic Configuration\" described here.</p>"},{"location":"guides/ci-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Enable the <code>appium:showXcodeLog</code> capability and check the Appium server output.</p>"},{"location":"guides/clipboard/","title":"Get/Set Clipboard","text":"<p>Working with the clipboard on real devices has an Apple security limitation, where the WebDriverAgentRunner application must be in foreground in order for the action to work. Otherwise an empty string is always returned, or it could raise an exception like this issue.</p> <p>Consider using <code>mobile: activateApp</code> and <code>mobile: backgroundApp</code> to change the foreground application.</p>"},{"location":"guides/clipboard/#get-clipboard","title":"Get Clipboard","text":"<p>Applies to iOS 13+ real devices. You can also use <code>mobile: getPasteboard</code> for simulators.</p> <pre><code># Ruby\n\n# Bring the WebDriverAgent foreground. The bundle id depends on configuration such as \"appium:updatedWDABundleId\" for real devices.\ndriver.execute_script 'mobile: activateApp', {bundleId: 'com.facebook.WebDriverAgentRunner.xctrunner'}\n# Get the clipboard content\ndriver.get_clipboard\n# Go back to the application under test\ndriver.execute_script 'mobile: activateApp', {bundleId: '&lt;bundle id of the test app&gt;'}\n</code></pre>"},{"location":"guides/clipboard/#set-clipboard","title":"Set Clipboard","text":"<p>Applies to iOS 15+ real devices. You can also use <code>mobile: setPasteboard</code> for simulators.</p> <pre><code># Ruby\n\n# Bring the WebDriverAgent foreground. The bundle id depends on configuration such as \"appium:updatedWDABundleId\" for real devices.\ndriver.execute_script 'mobile: activateApp', {bundleId: 'com.facebook.WebDriverAgentRunner.xctrunner'}\n# Set the clipboard content\ndriver.set_clipboard(content: 'happy testing')\n# Go back to the application under test\ndriver.execute_script 'mobile: activateApp', {bundleId: '&lt;bundle id of the test app&gt;'}\n</code></pre>"},{"location":"guides/elements-lookup-troubleshooting/","title":"Elements Lookup Troubleshooting","text":"<p>This article helps to resolve possible issues that may pop up while looking up for elements with XCUITest driver, where the desired element is either not found or not visible in the page source at all.</p> <p>Since there might be multiple reasons to why an element cannot be found the topic is divided into sections where each section contains visible symptoms with the list of their possible resolutions.</p>"},{"location":"guides/elements-lookup-troubleshooting/#symptom-1","title":"Symptom #1","text":"<p>The desired element is shown as part of a bigger container and is not distinguishable in the page source tree. Sometimes the whole application view with all elements in it is visible as one single container.</p>"},{"location":"guides/elements-lookup-troubleshooting/#resolutions-to-symptom-1","title":"Resolutions To Symptom #1","text":""},{"location":"guides/elements-lookup-troubleshooting/#make-sure-the-application-under-test-is-accessible","title":"Make sure the application under test is accessible","text":"<p>The XCUITest driver is based on Apple's XCTest framework. And the latter uses the information provided by the system accessibility framework to interact with on-screen elements, and to distinguish them. The same approach is used by various screen readers, VoiceOver, etc. You may start your journey into what Accessibility is and how to deal with it in your applications from the official Apple's accessibility guideline. Bear in mind, that this tutorial only describes apps based on official Apple frameworks, like UIKit or SwiftUI. If you use a different framework to build the application's user interface, for example React Native, then consider looking for framework-specific accessibility guidelines. It is also possible that the source tree displayed in Xcode accessibility inspector differs from the tree geneerated by XCTest. The best possible way to verify the page source generated by the latter is to check the output of the debugDescription attribute of the corresponding XCUIApplication element. XCUITest driver allows to perform a direct forwarding for this API by using the mobile: source execute method with <code>format</code> set to <code>description</code>.</p>"},{"location":"guides/elements-lookup-troubleshooting/#check-if-this-is-a-hybrid-application","title":"Check if this is a hybrid application","text":"<p>Hybrid applications are applications that use web views in order to represent their whole user interface or portions of it. Web views is the technology that allows to seamlessly integrate web pages browsing experience into native mobile applications. Applications might contain native views mixed with web views, or the whole application UI might be just a single web view. And while the built-in web view engine allows limited accessibility interactions via ARIA attributes, consider switching a driver context instead in order to get full native access to the page DOM. Read Automating Hybrid Apps for more details there.</p>"},{"location":"guides/elements-lookup-troubleshooting/#make-sure-the-application-accessibility-tree-is-not-too-deep","title":"Make sure the application accessibility tree is not too deep","text":"<p>Apple's XCTest represents the page source as hierarchical structure (a tree), where each UI element has ancestor and descendant relationships to other elements. There are applications having complex UI structure with deeply nested views. Such deep structures are known to create problems for XCTest as the latter is unable to work with tree elements whose nesting level is deeper than <code>62</code>. This limitation has to do with how <code>NSDictionary</code> works and cannot be worked around. The default maximum nesting level for the XCUITest driver is set to <code>50</code> and could be customized by the snapshotMaxDepth setting. React Native is known to create such deep hierarchies and the only viable solution for now is to fix the application under test by flattening nested views. Check the corresponding issue for more details. Deeply nested hierarchies might also be the reason for the element lookup slowness. Read the Diagnosing WebDriverAgent Slowness article to troubleshoot the latter.</p>"},{"location":"guides/elements-lookup-troubleshooting/#make-sure-a-valid-active-application-is-selected-in-webdriveragent","title":"Make sure a valid active application is selected in WebDriverAgent","text":"<p>Sometimes, even if visually it looks like UI elements belong to the same application, they are referenced by absolutely different apps. Moreover, the operating system may change elements ownership in different versions. In the UI inspector it looks like visually the element is visible, but no \"real\" accessibility control relies on it. Most frequent candidates for such behavior are: - System alerts, for example camera or geolocation permission requests - Quick access toolbars, for example the one where Wi-Fi or Bluetooth state could be changed - Various RPC sheets, for example the Share To collection</p> <p>WebDriverAgent is designed the way it only interacts with a single app hierarchy at the particular moment of time. Such application is called <code>active</code>. It is possible to switch between applications in runtime using mobile: activateApp API or to provide a hint for WebDriverAgent on which application to prefer if multiple apps are running using the defaultActiveApplication setting. Check the Troubleshooting guide and/or Switching Between iOS Apps During a Test article for more details on how to make such elements available.</p>"},{"location":"guides/elements-lookup-troubleshooting/#symptom-2","title":"Symptom #2","text":"<p>The desired element is shown in the page tree, but cannot be found if looked up from an automated test.</p>"},{"location":"guides/elements-lookup-troubleshooting/#resolutions-to-symptom-2","title":"Resolutions To Symptom #2","text":""},{"location":"guides/elements-lookup-troubleshooting/#make-sure-there-is-no-race-condition","title":"Make sure there is no race condition","text":"<p>Sometimes the automation might too fast or too slow depending on in which state the UI is while the lookup is being executed. If it is too fast then consider using lookup timers, e.g. repeat the <code>findElement</code> more than once until either the element is found or the timeout occurs. All clients have convenience wrappers for such timers in form of expected conditions. If the automation is too slow, e.g. the desired element disappears faster than <code>findElement</code> could detect its presence then make sure your script is optimized for the maximum performance, e.g. optimal/fast element locators are used, the application itself and driver settings are adjusted to perform optimally, etc. There might be situations where the automation framework is already optimized, although the desired element is a short-living one, for example some notification popup that only appears for a second and then is immediately hidden. For such \"special\" elements consider using approaches different from <code>findElement</code>, for example post-test video recording analysis (video FPS should usually be enough to catch all short-living elements), or introducing special application debug settings to change the behavior for such elements and make them stay visible for longer time, or using non-UI-related assertions, like logs analysis or direct API calls.</p>"},{"location":"guides/elements-lookup-troubleshooting/#make-sure-the-debug-environment-matches-to-the-testing-one","title":"Make sure the debug environment matches to the testing one","text":"<p>There are known cases where application interface/behavior might differ in simulators and real devices. It might even differ if the screen size or device model/OS version/system setting differs. That is why always make sure your debug environment, for example one where Appium Inspector is used, is as close as possible to the environment where automated tests are being executed.</p>"},{"location":"guides/elements-lookup-troubleshooting/#symptom-3","title":"Symptom #3","text":"<p>The desired element is shown in the page tree, but its property value is not as expected, for example, it is shown as visible while one does not see it in the application interface or vice versa.</p>"},{"location":"guides/elements-lookup-troubleshooting/#resolutions-to-symptom-3","title":"Resolutions To Symptom #3","text":""},{"location":"guides/elements-lookup-troubleshooting/#xcuitest-driver-has-minimum-influence-to-attribute-values","title":"XCUITest driver has minimum influence to attribute values","text":"<p>This is a simple and at the same time complicated topic. Since XCUITest driver is based on Apple's XCTest, all attribute values are retrieved from the latter. Standard attributes provided by XCTest could be found in XCUIElementAttributes protocol reference. The full list of attributes supported by XCUITest driver's WebElement could be found in the Element Attributes document. Most of the above attributes are simple compilations of standard attributes, for example, <code>elementType</code> is translated to <code>type</code> by matching the corresponding enum value to a string representation, <code>name</code> is compiled from original element's identifier and label depending on what is present first. The full list of mapping rules between standard and XCUITest attribute values could be found in WebDriverAgent sources. Although, some attributes there, like <code>visible</code> or <code>accessible</code> have no direct mapping in XCTest and are retrieved directly from the accessibility framework ~~using dark magic~~. This means the actual value of these attributes only depends on accessibility internals and is there mostly due to ~~legacy~~ convenience purposes, as the original XCTest does not even expose them. We'd love to deprecate and remove this legacy burden and only rely on officially supported attributes, although historically many people rely on them, so we keep it, even though their values might be not reliable and there is no good way to debug this behavior or somehow influence it. The final recommendation there would be: - If the value of an attribute that directly or indirectly relies on a public XCUIElement attribute   is different from what you expect then run a vanilla XCTest with the same app and make sure   it's not the same as you see in the XCUITest driver. If it is then the only place to complain   would be the Apple support forum or a XCTest bug tracker. If you can confirm the issue lies in   WebDriverAgent's mapping logic then feel free to raise an   issue to its maintainers. - If the value of an attribute that is a \"custom\" XCUITest attribute, like <code>visible</code> or <code>accessible</code>,   is different from what you expect then we, most likely, won't be able to help you. You may try   to improve the corresponding WebDriverAgent sources, but keep in mind there are many automation   tests around that rely on the current way these attributes are calculated, and we probably don't   want to break them.</p>"},{"location":"guides/file-transfer/","title":"File Transfer","text":"<p>The XCUITest driver provides several extension commands for file transfer:</p> <ul> <li><code>mobile: pullFolder</code></li> <li><code>mobile: pullFile</code></li> <li><code>mobile: pushFile</code></li> <li><code>mobile: deleteFolder</code></li> <li><code>mobile: deleteFile</code></li> </ul> <p>This documentation aims to help to understand how they work on iOS.</p>"},{"location":"guides/file-transfer/#formats","title":"Formats","text":"<p>All commands require a parameter with a path to the file/folder on the target device. There are 3 possible formats this path can take:</p>"},{"location":"guides/file-transfer/#format-1","title":"Format 1","text":"<pre><code>@&lt;app-bundle-id&gt;:&lt;container-type&gt;/&lt;path-to-file-or-folder&gt;\n</code></pre> <ul> <li><code>@&lt;app-bundle-id&gt;</code> is the application bundle identifier</li> <li><code>&lt;container-type&gt;</code> is the container type<ul> <li>On simulators, common values are <code>app</code>, <code>data</code>, <code>groups</code>, but a custom one can also be provided</li> <li>On real devices, the only accepted value is <code>documents</code>. All others are treated as Format 2<ul> <li>This value can only be specified for apps that have the <code>UIFileSharingEnabled</code> flag set to   <code>true</code>. You can use the <code>mobile: listApps</code>   extension to identify such apps.</li> </ul> </li> </ul> </li> <li><code>&lt;path-to-file-or-folder&gt;</code> is the target file or folder<ul> <li>On real devices, if <code>&lt;container-type&gt;</code> is set to <code>documents</code>, this path will be mapped to   <code>On My iPhone/&lt;app name&gt;</code> in the Files app</li> </ul> </li> </ul>"},{"location":"guides/file-transfer/#format-2","title":"Format 2","text":"<pre><code>@&lt;app-bundle-id&gt;/&lt;path-to-file-or-folder&gt;\n</code></pre> <ul> <li>On simulators, the implicit <code>&lt;container-type&gt;</code> is set to <code>app</code>.</li> <li>On real device, only apps with the <code>UIFileSharingEnabled</code> flag set to <code>true</code> in their <code>info.plist</code>   can be mounted. You can use the <code>mobile: listApps</code>   extension to identify such apps.</li> </ul>"},{"location":"guides/file-transfer/#format-3","title":"Format 3","text":"<pre><code>&lt;path-to-file-or-folder&gt;\n</code></pre> <p>This format is only supported on simulators. The implicit <code>&lt;container-type&gt;</code> is set to <code>app</code>. Eventually the whole simulator file system is available directly from the macOS Finder, so you may pull any file from there by providing a path to it relatively to the simulator's file system root.</p>"},{"location":"guides/file-transfer/#examples","title":"Examples","text":""},{"location":"guides/file-transfer/#pullfile","title":"<code>pullFile</code>","text":"<p>This example pulls a file present in Files -&gt; On My iPhone -&gt; Keynote:</p> Top On  My iPhone Keynote JS (WebdriverIO)Ruby <pre><code>let data = driver.pullFile('@com.apple.Keynote:documents/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code>file = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f&lt;&lt; file }\n</code></pre> <p>If the file is in deeper place like Keynote/Dir1/Dir2, then the path changes:</p> JS (WebdriverIO)Ruby <pre><code>let data = driver.pullFile('@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code>file = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f&lt;&lt; file }\n</code></pre> <p>Example for a simulator using Format 3:</p> <pre><code>// Java\n// Get AddressBook.sqlitedb in test app package ('app' container)\nbyte[] fileContent = driver.pullFile(\"Library/AddressBook/AddressBook.sqlitedb\");\nPath dstPath = Paths.get(new File(\"/local/path/AddressBook.sqlitedb\"));\nFiles.write(dstPath, fileContent);\n</code></pre>"},{"location":"guides/file-transfer/#pullfolder","title":"<code>pullFolder</code>","text":"<p>You can pull folders similarly to files, but the path must end with a forward slash (<code>/</code>).</p> JS (WebdriverIO)Ruby <pre><code>let data = driver.pullFolder('@com.apple.Keynote:documents/');\nawait fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code>file = @driver.pull_folder '@com.apple.Keynote:documents/'\nFile.open('documents.zip', 'wb') { |f| f&lt;&lt; file }\n</code></pre>"},{"location":"guides/file-transfer/#pushfile","title":"<code>pushFile</code>","text":"JS (WebdriverIO)Ruby <pre><code>driver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer(\"Hello World\").toString('base64'));\n</code></pre> <pre><code>@driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file')\n</code></pre>"},{"location":"guides/file-transfer/#references","title":"References","text":"<ul> <li>https://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data</li> <li>https://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator</li> <li>https://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565</li> </ul>"},{"location":"guides/gestures/","title":"Gestures","text":"<p>The XCUITest driver provides multiple options for touch gestures automation. For simple gestures, like tap by coordinates, long tap, multi-finger tap, double/triple tap, swipe, drag, rotate, scroll or pinch use the below gesture shortcuts:</p> <ul> <li>mobile: tap</li> <li>mobile: doubleTap</li> <li>mobile: touchAndHold</li> <li>mobile: twoFingerTap</li> <li>mobile: dragFromToForDuration</li> <li>mobile: dragFromToWithVelocity</li> <li>mobile: rotateElement</li> <li>mobile: tapWithNumberOfTaps</li> <li>mobile: forcePress</li> <li>mobile: scrollToElement</li> <li>mobile: scroll</li> <li>mobile: pinch</li> </ul> <p>For more sophisticated gestures consider using W3C actions.</p> <p>Make sure you don't use deprecated JSONWP TouchActions APIs. They have been removed from the XCUITest driver since version 7.</p> <p>If the action code in the client source looks good and satisfies the above requirements, but its execution still does not deliver the expected result then the following debugging measures might be applied:</p> <ul> <li>Make sure the gesture has valid coordinates and respects pauses between pointer state changes.   For example, it is always mandatory to provide a valid element or valid <code>absolute</code> coordinates   to any gesture at the beginning. iOS only registers   a long touch/click if the pointer has been depressed for longer than 500ms. For shorter actions   a simple click is registered instead.</li> <li>If your tests run on Simulator then it is possible to activate pointer tracing by enabling   the appium:simulatorTracePointer capability or by enabling   <code>Visual Indicators</code> items from Simulator settings. After running   your automation code with this feature enabled you would be able to see the exact pointer trace path   and check the velocity of the gesture. Compare the trace   to how the same gesture is usually done manually and apply the necessary updates to your code.</li> <li>Do not mix webview and native elements in actions arguments. It simply won't work. Native   actions could only consume native elements. A single possibility to perform a native action   on a web element would be to translate its coordinates into the native context and pass these   coordinates as native action arguments.</li> </ul> <p>Check the below tutorials for more details on how to build reliable action chains:</p> <ul> <li>Automating Complex Gestures with the W3C Actions API</li> <li>Swiping your way through Appium by Wim Selles #AppiumConf2021</li> <li>About iOS Input Events</li> </ul>"},{"location":"guides/hybrid/","title":"Automating Hybrid Apps","text":"<p>One of the core principles of XCUITest driver is that you shouldn't have to change your app to test it. In line with that methodology, it is possible to test hybrid apps the same way you can with Selenium for web apps. There is a bit of technical complexity required so that XCUITest driver knows whether you want to automate the native aspects of the app or the web views. But, thankfully, we can stay within the Selenium WebDriver protocol for everything.</p> <p>Once the test is in a web view context the command set that is available is the full Selenium WebDriver API.</p>"},{"location":"guides/hybrid/#requirements","title":"Requirements","text":"<p>To interact with a web view XCUITest driver establishes a connection using a custom remote debugger. This debugger can connect directly to any WebKit debugger socket exposed by the system. The protocol used for the communication there is a proprietary Apple's JSON RPC similar to Chrome's Devtools Protocol. Not all web views expose debugger web sockets by default thus making them invisible for the XCUITest driver and not showing in the available contexts list. Make sure the following prerequisites are satisfied if you are unsure about whether the particular web view is debuggable or not:</p> <ul> <li>If you use real devices then make sure the Settings\u2192Safari\u2192Advanced\u2192Web Inspector   checkbox is turned on.</li> <li>If your app's web view is based on WKWebView then make sure the   isInspectable property of it set to <code>true</code>. Note, that you must have access to the application sources in order   to ensure that!</li> <li>Make sure you see the corresponding web view in Safari's   remote debugger list.</li> </ul> <p>If all the above requirements have been satisfied, but the desired web view is still not present in the XCUITest driver's context list then there is probably an issue in the driver itself, which must be reported to driver maintainers.</p>"},{"location":"guides/hybrid/#entering-the-web-view-context","title":"Entering the web view context","text":"<p>Here are the steps required to talk to a web view in your XCUITest driver test:</p> <ol> <li>Navigate to a portion of your app where a web view is active</li> <li>Retrieve the currently available contexts<ul> <li>This returns a list of contexts we can access, like <code>'NATIVE_APP'</code> or <code>'WEBVIEW_1'</code></li> </ul> </li> <li>Set the id of the context you want to access<ul> <li>This puts your XCUITest session into a mode where all commands are   interpreted as being intended for automating the web view, rather than the   native portion of the app. For example, if you run <code>findElement</code>, it   will operate on the DOM of the web view, rather than return native elements.   Of course, certain WebDriver methods only make sense in one context or   another, so in the wrong context you will receive an error message.</li> </ul> </li> <li>To stop automating in the web view context and go back to automating the    native portion of the app, simply set the context    again with the native context id (generally <code>'NATIVE_APP'</code>) to leave the web    context and once again access the native commands.</li> </ol>"},{"location":"guides/hybrid/#automatically-entering-the-web-view-context-on-session-start","title":"Automatically entering the web view context on session start","text":"<p>If your application begins in a web view, and you do not want to automate the native application before entering it, you can have XCUITest driver automatically enter the web view context on session initialization by setting the <code>autoWebview</code> capability to <code>true</code>.</p>"},{"location":"guides/hybrid/#examples","title":"Examples","text":"JavaRubyPython <pre><code>// java\n// assuming we have a set of capabilities\ndriver = new AppiumDriver(new URL(\"http://127.0.0.1:4723/\"), options);\n\nSet&lt;String&gt; contextNames = driver.getContextHandles();\nfor (String contextName : contextNames) {\n    System.out.println(contextName); //prints out something like NATIVE_APP \\n WEBVIEW_1\n}\ndriver.context(contextNames.toArray()[1]); // set context to WEBVIEW_1\n\n//do some web testing\nString myText = driver.findElement(By.cssSelector(\".green_button\")).click();\n\ndriver.context(\"NATIVE_APP\");\n\n// do more native testing if we want\n\ndriver.quit();\n</code></pre> <pre><code># ruby_lib_core\n# assuming we have a set of capabilities\n@driver = Appium::Core.for(url: SERVER_URL, desired_capabilities: capabilities).start_driver\n# ruby_lib\n# opts = { caps: capabilities, appium_lib: { custom_url: SERVER_URL }}\n# @driver = Appium::Driver.new(opts, true).start_driver\n\n# I switch to the last context because its always the webview in our case, in other cases you may need to specify a context\n# View the appium logs while running @driver.contexts to figure out which context is the one you want and find the associated ID\n# Then switch to it using @driver.switch_to.context(\"WEBVIEW_6\")\n\nGiven(/^I switch to webview$/) do\n    webview = @driver.available_contexts.last\n    @driver.switch_to.context(webview)\nend\n\nGiven(/^I switch out of webview$/) do\n    @driver.switch_to.context(@driver.contexts.first)\nend\n\n# Now you can use CSS to select an element inside your webview\n\nAnd(/^I click a webview button $/) do\n    @driver.find_element(:css, \".green_button\").click\nend\n</code></pre> <pre><code># python\n# assuming we have an initialized `driver` object for an app\n\n# switch to webview\nwebview = driver.contexts.last\ndriver.switch_to.context(webview)\n\n# do some webby stuff\ndriver.find_element(By.CSS, \".green_button\").click\n\n# switch back to native view\ndriver.switch_to.context(driver.contexts.first)\n\n# do more native testing if we want\n\ndriver.quit()\n</code></pre>"},{"location":"guides/input-events/","title":"About iOS Input Events","text":""},{"location":"guides/input-events/#what-are-input-events","title":"What Are Input Events","text":"<p>iOS uses the Events concept to handle signals received from different input devices. An Event is an object generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as a touch screen, it is necessary to just send Event objects with the same properties and in the same sequence as they would be generated by a real device.</p>"},{"location":"guides/input-events/#simulating-a-single-tap","title":"Simulating a Single Tap","text":"<p>The Events API itself is a part of Apple private API, and it is neither open sourced nor documented. The XCTest framework also does not expose any public APIs for input events generation, although there is a possibility to perform events generation via XCTest private undocumented APIs.</p> <p>In particular, we are interested in the <code>XCPointerEventPath</code> and <code>XCSynthesizedEventRecord</code> interfaces. These APIs allow to create chains of input events and supply them to the system kernel for execution.</p> <p>In order to synthesize a single tap, it is necessary to:</p> <ul> <li>Create a new <code>XCPointerEventPath</code> instance and initialize it for touch at the starting point</li> <li>Add a new <code>liftUp</code> event at <code>0.125s</code> offset using <code>liftUpAtOffset:</code> method</li> <li>Add the generated event path object to <code>XCSynthesizedEventRecord</code> instance using   <code>addPointerEventPath:</code> method</li> <li>Execute the events using <code>synthesizeWithError:</code> method of <code>XCSynthesizedEventRecord</code> instance and   control the returned error</li> </ul> <p>There are several limitations to these APIs:</p> <ul> <li>Each <code>XCPointerEventPath</code> instance can only be executed for a single action. If one tries to add,   for example, two taps to a single path, then these are effectively ignored</li> <li>Each <code>XCPointerEventPath</code> instance can only be initialized for a particular pointer type: touch,   mouse (since Xcode 10.2) or keyboard (since Xcode 10.2)</li> <li>Events can only be added with increasing offset values to an existing <code>XCPointerEventPath</code> instance</li> </ul>"},{"location":"guides/input-events/#more-complicated-actions","title":"More Complicated Actions","text":"<p>Unfortunately, because the API is private and has zero documentation, one can only figure out what it can do by playing with it and trying different input combinations.</p> <p>It is known that providing multiple <code>XCPointerEventPath</code> instances with overlapping timeouts will generate a multitouch action with the amount of fingers equal to the amount of the supplied event paths. So, in order to generate two-finger symmetric swipe we need to supply the following events:</p> <ul> <li>Create a two <code>XCPointerEventPath</code> instances and init them for touch at the starting point</li> <li>Add a <code>moveToPoint</code> event at <code>0.525s</code> offset using <code>moveToPoint:</code> method to each path</li> <li>Add a <code>liftUp</code> eventa at <code>0.525s</code> offset using <code>liftUpAtOffset:</code> method to each path</li> <li>Add the generated event paths to <code>XCSynthesizedEventRecord</code> instance using <code>addPointerEventPath:</code> method</li> <li>Execute the events using <code>synthesizeWithError:</code> method of <code>XCSynthesizedEventRecord</code> instance and   control the returned error</li> </ul>"},{"location":"guides/input-events/#further-reading","title":"Further Reading","text":"<p>Unfortunately, there is no information on this topic at all (private API <code>\u00af\\_(\u30c4)_/\u00af</code>). Consider visiting the following resources:</p> <ul> <li>https://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m</li> </ul>"},{"location":"guides/install-certificate/","title":"Self-Signed Certificates","text":"<p>Unfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or simulator. However, there is over-the-air enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps.</p> <p>You can use the following extension methods to assist with this:</p> <ul> <li><code>mobile: installCertificate</code></li> <li><code>mobile: removeCertificate</code></li> </ul>"},{"location":"guides/multiple-xcode-versions/","title":"Managing Multiple Xcodes","text":"<p>If you have multiple Xcode installations, you may choose which toolset Appium should use with one of two ways:</p>"},{"location":"guides/multiple-xcode-versions/#xcode-select-tool","title":"<code>xcode-select</code> tool","text":"<p>Only available with <code>sudo</code> privileges, affects the whole system.</p> <p>Assuming you want to choose <code>/Applications/Xcode13.app</code>:</p> <ol> <li>Set the default Xcode   <pre><code>sudo xcode-select -s /Applications/Xcode13.app/Contents/Developer\n</code></pre></li> <li>Run Appium   <pre><code>appium\n</code></pre></li> </ol>"},{"location":"guides/multiple-xcode-versions/#environment-variable","title":"Environment variable","text":"<p>No privileges needed, affects only the current shell, so Appium should be started within that shell.</p> <p>Assuming you want to choose <code>/Applications/Xcode12.app</code>:</p> <ol> <li>Set the <code>DEVELOPER_DIR</code> environment variable   <pre><code>export DEVELOPER_DIR=/Applications/Xcode12.app/Contents/Developer\n</code></pre></li> <li>Run Appium   <pre><code>appium\n</code></pre></li> </ol>"},{"location":"guides/parallel-tests/","title":"Testing in Parallel","text":"<p>It is possible to execute tests in parallel using XCUITest driver. Appium allows to do this on a per-process (multiple server processes running on different ports managing single session) or a per-request basis (single server process managing multiple sessions, more preferable, uses less resources and ensures better control over running sessions).</p> <p>Note</p> <p>If you are not going to run your tests in parallel, consider enabling the <code>--session-override</code> Appium server argument. It forces the server to close all pending sessions before a new one could be opened, which allows you to avoid possible issues with such sessions silently running/expiring in the background.</p>"},{"location":"guides/parallel-tests/#important-real-device-capabilities","title":"Important Real Device Capabilities","text":"<ul> <li><code>udid</code> must be a unique device UDID for each parallel session.</li> <li><code>wdaLocalPort</code> must be a unique port number for each parallel session. The default value is <code>8100</code>.</li> <li><code>derivedDataPath</code> set the unique derived data path root for each driver instance. This will help   to avoid possible conflicts and to speed up the parallel execution.</li> <li><code>mjpegServerPort</code> must be a unique port number for each parallel session if you are going to   record a video stream from it. The default value is <code>9100</code>.</li> </ul>"},{"location":"guides/parallel-tests/#important-simulator-capabilities","title":"Important Simulator Capabilities","text":"<ul> <li>Either <code>udid</code>, which is the unique simulator UDID for each parallel session (it could be retrieved   from <code>xcrun simctl list</code> command output), or a unique combination of <code>deviceName</code> and   <code>platformVersion</code> capabilities to identify the appropriate simulator with the given name and   version number for each parallel session.</li> <li><code>wdaLocalPort</code> must be a unique port number for each parallel session. The default value is <code>8100</code>.</li> <li><code>derivedDataPath</code> set the unique derived data path root for each driver instance. This will help   to avoid possible conflicts and to speed up the parallel execution.</li> <li><code>mjpegServerPort</code> must be a unique port number for each parallel session if you are going to   record a video stream from it. The default value is <code>9100</code>.</li> </ul>"},{"location":"guides/run-prebuilt-wda/","title":"Run Prebuilt WebDriverAgentRunner","text":"<p>The XCUITest driver runs <code>xcodebuild</code> to build and install the WebDriverAgentRunner (WDA) app on the target device. You can manually run a modified version of this command in order to prebuild the WDA.</p>"},{"location":"guides/run-prebuilt-wda/#how-xcodebuild-works","title":"How <code>xcodebuild</code> Works","text":"<p>By default, <code>xcodebuild</code> is run with two commands: <code>build-for-testing</code> and <code>test-without-building</code>. <code>build-for-testing</code> builds a test bundle package, whereas <code>test-without-building</code> actually runs it.</p> <p>For instance, XCUITest driver issues an <code>xcodebuild</code> command like so:</p> <pre><code>xcodebuild build-for-testing test-without-building \\\n  -project WebDriverAgent.xcodeproj \\\n  -derivedDataPath wda_build \\\n  -scheme WebDriverAgentRunner \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\" \\\n  CODE_SIGNING_ALLOWED=NO\n</code></pre> <p>This translates to <code>xcodebuild</code> building <code>WebDriverAgent.xcodeproj</code> and running the resulting package on the specified device.</p> <p>The command can be split into <code>build-for-testing</code> and <code>test-without-building</code> parts as follows:</p> <pre><code>xcodebuild build-for-testing \\\n  -project WebDriverAgent.xcodeproj \\\n  -derivedDataPath wda_build \\\n  -scheme WebDriverAgentRunner \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\" \\\n  CODE_SIGNING_ALLOWED=NO\n</code></pre> <pre><code>xcodebuild test-without-building \\\n  -xctestrun wda_build/Build/Products/WebDriverAgentRunner_iphonesimulator16.2-arm64.xctestrun \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\"\n</code></pre> <ul> <li> <p>The <code>build-for-testing</code> command generates two files: an <code>.app</code> package and an <code>.xctestrun</code> file, e.g.:</p> <pre><code>wda_build/Build/Products/Debug-iphonesimulator/WebDriverAgentRunner-Runner.app\nwda_build/Build/Products/WebDriverAgentRunner_iphonesimulator16.2-arm64.xctestrun\n</code></pre> <p>The <code>.xctestrun</code> file name depends on the <code>-destination</code> preference. The file contains metadata about the package (the <code>DependentProductPaths</code> key).</p> </li> <li> <p>The <code>test-without-building</code> command starts the WDA application for testing by referencing the   provided <code>.xctestrun</code> file. Once this is done, <code>http://localhost:8100</code> will be able to receive   commands for the target device.</p> </li> </ul>"},{"location":"guides/run-prebuilt-wda/#capabilities-for-prebuilt-wda-with-appiumusexctestrunfile-appiumuseprebuiltwda-or-appiumprebuildwda","title":"Capabilities for Prebuilt WDA with <code>appium:useXctestrunFile</code>, <code>appium:usePrebuiltWDA</code> or <code>appium:prebuildWDA</code>","text":"<p>The XCUITest driver provides two capabilities that allow skipping the <code>build-for-testing</code> command, and executing only the <code>test-without-building</code> command: <code>appium:useXctestrunFile</code> and <code>appium:bootstrapPath</code> (see Capabilities).</p> <p>Note</p> <p>These capabilities expect that the WDA files are already prebuild, so make sure to first run <code>xcodebuild</code> to create the files.</p> <p>This method can be used on both real devices and simulators, but real devices requires proper signing as described in Run Preinstalled WebDriverAgentRunner. We recommend using this method for real devices.</p> <p>The capabilities can be used as follows:</p> <pre><code>{\n  \"platformName\": \"ios\",\n  \"appium:automationName\": \"xcuitest\",\n  \"appium:platformVersion\": \"15.5\",\n  \"appium:deviceName\": \"iPhone 12\",\n  \"appium:useXctestrunFile\": true,\n  \"appium:bootstrapPath\": \"/path/to/wda_build/Build/Products\"\n}\n</code></pre> <p>Not all combinations have been tested, but the target device can probably be anything.</p> <p>The same thing can be achieved with the <code>appium:derivedDataPath</code> and <code>appium:usePrebuiltWDA</code> capabilities, but this may fail if <code>xcodebuild</code> cannot find or handle the <code>.xctestrun</code> file properly. The stability depends on Xcode.</p> <p><code>appium:prebuildWDA</code> lets the XCUITest driver build the WDA before running it, then the session will be handled with <code>appium:usePrebuiltWDA</code>. It might have additional building steps than with <code>appium:derivedDataPath</code> and <code>appium:usePrebuiltWDA</code> combination, but it could help <code>appium:usePrebuiltWDA</code> to not manage the WDA project.</p>"},{"location":"guides/run-prebuilt-wda/#capabilities-for-prebuilt-wda-with-appiumprebuiltwdapath","title":"Capabilities for Prebuilt WDA with <code>appium:prebuiltWDAPath</code>","text":"<p>Run Preinstalled WebDriverAgentRunner provides <code>appium:prebuiltWDAPath</code> capability. It also achieves the same thing, but the <code>appium:prebuiltWDAPath</code> does not use <code>xcodebuild</code>. Please check the link for more details.</p>"},{"location":"guides/run-prebuilt-wda/#download-prebuilt-wda","title":"Download Prebuilt WDA","text":"<p>The Appium WebDriverAgent GitHub page provides downloads for WebDriverAgent packages for real devices. They do not have embedded XCTest frameworks.</p> <p>The Release and Building WebDriverAgent workflows may help with validating the build script.</p> <p>For simulator environment, the prebuilt packages available on Building WebDriverAgent may not work for all environment as different building environment. We recommend preparing the <code>Build</code> directory, which is generated by <code>-derivedDataPath</code> <code>xcodebuild</code> argument, on your test running environment and re-use it.</p>"},{"location":"guides/run-preinstalled-wda/","title":"Run Preinstalled WebDriverAgentRunner","text":"<p>The XCUITest driver can be configured to launch an already-installed <code>WebDriverAgentRunner-Runner</code> application (WDA) on a real device and a simulator. This allows you to start a session without the <code>xcodebuild</code> command execution, improving the session startup performance.</p> <p>Warning</p> <p>iOS/tvOS 17+ specific:</p> <p>This method currently works over <code>devicectl</code> for iOS 17+ with Xcode 15+ environment since XCUITest driver v7.5.0. This may not work for tvOS 17+. iOS/tvOS 16 and lower ones work over appium-ios-device directly.</p>"},{"location":"guides/run-preinstalled-wda/#capabilities","title":"Capabilities","text":"<ul> <li>Required<ul> <li><code>appium:usePreinstalledWDA</code></li> </ul> </li> <li>Optional<ul> <li><code>appium:updatedWDABundleId</code></li> <li><code>appium:updatedWDABundleIdSuffix</code><ul> <li>Since XCUITest driver v7.6.0</li> </ul> </li> <li><code>appium:prebuiltWDAPath</code></li> </ul> </li> </ul>"},{"location":"guides/run-preinstalled-wda/#install-webdriveragent","title":"Install WebDriverAgent","text":""},{"location":"guides/run-preinstalled-wda/#using-xcode","title":"Using Xcode","text":"<p>Running a test for the WDA package in Xcode is the easiest way to prepare the device environment:</p> <ol> <li>Open WebDriverAgent project in Xcode<ul> <li>You can run <code>appium driver run xcuitest open-wda</code> if using XCUITest driver 4.13 or newer</li> </ul> </li> <li>Select the WebDriverAgentRunner scheme</li> <li>Select the scheme as Product -&gt; Scheme -&gt; WebDriverAgentRunner (or WebDriverAgentRunner_tvOS for tvOS)</li> <li>Select your device in Product -&gt; Destination</li> <li>Select Product -&gt; Test to build and install the WDA app</li> </ol> <p>If using a real device, you may need to change your bundle ID. Please check the Full Manual Provisioning Profile setup for details.</p>"},{"location":"guides/run-preinstalled-wda/#using-3rd-party-tools","title":"Using 3rd Party Tools","text":"<p>Some 3rd party tools such as pymobiledevice3, ios-deploy, go-ios and tidevice, ios-app-signer can install the WebDriverAgent package.</p> <p>Some tools let you set an arbitrary bundle identifier (<code>CFBundleIdentifier</code> for the <code>Info.plist</code>) and sign it with the bundle identifier. It may not have <code>.xctrunner</code> as the bundle identifier. XCUITest driver automatically adds the <code>.xctrunner</code> suffix to the provided bundle identifier unless a different suffix is specified by the <code>appium:updatedWDABundleIdSuffix</code> capability. If the value is an empty string, then no suffix will be added to the provided bundle identifier.</p> <p>The WDA app package (<code>WebDriverAgentRunner-Runner.app</code>) can be generated in the derivedDataPath directory, as explained in Manual Configuration for a Generic Device. The app can then be installed without <code>xcodebuild</code> using the 3rd party tools.</p>"},{"location":"guides/run-preinstalled-wda/#additional-requirement-for-ios-17tvos17","title":"Additional requirement for iOS 17+/tvOS17+","text":"<p>To launch the WebDriverAgentRunner package with <code>xcrun devicectl device process launch</code> for real devices it should not have <code>Frameworks/XC**</code> files.</p> <p>For example, after building the WebDriverAgent with Xcode with proper sign, it generates <code>/Users/&lt;user&gt;/Library/Developer/Xcode/DerivedData/WebDriverAgent-ezumztihszjoxgacuhatrhxoklbh/Build/Products/Debug-appletvos/WebDriverAgentRunner-Runner.app</code>. Then you can remove <code>Frameworks/XC**</code> in <code>WebDriverAgentRunner-Runner.app</code> like <code>rm Frameworks/WebDriverAgentRunner-Runner.app/XC**</code>.</p> <p>Configuring <code>appium:prebuiltWDAPath</code> to the <code>/Users/&lt;user&gt;/Library/Developer/Xcode/DerivedData/WebDriverAgent-ezumztihszjoxgacuhatrhxoklbh/Build/Products/Debug-appletvos/WebDriverAgentRunner-Runner.app</code> would install the <code>WebDriverAgentRunner-Runner.app</code>, which has no <code>Frameworks/XC**</code> to the target device and launch it with <code>devicectl</code> command as part of <code>appium:usePreinstalledWDA</code> functionality.</p>"},{"location":"guides/run-preinstalled-wda/#launch-the-session","title":"Launch the Session","text":"<p>After installing the <code>WebDriverAgentRunner-Runner</code> application, you can start the Appium server and launch an XCUITest driver session with the specified capabilities:</p> <pre><code>appium\n</code></pre> <pre><code># Ruby\ncapabilities: {\n  \"platformName\": \"ios\",\n  \"appium:automationName\": \"xcuitest\",\n  \"appium:udid\": \"&lt;udid&gt;\",\n  \"appium:usePreinstalledWDA\": true,\n  \"appium:updatedWDABundleId\": \"com.appium.WebDriverAgentRunner\"\n}\n@core = Appium::Core.for capabilities: capabilities\ndriver = @core.start_driver\n# do something\ndriver.quit\n</code></pre> <p>If the <code>&lt;udid&gt;</code> device has a WebDriverAgent package with <code>com.appium.WebDriverAgentRunner.xctrunner</code> bundle ID, the session will launch the WebDriverAgent process without <code>xcodebuild</code>.</p> <p>Note</p> <p>Please ensure that the WDA application is launchable before starting an XCUITest driver session. For example, check whether the provisioning profile is trusted.</p> <pre><code># Ruby\ncapabilities: {\n  \"platformName\": \"ios\",\n  \"appium:automationName\": \"xcuitest\",\n  \"appium:udid\": \"&lt;udid&gt;\",\n  \"appium:usePreinstalledWDA\": true,\n  \"appium:updatedWDABundleId\": \"io.appium.wda\"\n  \"appium:updatedWDABundleIdSuffix\": \"\"\n}\n@core = Appium::Core.for capabilities: capabilities\ndriver = @core.start_driver\n# do something\ndriver.quit\n</code></pre> <p>If the <code>&lt;udid&gt;</code> device has a WebDriverAgent package with <code>io.appium.wda</code> bundle ID (it does not have <code>.xctrunner</code>), the session will launch the WebDriverAgent process without <code>xcodebuild</code>.</p>"},{"location":"guides/run-preinstalled-wda/#set-appiumprebuiltwdapath","title":"Set <code>appium:prebuiltWDAPath</code>","text":"<p>If the <code>appium:prebuiltWDAPath</code> capability is provided with a <code>WebDriverAgentRunner-Runner.app</code> test bundle, the XCUITest driver will install the application and launch it every test session. Test bundles cannot be versioned using <code>CFBundleVersion</code> as vanilla applications do usually, which is why it is necessary to (re)install them for every test session. The test bundle should be signed properly for real devices.</p> <p>Usually you can find the WDA application bundle at the below location if you use Xcode to build it.</p> <pre><code>~/Library/Developer/Xcode/DerivedData/WebDriverAgent-&lt;random string&gt;/Build/Products/Debug-iphoneos/WebDriverAgentRunner-Runner.app\n</code></pre> <p>You can then set your Appium capabilities as follows:</p> <pre><code># Ruby\ncapabilities: {\n  \"platformName\": \"ios\",\n  \"appium:automationName\": \"xcuitest\",\n  \"appium:udid\": \"&lt;udid&gt;\",\n  \"appium:usePreinstalledWDA\": true,\n  \"appium:prebuiltWDAPath\": \"/path/to/Library/Developer/Xcode/DerivedData/WebDriverAgent-&lt;random string&gt;/Build/Products/Debug-iphoneos/WebDriverAgentRunner-Runner.app\"\n}\n@core = Appium::Core.for capabilities: capabilities\ndriver = @core.start_driver\n# do something\ndriver.quit\n</code></pre> <p>Note</p> <p>As of iOS 17, the testmanagerd service name has changed from <code>com.apple.testmanagerd</code> to <code>com.apple.dt.testmanagerd.runner</code>. It causes an unexpected WDA process crash with embedded XCTest frameworks while running a single WebDriverAgent package on various OS environments without <code>xcodebuild</code>.</p> <p>Since WDA v5.10.0, the module can refer to the device's local XCTest frameworks. It lets the Appium/WebDriverAgent package use proper dependencies for the device with a single prebuilt WebDriverAgent package. To set this up, you should remove the package internal frameworks from <code>WebDriverAgentRunner-Runner.app</code> with <code>rm -rf WebDriverAgentRunner-Runner.app/Frameworks/XC*.framework</code>. The WDA package itself is available from https://github.com/appium/WebDriverAgent.</p>"},{"location":"guides/touch-id/","title":"Touch ID","text":"<p>The XCUITest driver has the capability to simulate Touch ID.</p> <p>Note</p> <p>This functionality is only supported on simulators.</p>"},{"location":"guides/touch-id/#configuration","title":"Configuration","text":"<p>To use Touch ID, the application that Appium launches from (Terminal, iTerm, etc.) must be added to the accessibility preferences on your Mac. Navigate to System Preferences -&gt; Privacy &amp; Security -&gt; Accessibility and under Allow the apps below to control your computer add the application.</p> <p>Why this is needed: The only way Appium can enable enrollment and toggling of Touch ID is to use system-level accessibility APIs to simulate mouse clicks on the simulator menus via AppleScript.</p>"},{"location":"guides/touch-id/#usage","title":"Usage","text":"<ul> <li>Set the capability <code>appium:allowTouchIdEnroll</code> to <code>true</code>.</li> <li>When the Simulator starts, Touch ID enrollment will be enabled by default</li> <li>You can toggle Touch ID enrollment by calling the   <code>mobile: enrollBiometric</code> extension</li> </ul> <p>Note</p> <p>Remember that not all iOS devices have Touch ID, so your tests should handle cases where Touch ID is not supported.</p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":""},{"location":"guides/troubleshooting/#known-problems","title":"Known Problems","text":"<ul> <li>Real devices with iOS/iPadOS 15+ show an overlay with the text <code>Automation Running Hold both   volume buttons to stop</code> while WebDriverAgent is running. This is a known limitation of the XCTest   framework. Note that screenshotting functionality is not affected (i.e. the overlay is not visible   on taken screenshots).</li> <li>Real devices with iOS/iPadOS 15+ require passcode or Touch ID   when starting a new session. A workaround for this is to disable passcode/Touch ID on the device.</li> <li>After many failures on a real device, it could transition to a state where connections are no   longer being accepted. Rebooting the device can help remedy this problem. Please read   this issue for more details.</li> <li><code>shake</code> is implemented via AppleScript and works only on Simulator due to lack of support from Apple</li> </ul>"},{"location":"guides/troubleshooting/#interact-with-dialogs-managed-by-comapplespringboard","title":"Interact with dialogs managed by <code>com.apple.springboard</code>","text":"<p>System dialogs, such as permission dialogs, might not be interactable directly when the active application is not <code>com.apple.springboard</code>. Despite a similar look, dialogs belonging to the active session application (e.g. initially passed as <code>appium:app</code> or <code>appium:bundleId</code> capability value) do not require such adjustment.</p> <p>XCUITest driver offers a couple of approaches to handle them:</p> <ul> <li>Set the respectSystemAlerts setting to <code>true</code>. It enforces the active application   detection algorithm to check a presence of system alerts and to return the Springboard app if this check succeeds.   Such approach emulates the driver behavior prior to version 6 of XCUITest driver, although it might slightly   slow down your scripts because each attempt to detect an active app would require to also query for alerts   presence.</li> <li>Start a session without <code>appium:app</code> nor <code>appium:bundleId</code>. Then XCUITest driver attempts to get the current active application. This requires you to start an application after a new session request with <code>mobile: installApp</code> to install an app if needed and <code>mobile: launchApp</code>/<code>mobile: activateApp</code>, but it could automatically change the active application with <code>com.apple.springboard</code> or activate an application at the foreground. (Note that the automatic app detection might be lengthy, thus each action could take more time.)<ul> <li>When a permission alert exists at the foreground, it could select the <code>com.apple.springboard</code></li> <li>When another application is at the foreground by accepting/denying the system alert, or <code>mobile: activateApp</code>, the application would be selected as an active application.</li> </ul> </li> <li><code>mobile: alert</code></li> <li><code>defaultActiveApplication</code> setting in Settings.<ul> <li>e.g. With the Appium Ruby client <pre><code># Interacting with the test target\ndriver.settings.update({defaultActiveApplication: \"com.apple.springboard\"})\n# to accept the alert\ndriver.find_element(\"accessibility_id\", \"Allow Once\").click\ndriver.settings.update({defaultActiveApplication: \"auto\"})\n# keep interacting with the test target\n</code></pre></li> </ul> </li> <li>Enable <code>appium:autoAcceptAlerts</code>/<code>appium:autoDismissAlerts</code>, or interact with alerts via User Prompts in WebDriver endpoints<ul> <li>e.g. <code>driver.switch_to.alert.accept</code> with the Appium Ruby client</li> <li>It might be necessary to coordinate element selection via <code>acceptAlertButtonSelector</code>/<code>dismissAlertButtonSelector</code> settings in Settings</li> </ul> </li> <li>Activate <code>com.apple.springboard</code> with <code>mobile: activateApp</code> before interacting with dialogs</li> </ul> <p><code>mobile: activeAppInfo</code> helps to understand what application (bundleId) is considered as active for the XCUITest driver.</p>"},{"location":"guides/troubleshooting/#interact-with-dialogs-managed-by-comapplecontactsuilimitedaccesspromptview","title":"Interact with dialogs managed by <code>com.apple.ContactsUI.LimitedAccessPromptView</code>","text":"<p>iOS 18 introduced a new process named <code>com.apple.ContactsUI.LimitedAccessPromptView</code>. See this issue for more details. As of XCUITest driver v7.26.4, the only workaround to interact with views available through the process is the below method:</p> <ul> <li><code>defaultActiveApplication</code> setting in Settings.<ul> <li>e.g. With the Appium Ruby client <pre><code># Interacting with the test target\ndriver.settings.update({defaultActiveApplication: \"com.apple.ContactsUI.LimitedAccessPromptView\"})\n# to accept the alert\ndriver.find_element(\"accessibility_id\", \"Select Contacts\").click\ndriver.settings.update({defaultActiveApplication: \"auto\"})\n# keep interacting with the test target\n</code></pre></li> </ul> </li> </ul> <p>The <code>com.apple.ContactsUI.LimitedAccessPromptView</code> process can get elements available through <code>com.apple.springboard</code>, such as several system permission dialogs. iOS 18+ devices may be possible to use <code>com.apple.ContactsUI.LimitedAccessPromptView</code> to interact with elements managed either by <code>com.apple.ContactsUI.LimitedAccessPromptView</code> or <code>com.apple.springboard</code>.</p>"},{"location":"guides/troubleshooting/#leftover-application-data-on-real-devices","title":"Leftover Application Data on Real Devices","text":"<p>There might be a situation where application data is present on the real device, even if the application itself is not installed. This could happen if:</p> <ul> <li>The app is in an offloaded state</li> <li>The application state is cached</li> <li>There was an unexpected failure while installing the app. An example of such failure is the   <code>ApplicationVerificationFailed</code> which happens while installing an app signed with an invalid provisioning profile.</li> </ul> <p>In the above cases, the application identifier will not be listed in the output of <code>mobile: listApps</code>, and it will not be detected by <code>mobile: isAppInstalled</code>. Setting <code>appium:fullReset</code> or <code>appium:enforceAppInstall</code> capabilities to <code>true</code> also will not help clear this data.</p> <p>The only way to completely get rid of the cached application data is to call the <code>mobile: removeApp</code> command with the appropriate bundle identifier.</p> <p>The driver does automatically try to resolve application installs that failed because of the <code>MismatchedApplicationIdentifierEntitlement</code> error. However, in cases when the previously installed application's provisioning profile is different from what currently the driver is trying to install, and if you explicitly set the driver to not perform application uninstall, then consider calling <code>mobile: removeApp</code> before the <code>MismatchedApplicationIdentifierEntitlement</code> error occurs. Example steps can be as follows:</p> <ol> <li>Start a session without <code>appium:app</code> and <code>appium:bundleId</code> capabilities</li> <li>Call <code>mobile: removeApp</code> for the target    application's bundle id</li> <li>Install the test target with <code>mobile: installApp</code></li> <li>Launch the application with <code>mobile: launchApp</code>    or <code>mobile: activateApp</code></li> </ol>"},{"location":"guides/troubleshooting/#weird-state","title":"Weird State","text":""},{"location":"guides/troubleshooting/#real-device-stops-responding","title":"Real Device Stops Responding","text":"<p>Running tests on a real device is particularly flakey. If things stop responding, the only recourse is, most often, to restart the device. Logs in the form of the following may start to occur:</p> <pre><code>info JSONWP Proxy Proxying [POST /session] to [POST http://10.35.4.122:8100/session] with body: {\"desiredCapabilities\":{\"ap...\"\ndbug WebDriverAgent Device: Jul 26 13:20:42 iamPhone XCTRunner[240] &lt;Warning&gt;: Listening on USB\ndbug WebDriverAgent Device: Jul 26 13:21:42 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - Unable to update application state promptly. &lt;unknown&gt; 0 1\ndbug WebDriverAgent Device: Jul 26 13:21:57 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - Failed to get screenshot within 15s &lt;unknown&gt; 0 1\ndbug WebDriverAgent Device: Jul 26 13:22:57 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - App state of (null) is still unknown &lt;unknown&gt; 0 1\n</code></pre>"},{"location":"guides/troubleshooting/#command-takes-60-seconds","title":"Command Takes 60+ Seconds","text":"<p>Sometimes it is possible to encounter slowdowns for an additional 60 seconds for a command that usually should not take long. This may be caused by a crash in the <code>testmanagerd</code> process on the device under test. In such case, the OS tries to restore the process, then wait for the resurrected daemon to connect to the target process, which causes the aforementioned delay.</p> <p>This can be fixed by terminating the target application process. For example, if this behavior occurs while calling <code>mobile: queryAppState</code>, you can terminate the application once, or restart the device entirely. Please check this pull request for more details.</p>"},{"location":"guides/troubleshooting/#real-device-security-settings","title":"Real Device Security Settings","text":"<p>On some systems, especially CI ones, where tests are executed by command line agents, macOS Accessibility restrictions result in the WebDriverAgent process being unable to retrieve the development keys from the system keychain. This usually manifests by <code>xcodebuild</code> returning error code <code>65</code>. One workaround for this is to use a private key that is not stored on the system keychain. See this issue and this Stack Exchange post.</p> <p>To export the key, use</p> <pre><code>security create-keychain -p [keychain_password] MyKeychain.keychain\nsecurity import MyPrivateKey.p12 -t agg -k MyKeychain.keychain -P [p12_Password] -A\n</code></pre> <p>where <code>MyPrivateKey.p12</code> is the private development key exported from the system keychain.</p> <p>You can then use the <code>appium:keychainPath</code> and <code>appium:keychainPassword</code> capabilities to pass this keychain to WebDriverAgent.</p>"},{"location":"guides/troubleshooting/#simulator-resetting","title":"Simulator Resetting","text":"<p>When testing on simulators, the driver tries to leave the simulator state as it found it:</p> <ul> <li>If no <code>udid</code> is provided, the driver will create a new iOS simulator, run tests on it, and then   delete the simulator</li> <li>If a specific <code>udid</code> is provided for a simulator that is not running, the driver will boot the   specified simulator, run tests on it, and then shut the simulator down</li> <li>If a specific <code>udid</code> is provided for a simulator that is running, the driver will connect to the   existing simulator, run tests, and then leave the simulator running</li> </ul> <p>You can use the <code>appium:noReset</code> capability to adjust this behavior: setting it to <code>true</code> will leave the simulator running at the end of a test session.</p>"},{"location":"guides/troubleshooting/#caching-issues-during-build","title":"Caching Issues During Build","text":"<p>Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs, all of which are safe to delete if any issues arise. The files are usually found in the following locations, should they need to be deleted:</p> <pre><code>$HOME/Library/Logs/CoreSimulator/*\n$HOME/Library/Developer/Xcode/DerivedData/*\n</code></pre>"},{"location":"guides/troubleshooting/#frequent-disconnecting-from-remote-debugger-error-in-ios-17","title":"Frequent <code>Disconnecting from remote debugger</code> error in iOS 17","text":"<p>Please try out iOS 17.6 or a newer version which includes a possible fix by Apple.</p> <p>Frequent Web Inspector debugger disconnection started since iOS 17.2 (or iOS 17.0), that eventually caused <code>Disconnecting from remote debugger</code> error. It could be improved since iOS 17.6. Please check the corresponding pull request for more details.</p>"},{"location":"guides/tvos/","title":"tvOS Support","text":"<p>The XCUITest driver supports automation of the tvOS platform.</p> <p></p> <p>Warning</p> <p>Apple TV 4K is not supported. This is because <code>appium-ios-device</code>, which is used to support low-level communication with devices, only supports devices connected via USB.</p>"},{"location":"guides/tvos/#setup","title":"Setup","text":"<p>You can run tests for tvOS by setting the <code>platformName</code> capability to <code>tvOS</code>:</p> <pre><code>{\n    \"platformName\": \"tvOS\", // here\n    \"appium:automationName\": \"XCUITest\",\n    \"appium:platformVersion\": \"12.2\",\n    \"appium:deviceName\": \"Apple TV\",\n    ...\n}\n</code></pre> <p>Note</p> <p>If using a simulator, make sure the tvOS simulator exists in your simulator list. You can run <code>xcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\"</code> to verify this.</p>"},{"location":"guides/tvos/#basic-actions","title":"Basic Actions","text":"<p>tvOS provides remote controller based actions. The XCUITest driver implements these actions using the <code>mobile: pressButton</code> extension, with the following button values: <code>menu</code>, <code>up/down/left/right</code>, <code>home</code>, <code>playpause</code> and <code>select</code>.</p> <p>All actions are performed on the focused element (which has the <code>focus</code> attribute set). The focused element is automatically changed after using <code>mobile: pressButton</code>.</p> <p>It is also possible to use the standard <code>findElement</code> and <code>click</code> methods. The XCUITest driver will automatically calculate the necessary sequence of <code>up/down/left/right</code> and <code>select</code> button presses, so you should not care about which keys should be pressed to reach an arbitrary element every time.</p> JavaJS (WebdriverIO)PythonRuby <pre><code>WebElement element = driver.findElementByAccessibilityId(\"element on the app\");\nelement.getAttribute(\"focused\"); // =&gt; 'true'\n// Appium moves the focus to the element by pressing the corresponding keys and clicking the element\nelement.click();\ndriver.queryAppState(\"test.package.name\"); // =&gt; :running_in_foreground\ndriver.executeScript(\"mobile: pressButton\", ImmutableMap.of(\"name\", \"Home\"));\ndriver.executeScript(\"mobile: pressButton\", ImmutableMap.of(\"name\", \"Up\"));\nelement = driver.switchTo().activeElement();\nelement.getAttribute(\"label\");\n</code></pre> <pre><code>const element = $('~SomeAccessibilityId');\nelement.getAttribute('focused');\nelement.click();\ndriver.execute('mobile: pressButton', {name: 'Home'});\ndriver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = driver.getActiveElement();\nactiveElement.getAttribute('label');\n</code></pre> <pre><code>element = driver.find_element_by_accessibility_id('element on the app')\nelement.get_attribute('focused')\nelement.click()\ndriver.query_app_state('test.package.name')\ndriver.execute_script('mobile: pressButton', { 'name': 'Home' })\ndriver.execute_script('mobile: pressButton', { 'name': 'Up' })\nelement = driver.switch_to.active_element\nelement.get_attribute('label')\n</code></pre> <pre><code>element = @driver.find_element :accessibility_id, 'element on the app'\nelement.focused\nelement.click\n@driver.app_state('test.package.name')\n@driver.execute_script 'mobile: pressButton', { name: 'Home' }\n@driver.execute_script 'mobile: pressButton', { name: 'Up' }\nelement = @driver.switch_to.active_element\nelement.label\n</code></pre>"},{"location":"guides/tvos/#more-actions","title":"More Actions","text":"<ul> <li>Consider using <code>wait</code> methods, since tvOS also has animation</li> <li>The <code>menu</code> button works as back for iOS context in tvOS</li> </ul>"},{"location":"guides/tvos/#known-limitations","title":"Known Limitations","text":"<ul> <li>Gesture commands do not work for tvOS. Some commands such as pasteboard do not work as well.</li> </ul>"},{"location":"guides/tvos/#related-tickets","title":"Related Tickets","text":"<ul> <li>https://github.com/appium/appium/pull/12401</li> <li>https://github.com/appium/appium-xcuitest-driver/pull/911</li> <li>https://github.com/appium/appium-xcuitest-driver/pull/931</li> <li>https://github.com/appium/appium-xcuitest-driver/pull/939</li> <li>https://github.com/appium/WebDriverAgent/pull/163</li> </ul>"},{"location":"guides/wda-custom-server/","title":"Manage WebDriverAgent by Yourself","text":"<p>The XCUITest driver uses WebDriverAgent (WDA) as the automation backend. This backend is based on Apple's XCTest framework and shares all the known problems that are present in XCTest. For some of them we have workarounds, but there are some that are hardly possible to workaround (here is one example). The approach described in this article enables you to have full control over how WDA is built, managed, and run on the device. This way you may fine-tune your automated tests in a CI environment and make them more stable inlong-running perspective.</p> <p>Note</p> <ul> <li>The steps below are not necessary if default Appium capabilities are used. The server will do   everything for you, however, you will not have so much control over WDA.</li> <li>It is mandatory to have SSH or physical access to the machine to which the device under test   is connected.</li> </ul>"},{"location":"guides/wda-custom-server/#wda-setup","title":"WDA Setup","text":"<p>In order to setup and launch WDA, please check the provided steps in the Run Preinstalled WDA documentation.</p>"},{"location":"guides/wda-custom-server/#wda-startup-via-code","title":"WDA Startup via Code","text":"<p>WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls for your application under test. The server address will be <code>localhost</code> if you run your tests on a simulator, or the actual phone IP address in case of real device. Appium uses <code>appium-ios-device</code> to route network requests to a real device from <code>localhost</code> via USB, which means one can use this tool to unify the WDA network addresses for a simulator and real device.</p> <p>You can use <code>appium-ios-device</code> to connect to a remote device by requiring the module from your JavaScript code. Alternatively, you can use <code>iproxy</code>, <code>go-ios</code> or <code>tidevice</code> to handle the WDA process outside Appium, by installing and launching the WDA package. For instance, <code>iproxy</code> can be installed using <code>npm</code>: <code>npm install -g iproxy</code>.</p> <p>This helper class written in Java illustrates the main implementation details with <code>iproxy</code>:</p> <pre><code>public class WDAServer {\n    private static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\n\n    private static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\n    private static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\n    private static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n\n    // These settings are needed to properly sign WDA for real device tests\n    // See https://github.com/appium/appium-xcuitest-driver for more details\n    private static final File KEYCHAIN = new File(String.format(\"%s/%s\",\n            System.getProperty(\"user.home\"), \"/Library/Keychains/MyKeychain.keychain\"));\n    private static final String KEYCHAIN_PASSWORD = \"******\";\n\n    private static final File IPROXY_EXECUTABLE = new File(\"/usr/local/bin/iproxy\");\n    private static final File XCODEBUILD_EXECUTABLE = new File(\"/usr/bin/xcodebuild\");\n    private static final File WDA_PROJECT =\n            new File(\"~/.appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent\" +\n                    \"/WebDriverAgent.xcodeproj\");\n    private static final String WDA_SCHEME = \"WebDriverAgentRunner\";\n    private static final String WDA_CONFIGURATION = \"Debug\";\n    private static final File XCODEBUILD_LOG = new File(\"/usr/local/var/log/appium/build.log\");\n    private static final File IPROXY_LOG = new File(\"/usr/local/var/log/appium/iproxy.log\");\n\n    private static final int PORT = 8100;\n    public static final String SERVER_URL = String.format(\"http://127.0.0.1:%d\", PORT);\n\n    private static final String[] IPROXY_CMDLINE = new String[]{\n            IPROXY_EXECUTABLE.getAbsolutePath(),\n            Integer.toString(PORT),\n            Integer.toString(PORT),\n            String.format(\"&gt; %s 2&gt;&amp;1 &amp;\", IPROXY_LOG.getAbsolutePath())\n    };\n\n    private static WDAServer instance = null;\n    private final boolean isRealDevice;\n    private final String deviceId;\n    private final String platformVersion;\n    private int failedRestartRetriesCount = 0;\n\n    private WDAServer() {\n        try {\n            this.isRealDevice = !getIsSimulatorFromConfig(getClass());\n            final String udid;\n            if (isRealDevice) {\n                udid = IOSRealDeviceHelpers.getUDID();\n            } else {\n                udid = IOSSimulatorHelpers.getId();\n            }\n            this.deviceId = udid;\n            this.platformVersion = getPlatformVersionFromConfig(getClass());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        ensureToolsExistence();\n        ensureParentDirExistence();\n    }\n\n    public synchronized static WDAServer getInstance() {\n        if (instance == null) {\n            instance = new WDAServer();\n        }\n        return instance;\n    }\n\n    private boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\n        final URL status = new URL(SERVER_URL + \"/status\");\n        try {\n            if (timeout.asSeconds() &gt; 5) {\n                log.debug(String.format(\"Waiting max %s until WDA server starts responding...\", timeout));\n            }\n            new UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\n            return true;\n        } catch (UrlChecker.TimeoutException e) {\n            return false;\n        }\n    }\n\n    private static void ensureParentDirExistence() {\n        if (!XCODEBUILD_LOG.getParentFile().exists()) {\n            if (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\n                throw new IllegalStateException(String.format(\n                        \"The script has failed to create '%s' folder for Appium logs. \" +\n                                \"Please make sure your account has correct access permissions on the parent folder(s)\",\n                        XCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n            }\n        }\n    }\n\n    private void ensureToolsExistence() {\n        if (isRealDevice &amp;&amp; !IPROXY_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\"%s tool is expected to be installed (`npm install -g iproxy`)\",\n                    IPROXY_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!XCODEBUILD_EXECUTABLE.exists()) {\n            throw new IllegalStateException(String.format(\"xcodebuild tool is not detected on the current system at %s\",\n                    XCODEBUILD_EXECUTABLE.getAbsolutePath()));\n        }\n        if (!WDA_PROJECT.exists()) {\n            throw new IllegalStateException(String.format(\"WDA project is expected to exist at %s\",\n                    WDA_PROJECT.getAbsolutePath()));\n        }\n    }\n\n    private List&lt;String&gt; generateXcodebuildCmdline() {\n        final List&lt;String&gt; result = new ArrayList&lt;&gt;();\n        result.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\n        result.add(\"clean build-for-testing test-without-building\");\n        result.add(String.format(\"-project %s\", WDA_PROJECT.getAbsolutePath()));\n        result.add(String.format(\"-scheme %s\", WDA_SCHEME));\n        result.add(String.format(\"-destination id=%s\", deviceId));\n        result.add(String.format(\"-configuration %s\", WDA_CONFIGURATION));\n        result.add(String.format(\"IPHONEOS_DEPLOYMENT_TARGET=%s\", platformVersion));\n        result.add(String.format(\"&gt; %s 2&gt;&amp;1 &amp;\", XCODEBUILD_LOG.getAbsolutePath()));\n        return result;\n    }\n\n    private static List&lt;String&gt; generateKeychainUnlockCmdlines() throws Exception {\n        final List&lt;String&gt; result = new ArrayList&lt;&gt;();\n        result.add(String.format(\"/usr/bin/security -v list-keychains -s %s\", KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\"/usr/bin/security -v unlock-keychain -p %s %s\",\n                KEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\n        result.add(String.format(\"/usr/bin/security set-keychain-settings -t 3600 %s\", KEYCHAIN.getAbsolutePath()));\n        return result;\n    }\n\n    public synchronized void restart() throws Exception {\n        if (isRealDevice &amp;&amp; failedRestartRetriesCount &gt;= MAX_REAL_DEVICE_RESTART_RETRIES) {\n            throw new IllegalStateException(String.format(\n                    \"WDA server cannot start on the connected device with udid %s after %s retries. \" +\n                            \"Reboot the device manually and try again\", deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n        }\n\n        final String hostname = InetAddress.getLocalHost().getHostName();\n        log.info(String.format(\"Trying to (re)start WDA server on %s:%s...\", hostname, PORT));\n        UnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\n\n        final File scriptFile = File.createTempFile(\"script\", \".sh\");\n        try {\n            final List&lt;String&gt; scriptContent = new ArrayList&lt;&gt;();\n            scriptContent.add(\"#!/bin/bash\");\n            if (isRealDevice &amp;&amp; isRunningInJenkinsNetwork()) {\n                scriptContent.add(String.join(\"\\n\", generateKeychainUnlockCmdlines()));\n            }\n            if (isRealDevice) {\n                scriptContent.add(String.join(\" \", IPROXY_CMDLINE));\n            }\n            final String wdaBuildCmdline = String.join(\" \", generateXcodebuildCmdline());\n            log.debug(String.format(\"Building WDA with command line:\\n%s\\n\", wdaBuildCmdline));\n            scriptContent.add(wdaBuildCmdline);\n            try (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\n                output.write(String.join(\"\\n\", scriptContent));\n            }\n            new ProcessBuilder(\"/bin/chmod\", \"u+x\", scriptFile.getCanonicalPath())\n                    .redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\n            final ProcessBuilder pb = new ProcessBuilder(\"/bin/bash\", scriptFile.getCanonicalPath());\n            final Map&lt;String, String&gt; env = pb.environment();\n            // This is needed for Jenkins\n            env.put(\"BUILD_ID\", \"dontKillMe\");\n            // This line is important. If USE_PORT environment variable is not set then WDA\n            // takes port number zero by default and won't accept any incoming requests\n            env.put(\"USE_PORT\", Integer.toString(PORT));\n            log.info(String.format(\"Waiting max %s for WDA to be (re)started on %s:%s...\", RESTART_TIMEOUT.toString(),\n                    hostname, PORT));\n            final Timedelta started = Timedelta.now();\n            pb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\n            if (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n                ++failedRestartRetriesCount;\n                throw new IllegalStateException(\n                        String.format(\"WDA server has failed to start after %s timeout on server '%s'.\\n\"\n                                        + \"Please make sure that iDevice is properly connected and you can build \"\n                                        + \"WDA manually from XCode.\\n\"\n                                        + \"Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n\",\n                                RESTART_TIMEOUT, hostname,\n                                getLog(XCODEBUILD_LOG).orElse(\"EMPTY\"), getLog(IPROXY_LOG).orElse(\"EMPTY\"))\n                );\n            }\n\n            log.info(String.format(\"WDA server has been successfully (re)started after %s \" +\n                    \"and now is listening on %s:%s\", Timedelta.now().diff(started).toString(), hostname, PORT));\n        } finally {\n            scriptFile.delete();\n        }\n    }\n\n    public boolean isRunning() throws Exception {\n        if (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n                || (isRealDevice &amp;&amp; !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\n            return false;\n        }\n        return waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n    }\n\n    public Optional&lt;String&gt; getLog(File logFile) {\n        if (logFile.exists()) {\n            try {\n                return Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName(\"UTF-8\")));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return Optional.empty();\n    }\n}\n</code></pre> <p>The following piece of code should then be called before starting the XCUITest driver:</p> <pre><code>if (!WDAServer.getInstance().isRunning()) {\n    WDAServer.getInstance().restart();\n}\n</code></pre> <p>It is important to set the <code>appium:webDriverAgentUrl</code> capability for the driver to let it know that WDA is ready for use:</p> <pre><code>capabilities.setCapability(\"webDriverAgentUrl\", WDAServer.SERVER_URL);\n</code></pre>"},{"location":"guides/wda-custom-server/#important-notes","title":"Important Notes","text":"<ul> <li>The process does not have direct access to keychain if it is executed by a continuous integration   agent, so the keychain must be prepated before compiling WDA for real device, otherwise   codesigning will fail. Check the CI Setup documentation for details.</li> <li>The <code>xcodebuild</code> and <code>iproxy</code> processes are killed before restart to make sure compilation   succeeds, in case the processes are frozen</li> <li>A dedicated <code>bash</code> script is used to detach the <code>iproxy</code>/<code>xcodebuild</code> processes, so they can   continue running in background even after the actual code execution is finished. This is extremely   important if multiple tests/suites are executed on the same machine/node in automation lab, which   requires minimum human interaction</li> <li>The value of the <code>BUILD_ID</code> environment variable is changed to avoid the CI agent killing the   background process after the job is finished</li> <li>The <code>isRunning</code> check is done by verifying the actual network endpoint</li> <li>The output of daemonized processes is logged, so it is possible to track errors and unexpected   failures. The content of the log files is automatically added to the actual error message if the   server fails to (re)start.</li> <li>Real device id can be parsed from <code>system_profiler SPUSBDataType</code> output</li> <li>Simulator id can be parsed from <code>xcrun simctl list</code> output</li> <li>The <code>UrlChecker</code> class is imported from the <code>org.openqa.selenium.net</code> package</li> </ul>"},{"location":"guides/wda-slowness/","title":"Diagnosing WebDriverAgent Slowness","text":"<p>The XCUITest driver is based on Apple's XCTest test automation framework and thus inherits most (if not all) properties and features this framework provides. The purpose of this article is to help with optimization of automation scenarios that don't perform well and/or to explain possible causes of such behavior.</p>"},{"location":"guides/wda-slowness/#slowness-could-be-different","title":"\"Slowness\" could be different","text":"<p>First, it is important to figure out what exactly is slow. The Appium ecosystem is complicated and consists of multiple layers, where each layer could influence the overall duration. For example, when an API call is invoked from a client script, it must go through the following stages:</p> <p>Your automation script (Java, Python, C#, etc; runs on your machine) --&gt; Appium Client Lib (Java, Python, C#, etc; runs on your machine) --&gt; Appium Server (Node.js HTTP server; runs on your machine or a remote one) --&gt; XCUITest Driver and/or Plugin (Node.js HTTP handler; runs on your machine or a remote one) --&gt; WDA Server (ObjectiveC HTTP Server; runs on the remote mobile device)</p> <p>The example above is the simplest flow. If you run your scripts using cloud providers infrastructure then the amount of intermediate components in this chain may be much greater. Like it was mentioned above, it is very important to know on which stage(s) (or between them) the bottleneck is observed.</p> <p>This particular article focuses only on the last stage: the WDA Server one.</p>"},{"location":"guides/wda-slowness/#webdriveragent-wda-server","title":"WebDriverAgent (WDA) Server","text":"<p>WDA source code is located in the separate repository. The content of this repository is published as appium-webdriveragent NPM package and contains several helper Node.js modules along with the WDA source code itself. This source code is compiled into an .xctrunner bundle, which is a special application type that contains tests (also it has some higher privileges in comparison to vanilla apps). WebDriverAgent project itself consists of three main parts:</p> <ul> <li>Vendor Libs</li> <li>WebDriverAgentLib</li> <li>WebDriverAgentRunner</li> </ul> <p>Vendor libs, like RoutingHTTPServer, ensure the support for low-level HTTP- and TCP-server APIs. WebDriverAgentLib defines handlers for W3C WebDriver endpoints and implements all the heavy-lifting procedures related to Apple's XCTest communication and some more custom stuff specific for the XCUITest driver. WebDriverAgentRunner is actually one long test, whose main purpose is to run the HTTP server implemented by the WebDriverAgentLib.</p> <p>Important conclusions from the above information:</p> <ul> <li>WDA is an HTTP server, which executes API commands by invoking HTTP response handlers</li> <li>WDA uses Apple's XCTest APIs with various custom additions</li> </ul>"},{"location":"guides/wda-slowness/#how-to-confirm-my-scripts-bottleneck-is-wda","title":"How to confirm my script's bottleneck is WDA","text":"<p>Check the server logs in order to verify how long it takes for the XCUITest driver to receive a response from WDA. The log line that is written before an HTTP request is proxied to WDA looks like <code>Proxying [X] to [Y]</code>. Also consider enabling server timestamps by providing the <code>--log-timestamp</code> command line parameter. If you observe timestamps between the above log line and the next one differ too much and the difference is an anomaly (e.g. the same step is (much) faster for other apps/environments/parameter combinations) then it might serve as a confirmation of a suspicious slowness.</p>"},{"location":"guides/wda-slowness/#patterns-lookup","title":"Patterns lookup","text":"<p>After the slowness is confirmed it is important to determine behavior patterns, e.g. under which circumstances does it happen, if it is always reproducible, etc. This article only targets specific patterns that the author knows of or dealt with. If your pattern is not present here then try to look for possible occurrences in existing issues, Appium forum or just search the internet.</p>"},{"location":"guides/wda-slowness/#pattern-application-startup-is-slow","title":"Pattern: Application startup is slow","text":""},{"location":"guides/wda-slowness/#symptoms","title":"Symptoms","text":"<p>You observe timeouts or unusual slowness (in comparison to manual execution performance) of the application startup on session init (if it also includes app startup) or mid-session app startup.</p>"},{"location":"guides/wda-slowness/#causes","title":"Causes","text":"<p>When XCTest starts an app it ensures the accessibility layer of it is ready for interactions. To check that the framework verifies the application is idling (e.g. does not perform any actions on the main thread) as well as all animations have been finished. If this check times out an exception is thrown or WDA may try to continue without any guarantees the app could be interacted with (a.k.a. best effort strategy).</p>"},{"location":"guides/wda-slowness/#solutions","title":"Solutions","text":"<p>I was observing applications that were constantly running something on the main thread in an endless loop. Most likely such apps are not automatable at all or hardly automatable without fixing the app source code itself. You may still try to tune the following capabilities and settings to influence the above timeout:</p> <ul> <li>appium:waitForIdleTimeout</li> <li>waitForIdleTimeout</li> <li>animationCoolOffTimeout</li> </ul>"},{"location":"guides/wda-slowness/#pattern-element-location-with-xpath-is-slow","title":"Pattern: Element location with XPath is slow","text":""},{"location":"guides/wda-slowness/#symptoms_1","title":"Symptoms","text":"<p>You observe timeouts or unusual slowness (in comparison to other location strategies) of XPath locators.</p>"},{"location":"guides/wda-slowness/#causes_1","title":"Causes","text":"<p>The XPath location strategy is not natively supported by XCTest. It's a custom addition which is only available in WDA. Such locators have more features than others, but the price for it is the observed slowness as we cannot rely on native XCTest location APIs while looking for elements using XPath. In order to perform XPath lookup WDA needs to take a snapshot of the whole accessibility hierarchy with all element attributes resolved, which is a time-expensive operation. Location slowness might be observed if: - The current app hierarchy is too large (e.g. has hundreds of elements). This is a known   XCTest limitation. - The app is not idling/has active animations - It takes too long to determine each element's <code>visible</code> or <code>accessible</code> attributes, which are custom   ones and are not present in the original XCTest implementation</p>"},{"location":"guides/wda-slowness/#solutions_1","title":"Solutions","text":"<p>Depending on the actual cause there might be different applicable solutions. In general, the common advice would be to avoid XPath locators where possible and use locators that are natively supported by XCTest (like predicates or ids) and have better speed ranking. If the usage of an XPath locators is a single available option then you may try to apply the following suggestions: - Reduce the size of the app hierarchy using the snapshotMaxDepth setting.   This might not help if the destination element is deeply nested -   it won't be found if the value of this setting is lower than its nesting level. - Exclude the <code>visible</code> and/or <code>accessible</code> attributes from your query. These are   custom attributes exclusive to WDA and their calculation is expensive in comparison   to other native attributes. - Reduce various timeouts similarly to how it's advised in the   Application startup is slow pattern - Fix the source code of the application under test to reduce the amount of accessible elements   on a single screen - Fix the source code of the application under test to avoid running long operations   or animations on the main thread</p>"},{"location":"guides/wda-slowness/#pattern-element-location-with-non-xpath-is-slow","title":"Pattern: Element location with non-XPath is slow","text":""},{"location":"guides/wda-slowness/#symptoms_2","title":"Symptoms","text":"<p>You observe timeouts or unusual slowness with various non-XPath locators.</p>"},{"location":"guides/wda-slowness/#causes_2","title":"Causes","text":"<p>Location slowness might be observed if: - The current app hierarchy is too large (e.g. has hundreds of elements). This is a known   XCTest limitation. - The app is not idling/has active animations - It takes too long to determine each element's <code>visible</code> or <code>accessible</code> attributes, which are custom   ones and are not present in the original XCTest implementation (only applicable to predicate and class chain locators)</p>"},{"location":"guides/wda-slowness/#solutions_2","title":"Solutions","text":"<ul> <li>Reduce the size of the app hierarchy using the snapshotMaxDepth setting.   This might not help if the destination element is deeply nested -   it won't be found if the value of this setting is lower than its nesting level.</li> <li>Exclude the <code>visible</code> and/or <code>accessible</code> attributes from your query   (only applicable to predicate and class chain locators). These are   custom attributes exclusive to WDA and their calculation is expensive in comparison   to other native attributes.</li> <li>Reduce various timeouts similarly to how it's advised in the   Application startup is slow pattern</li> <li>Fix the source code of the application under test to reduce the amount of accessible elements   on a single screen</li> <li>Fix the source code of the application under test to avoid running long operations   or animations on the main thread</li> </ul>"},{"location":"guides/wda-slowness/#pattern-various-element-interactions-are-slow","title":"Pattern: Various element interactions are slow","text":""},{"location":"guides/wda-slowness/#symptoms_3","title":"Symptoms","text":"<p>You observe timeouts or unusual slowness while clicking elements or performing other actions on them.</p>"},{"location":"guides/wda-slowness/#causes_3","title":"Causes","text":"<ul> <li>The current app hierarchy is too large (e.g. has hundreds of elements). This is a known   XCTest limitation.</li> <li>The app is not idling/has active animations</li> </ul>"},{"location":"guides/wda-slowness/#solutions_3","title":"Solutions","text":"<ul> <li>Reduce various timeouts similarly to how it's advised in the   Application startup is slow pattern</li> <li>Fix the source code of the application under test to reduce the amount of accessible elements   on a single screen</li> <li>Fix the source code of the application under test to avoid running long operations   or animations on the main thread</li> </ul>"},{"location":"guides/wda-slowness/#pattern-page-source-retrieval-slow","title":"Pattern: Page source retrieval slow","text":""},{"location":"guides/wda-slowness/#symptoms_4","title":"Symptoms","text":"<p>You observe timeouts or unusual slowness while retrieving the page of the app.</p>"},{"location":"guides/wda-slowness/#causes_4","title":"Causes","text":"<p>In order to retrieve the page source WDA needs to take a snapshot of the whole accessibility hierarchy with all element attributes resolved, which is a time-expensive operation. Page source retrieval slowness might be observed if: - The current app hierarchy is too large (e.g. has hundreds of elements). This is a known   XCTest limitation. - The app is not idling/has active animations - It takes too long to determine each element's <code>visible</code> or <code>accessible</code> attributes, which are custom   ones and are not present in the original XCTest implementation</p>"},{"location":"guides/wda-slowness/#solutions_4","title":"Solutions","text":"<ul> <li>Reduce the size of the app hierarchy using the snapshotMaxDepth setting.   Note that you won't see nested elements in the source tree whose nesting level is greater than   the given size.</li> <li>Retrieve the page source without \"expensive\" attributes using the   mobile: source method with   the appropriate <code>excludedAttributes</code> argument value or add such attribute names into   the pageSourceExcludedAttributes setting.</li> <li>Retrieve the native XCTest page source using the   mobile: source method with   the <code>format=description</code> argument value. The returned page source is a poorly-formatted text,   although its retrieval should be fast (at least not slower than XCTest does that).</li> <li>Reduce various timeouts similarly to how it's advised in the   Application startup is slow pattern</li> <li>Fix the source code of the application under test to reduce the amount of accessible elements   on a single screen</li> <li>Fix the source code of the application under test to avoid running long operations   or animations on the main thread</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Info</p> <p>Before installing, make sure to check the System Requirements.</p> <p>Use the Appium extension CLI to add this driver to your Appium install:</p> <pre><code>appium driver install xcuitest\n</code></pre> <p>Alternatively, if you are running a Node.js project, you can include <code>appium-xcuitest-driver</code> as one of your dependencies.</p> <p>To activate the driver, simply launch the Appium server. By default, Appium will load all the installed drivers:</p> <pre><code>appium\n</code></pre> <p>You should see some output that includes a line like this:</p> <pre><code>[Appium] XCUITestDriver has been successfully loaded in 0.789s\n</code></pre> <p>Once you have installed the driver and confirmed it works, you should continue with device preparation.</p>"},{"location":"installation/requirements/","title":"System Requirements","text":""},{"location":"installation/requirements/#main-dependencies","title":"Main Dependencies","text":"<p>Like all Appium drivers, the XCUITest driver requires Appium to be installed. Refer to the Appium documentation for its requirements and prerequisites.</p> <p>Note</p> <p>Since version 4.0.0, the XCUITest driver has dropped support for Appium 1, and is only compatible with Appium 2.</p> <p>In addition to Appium system requirements, the XCUITest driver expects the following prerequisites:</p> <ul> <li>Only macOS is supported as the host platform</li> <li>Xcode and Xcode Developer Tools must be installed<ul> <li>The Appium team usually needs some time to add support for the most recent Xcode/iOS versions,   especially beta versions (check the Xcode/iOS version support section)</li> </ul> </li> <li>If automating real devices, additional manual configuration is required. Please check the   Real Device Configuration document for more details.</li> <li>Webviews must be debuggable in order to test them. If it is not possible to connect to your   webview(s) using Safari remote debugger,   then the driver will not be able to identify them.</li> </ul>"},{"location":"installation/requirements/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li><code>xcpretty</code> can be used to make Xcode output easier to   read. It can be installed by running <code>gem install xcpretty</code>.</li> <li><code>ffmpeg</code> is used for test video recording. It can be installed using   <code>brew</code>: <code>brew install ffmpeg</code></li> <li><code>idb</code>, <code>go-ios</code> and   <code>tidevice</code> can be used to improve device interactions</li> <li>WIX AppleSimulatorUtils can be used to improve some   Simulator interactions</li> <li><code>py-ios-device</code> is required in several <code>mobile:</code>   extensions, and can improve the general testing experience for real devices</li> </ul>"},{"location":"installation/requirements/#validate-dependencies-using-doctor","title":"Validate Dependencies Using Doctor","text":"<p>Since driver version 5.13.0, you can automate the validation for the most of the above requirements as well as various optional ones needed by driver extensions by running the <code>appium driver doctor xcuitest</code> command.</p>"},{"location":"installation/requirements/#xcodeios-version-support","title":"Xcode/iOS Version Support","text":"<p>The XCUITest driver functionality relies on the XCTest framework, and changes in the XCTest API are published in new Xcode and iOS versions. Many major and even some minor Xcode/iOS versions include breaking changes in this API, which require updating the driver code. Similarly, maintaining compatibility with older Xcode/iOS versions often requires workarounds, which are eventually dropped in order to simplify the code and use newer XCTest features.</p> <p>Generally, the driver aims to support at least two latest major Xcode and iOS versions.</p> <p>The following table lists the minimum driver versions required for specific Xcode/iOS versions:</p> Xcode/iOS version Minimum required XCUITest driver version Xcode 13 / iOS 15 3.48.0 Xcode 14-beta.3 / iOS 16 Beta 4.7.4 Xcode 14.3 / iOS 16.4 4.21.7 Xcode 15 / iOS 17 4.35.0 Xcode 16-beta.5 / iOS 18 7.24.15 <p>The following table lists the last driver versions that are compatible with older Xcode versions:</p> Xcode version Last supported XCUITest driver version Xcode 8 2.95.0 Xcode 9 2.133.1 Xcode 10-10.1 3.31.1 Xcode 10.2 3.56.3 Xcode 11 4.3.2 Xcode 12 4.27.2 <p>The following table lists the last driver versions that are compatible with older iOS versions:</p> iOS version Last supported XCUITest driver version iOS &lt; 15 4.27.2"},{"location":"preparation/","title":"Device Preparation","text":"<p>Before using the XCUITest driver with a simulator or real device, some device preparation is required.</p>"},{"location":"preparation/#automatic-adjustments","title":"Automatic Adjustments","text":"<p>The XCUITest driver automatically adjusts some device preferences for testing purposes.</p>"},{"location":"preparation/#keyboard-configuration","title":"Keyboard Configuration","text":"<p>Some keyboard preferences are changed in order to make test runs more stable. You can change some of them via the Settings API.</p> <ul> <li>Settings -&gt; General -&gt; Keyboard -&gt; Auto-Correction is turned OFF</li> <li>Settings -&gt; General -&gt; Keyboard -&gt; Predictive Text is turned OFF</li> <li>The keyboard tutorial is marked as complete</li> <li>(Simulator Only) Software keyboard is turned ON</li> </ul>"},{"location":"preparation/#manual-adjustments","title":"Manual Adjustments","text":"<p>Unfortunately, not all configuration can be done automatically, and some changes must be applied manually.</p>"},{"location":"preparation/#accessibility-settings","title":"Accessibility Settings","text":"<ul> <li>To avoid miscalculation of element coordinates, please make sure the zoom preference is turned off   in Settings -&gt; Accessibility -&gt; Zoom.</li> <li>Some accessibility settings may expose additional view elements. Appium does not modify these   settings automatically, since they could affect the way your application under test performs.   Please change them manually if needed. Note that the available accessibility content depends on   the OS version.<ul> <li>Settings -&gt; Accessibility -&gt; Spoken Content -&gt; Speak Selection</li> </ul> </li> </ul>"},{"location":"preparation/#webview-testing","title":"Webview Testing","text":"<ul> <li>Webviews on iOS/iPadOS 16.4 or above may require additional configuration from the application developer.   Specifically, the destination <code>WKWebView</code> and/or <code>JSContext</code> component must have the   <code>isInspectable</code>   property set to <code>true</code>. Please read the WebKit documentation page   for more details on this property.</li> <li>WebViews on iOS/iPadOS below version 16.4 must have the <code>get-task-allow</code> entitlement present as <code>true</code> in the application manifest.</li> <li>Starting from iOS/iPadOS 16.4, the Google Chrome browser also supports webview testing. This feature   requires Chrome version 115 or newer. Please read   the Chrome Developer documentation page   for details on the necessary configuration.</li> </ul>"},{"location":"preparation/#real-devices","title":"Real Devices","text":"<p>Some settings are enabled by default on simulators, but need to be manually changed for real devices. See the Real Device Configuration document for details.</p>"},{"location":"preparation/prov-profile-basic-auto/","title":"Basic Automatic Configuration","text":"<p>If you have a paid Apple Developer account, the easiest way to create the provisioning profile is to use the automatic configuration strategy. There are two ways to do this:</p> <ul> <li>Use the <code>xcodeOrgId</code> and <code>xcodeSigningId</code> capabilities:     <pre><code>{\n  \"appium:xcodeOrgId\": \"&lt;Team ID&gt;\",\n  \"appium:xcodeSigningId\": \"Apple Developer\",\n  \"appium:updatedWDABundleId\": \"&lt;bundle id your provisioning profile can accept&gt;\"\n}\n</code></pre></li> <li>Create a <code>.xcconfig</code> file somewhere on your file system and add the following to it:   <pre><code>DEVELOPMENT_TEAM = &lt;Team ID&gt;\nCODE_SIGN_IDENTITY = Apple Developer\n</code></pre>   Then use the <code>xcodeConfigFile</code> capability to specify the path to this file:   <pre><code>{\n  \"appium:xcodeConfigFile\": \"/path/to/xcconfig/file\"\n}\n</code></pre></li> </ul> <p>Note that these are mutually exclusive strategies; use either the <code>appium:xcodeConfigFile</code> capability or the combination of <code>appium:xcodeOrgId</code> and <code>appium:xcodeSigningId</code>.</p> <ul> <li><code>appium:xcodeOrgId</code> / <code>DEVELOPMENT_TEAM</code> is a unique 10-character string generated by Apple that is   assigned to your team.<ul> <li>To find this string (your Team ID), sign in to developer.apple.com/account,   and click Membership in the sidebar. Your Team ID appears in the Membership Information   section under the team name. You can also find your Team ID listed under the \"Organizational   Unit\" field in your iPhone Developer certificate in your keychain.</li> </ul> </li> <li><code>appium:xcodeSigningId</code> / <code>CODE_SIGN_IDENTITY</code> is usually either <code>Apple Developer</code> or <code>iPhone Developer</code>.</li> <li><code>appium:updatedWDABundleId</code> is the bundle id you would like to use for the built WebDriverAgent.<ul> <li>Appium replaces the existing placeholder of <code>com.facebook.WebDriverAgentRunner</code> in <code>WebDriverAgent.xcodeproj</code> with the given capability value.</li> <li><code>xcodebuild</code> adds <code>.xctrunner</code> automatically for XCTest package. Thus, the provisioning profile you're using should have the suffix explicitly, or it can be for bundle id which has <code>*</code>.<ul> <li>For instance, when the <code>appium:updatedWDABundleId</code> is <code>io.appium.WebDriverAgentRunner</code>, the given provisioning profile should be for <code>io.appium.WebDriverAgentRunner.xctrunner</code>, <code>io.appium.WebDriverAgentRunner.*</code> or <code>*</code>.</li> </ul> </li> <li><code>appium:allowProvisioningDeviceRegistration</code> lets XCUITest driver set <code>-allowProvisioningUpdates</code> and <code>-allowProvisioningDeviceRegistration</code> flags for the <code>xcodebuild</code> command. They will help register the target device to the matched provisioning profile if it still doesn't have the device. Please check <code>man xcodebuild</code> output for more details.</li> </ul> </li> </ul> <p>Once this configuration is done, you should specify your real device UDID with the <code>udid</code> desired capability, after which you should be able to start your test. Proceed with Validating the WDA Install for the next steps.</p>"},{"location":"preparation/prov-profile-basic-manual/","title":"Basic Manual Configuration","text":"<p>There are many cases in which the basic automatic configuration is not enough. Often this happens when the development account being used is a \"Free\" one, in which case it is not possible to create a wildcard provisioning profile.</p> <p>You can confirm this by opening the WDA project in Xcode. The issue will manifest as something like an error that Xcode failed to create provisioning profile:</p> <p></p> <p>The easiest way around this is to create a new project:</p> <p></p> <p>The type does not matter, other than it being \"iOS\". \"Single View Application\" is the easiest:</p> <p></p> <p>The important part is to use a unique \"Product Name\" and \"Organization Name\". Also, at this point, specify your \"Team\".</p> <p></p> <p>You can confirm that the provisioning profile was created by looking at the \"Project\" tab:</p> <p></p> <p>Or by going into your account preferences and seeing the provisioning profile:</p> <p></p> <p>At this point you have a valid provisioning profile. Make note of the bundle identifier you associated with it, and add that in the <code>updatedWDABundleId</code> capability for your tests. Then follow the initial instructions for automatic configuration.</p>"},{"location":"preparation/prov-profile-full-manual/","title":"Full Manual Configuration","text":"<p>The provisioning profile can also be manually associated with the WDA project. Keep in mind that this will have to be done each time WDA is updated (such as when updating the XCUITest driver), and is not recommended:</p> <ul> <li>In the terminal, open the directory where WDA is located. Run the following to set the project up:   <pre><code>mkdir -p Resources/WebDriverAgent.bundle\n</code></pre></li> <li>Open <code>WebDriverAgent.xcodeproj</code> in Xcode. This will likely open a screen with an empty editor.</li> <li>In the file browser on the left side, select the root WebDriverAgent project, which will open   it in the editor. Then, under Targets, select WebDriverAgentRunner (or   WebDriverAgentRunner_tvOS for tvOS), and switch to the Signing &amp; Capabilities tab.</li> <li> <p>Check Automatically manage signing, and then select your Team (you may need to first sign   into Xcode). The outcome should be similar to the following:</p> <p></p> </li> <li> <p>Xcode will likely fail to create a provisioning profile due to an invalid bundle identifier:</p> <p></p> </li> <li> <p>Change the Bundle Identifier from <code>com.facebook.WebDriverAgentRunner</code> to something that Xcode   will accept. You can also do this in the Build Settings tab:</p> <p></p> </li> </ul> <p>Note</p> <p>Versions of Xcode older than 11 have a different naming convention. This feature may not work for a package which is built by Xcode versions below 12.</p> <ul> <li> <p>If your bundle identifier is accepted, you should see that Xcode has created a provisioning   profile and all is well:</p> <p></p> </li> <li> <p>Finally, you can verify that everything works:</p> <ul> <li>Select the scheme as Product -&gt; Scheme -&gt; WebDriverAgentRunner</li> <li>Select your real device in Product -&gt; Destination</li> <li>Select Product -&gt; Test to build and install the WDA app</li> </ul> </li> </ul> <p>Proceed with Validating the WDA Install for the next steps!</p>"},{"location":"preparation/prov-profile-generic-manual/","title":"Manual Configuration for a Generic Device","text":"<p>It is possible to build <code>WebDriverAgentRunner</code> for a generic iOS/iPadOS/tvOS device, and install the generated <code>.app</code> package to a real device.</p> <pre><code># iOS/iPadOS\n$ xcodebuild clean build-for-testing -project WebDriverAgent.xcodeproj -derivedDataPath appium_wda_ios -scheme WebDriverAgentRunner -destination generic/platform=iOS CODE_SIGNING_ALLOWED=YES\n\n# tvOS\n$ xcodebuild clean build-for-testing -project WebDriverAgent.xcodeproj -derivedDataPath appium_wda_tvos -scheme WebDriverAgentRunner_tvOS -destination generic/platform=tvOS CODE_SIGNING_ALLOWED=YES\n</code></pre> <p>On successful completion the resulting package <code>WebDriverAgentRunner-Runner.app</code> should be located in the <code>Build/Products/Debug-iphoneos/</code> subfolder under WebDriverAgent sources root, or in the path provided as <code>derivedDataPath</code> argument.</p> <p>Note</p> <p>If the build fails, please make sure <code>WebDriverAgent.xcodeproj</code> has codesigning properties configured properly. For example, you may need to change the bundle id for the provisioning profile.</p> <p>The <code>WebDriverAgentRunner-Runner.app</code> can now be installed to any real device as allowed by the provisioning profile.</p> <p>You can install the package with 3rd party tools and manage it separately as explained in How To Set Up And Customize WebDriverAgent Server. Note that if the codesigning was not correct, the installation will fail.</p> <p>As a more advanced method, you can generate the package with <code>CODE_SIGNING_ALLOWED=NO</code> and do <code>codesign</code> by yourself. This would make the device management more flexible, but you would need to know about advanced codesign usage scenarios.</p> <p>Note</p> <p>The Appium team distributes generic builds with <code>CODE_SIGNING_ALLOWED=NO</code> at WebDriverAgent package releases. It is recommended to sign packages with a wildcard (<code>*</code>) provisioning profile, although such profiles require a paid Apple Developer account. For example, if you're preparing such a provisioning profile for <code>io.appium.WebDriverAgentRunner.xctrunner</code>, it will be for <code>io.appium.*</code>, <code>io.appium.WebDriverAgentRunner.*</code> or <code>*</code>. In case of a free account, you may need to update the bundle id before building the WebDriverAgent package to prepare a properly signed WebDriverAgent package by <code>xcodebuild</code>.</p>"},{"location":"preparation/real-device-config/","title":"Real Device Configuration","text":"<p>In order to communicate with the device under test, the XCUITest driver automatically installs the <code>WebDriverAgentRunner-Runner</code> (WDA) application on it, using Xcode's command-line utility <code>xcodebuild</code>. Unlike simulators, real devices have several security restrictions that need to be manually configured, before this can work:</p> <ul> <li>Devices need to be trusted. This can be done by opening Xcode and afterwards physically connecting   the device under test to the computer. The device should have a popup asking to trust the computer,   which you should accept.</li> <li>Devices using iOS/iPadOS 16 or above require enabling Developer Mode. Please read   Apple's documentation on Developer Mode   for more details. <code>devmodectl streaming</code> CLI on macOS 13+ and installing development signed apps   also help enabling the mode.</li> <li>After enabling Developer Mode (if applicable), please turn on Settings -&gt; Developer -&gt; Enable UI Automation</li> <li>Webviews will not be testable unless the Safari Inspector is enabled. Please turn it on in   Settings -&gt; Safari -&gt; Advanced -&gt; Web Inspector. Similarly, you may want to turn on the adjacent   option Settings -&gt; Safari -&gt; Advanced -&gt; Remote Automation.</li> </ul> <p>Finally, the WDA application must have a valid provisioning profile, which includes signing the app and linking it to a development team.</p>"},{"location":"preparation/real-device-config/#provisioning-profile-setup","title":"Provisioning Profile Setup","text":"<p>Generally, unless your device under test already has WDA installed, or you already have a prebuilt WDA on your local system, you will need an Apple ID to be able to sign the app.</p> <p>Once you have an Apple ID, there are several approaches you can take.</p> <ul> <li>Basic Automatic Configuration: the easiest approach, but   requires you to have a paid Apple Developer account</li> </ul> <p>If the automatic configuration did not work or does not apply to you, you will need to follow one of the manual configuration approaches. All of these involve the WDA Xcode project, so at the very least, you must know the local path to the project file - <code>WebDriverAgent.xcodeproj</code>:</p> <ul> <li>The WDA project is included in <code>appium-webdriveragent</code>, which is installed as a dependency of the   XCUITest driver. You can therefore find the project file in   <code>/path/to/xcuitest/driver/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj</code>.   By default, drivers are installed in <code>~/.appium</code>, so the project would be located at   <code>~/.appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj</code>.</li> <li>If using XCUITest driver v4.13.0 or newer, you can run the <code>appium driver run xcuitest open-wda</code> driver script to directly open <code>WebDriverAgent.xcodeproj</code> in Xcode.</li> </ul> <p>The WDA project file can now be used in the manual configuration approaches:</p> <ul> <li>Basic Manual Configuration: create a new project, then use   its provisioning profile and bundle ID</li> <li>Full Manual Configuration: associate the provisioning profile   directly with the WDA project</li> <li>Manual Configuration for a Generic Device: manually run   <code>xcodebuild</code> to build WDA, then manually install it</li> </ul>"},{"location":"preparation/real-device-config/#validating-the-wda-install","title":"Validating the WDA Install","text":"<p>Once you have configured the WDA project or have the app ready, you can try installing it. It is possible that you may encounter some errors:</p> <ul> <li> <p><code>xcodebuild exited with code '65' and signal 'null'</code></p> <p>This usually happens when attempting the automatic configuration, and it means that the necessary code signing is not set up correctly. Follow the steps in any of the manual configuration approaches to fix this.</p> </li> <li> <p><code>Unable to launch &lt;your-bundle-id&gt;.WebDriverAgentRunner-Runner because it has an invalid code   signature, inadequate entitlements or its profile has not been explicitly trusted by the user.</code></p> <p>This means that the developer is not trusted on the device. If you manually try to open the WDA app on the device, you will see a popup message:</p> <p></p> <p>To fix this, you need to open Settings -&gt; General -&gt; VPN &amp; Device Management on the device, then select your development team and trust it. Afterwards you should be able to open/launch the app. See Apple documentation for more information.</p> </li> <li> <p>For other issues, please refer to the Troubleshooting page</p> </li> </ul>"},{"location":"preparation/real-device-config/#create-an-offline-provisioning-profile","title":"Create an Offline Provisioning Profile","text":"<p>Since iOS 16, Apple requires a device to have a live internet connection for validating the code signing. It is possible to set up an offline enabled provisiong profile, which allows you to avoid the limitation. Please read this issue regarding detailed configuration steps.</p>"},{"location":"preparation/real-device-config/#tune-webdriveragent-to-improve-session-startup-performance","title":"Tune WebDriverAgent to improve session startup performance","text":"<p>Running <code>xcodebuild</code> every time takes much longer time to complete a session startup. XCUITest driver offers a few methods to improve the performance with, or without using <code>xcodebuild</code>.</p> <p>Some might require deeper understanding of iOS development environment, but they help to improve speedup your test execution speed.</p> <ul> <li>Run Preinstalled WebDriverAgentRunner</li> <li>Run Prebuilt WebDriverAgentRunner</li> <li>Attach to a Running WebDriverAgent</li> </ul>"},{"location":"reference/bidi/","title":"BiDi Protocol Support","text":"<p>XCUITest driver has partial support of the BiDi Protocol since version 7.26.0. Only events and commands mentioned below are supported. All other entities described in the spec throw not implemented errors.</p>"},{"location":"reference/bidi/#supported-events","title":"Supported Events","text":""},{"location":"reference/bidi/#logentryadded","title":"log.entryAdded","text":"<p>This event is emitted if the driver retrieves a new entry for any of the below log types. Logs collection might be disabled by the <code>appium:skipLogCapture</code> capability.</p>"},{"location":"reference/bidi/#crashlog","title":"crashlog","text":"<p>Events are emitted for both emulator and real devices. The latter only works if py-ios-device is installed on the server host. Each event contains a particular device crash report entry. Events are always emitted with the <code>NATIVE_APP</code> context.</p>"},{"location":"reference/bidi/#syslog","title":"syslog","text":"<p>Events are emitted for both emulator and real devices. Each event contains a single device system log line. Events are always emitted with the <code>NATIVE_APP</code> context.</p>"},{"location":"reference/bidi/#safariconsole","title":"safariConsole","text":"<p>Events are emitted for both emulator and real devices. Each event contains a single Safari console log line. Events are always emitted with the appropriate web context name from which they were generated. Events are only emitted if the <code>appium:showSafariConsoleLog</code> capability value is provided.</p>"},{"location":"reference/bidi/#safarinetwork","title":"safariNetwork","text":"<p>Events are emitted for both emulator and real devices. Each event contains a single Safari network log line. Events are always emitted with the appropriate web context name from which they were generated. Events are only emitted if the <code>appium:showSafariNetworkLog</code> capability value is provided.</p>"},{"location":"reference/bidi/#performance","title":"performance","text":"<p>Events are emitted for both emulator and real devices. Each event contains a single Safari performance log line. Events are always emitted with the appropriate web context name from which they were generated. Events are only emitted if the <code>appium:enablePerformanceLogging</code> capability value is provided.</p>"},{"location":"reference/bidi/#server","title":"server","text":"<p>Events are emitted for both emulator and real devices. Each event contains a single Appium server log line. Events are always emitted with the <code>NATIVE_APP</code> context. Events are only emitted if the <code>get_server_logs</code> server security feature is enabled.</p>"},{"location":"reference/bidi/#appiumxcuitestcontextupdate","title":"appium:xcuitest.contextUpdate","text":"<p>This event is emitted upon the context change, either explicit or implicit. The event is always emitted upon new session initialization. See the GitHub feature ticket for more details.</p>"},{"location":"reference/bidi/#cddl","title":"CDDL","text":"<pre><code>appium:xcuitest.contextUpdated = {\n  method: \"appium:xcuitest.contextUpdated\",\n  params: {\n    name: text,\n    type: \"NATIVE\" / \"WEB\",\n  },\n}\n</code></pre> <p>The event contains the following params:</p>"},{"location":"reference/bidi/#name","title":"name","text":"<p>Contains the actual name of the new context, for example <code>NATIVE_APP</code>.</p>"},{"location":"reference/bidi/#type","title":"type","text":"<p>Either <code>NATIVE</code> or <code>WEB</code> depending on which context is currently active in the driver session.</p>"},{"location":"reference/capabilities/","title":"Capabilities","text":"<p>This page lists various capabilities used and implemented by the XCUITest driver. To learn more about capabilities, refer to the Appium documentation.</p>"},{"location":"reference/capabilities/#general","title":"General","text":"Capability Description <code>platformName</code> Could be set to <code>ios</code>. Appium itself is not strict about this capability value if <code>automationName</code> is provided, so feel free to assign it to any supported platform name if this is needed, for example, to make Selenium Grid working. <code>browserName</code> The name of the browser to run the test on. If this capability is provided then the driver will try to start the test in Web context mode (Native mode is applied by default). Read Automating hybrid apps for more details. Usually equals to <code>safari</code>. <code>appium:automationName</code> Must always be set to <code>xcuitest</code>. Values of <code>automationName</code> are compared case-insensitively. <code>appium:deviceName</code> The name of the device under test. Consider setting <code>udid</code> for real devices and use this one for Simulator selection instead <code>appium:platformVersion</code> The platform version of an emulator or a real device. This capability is used for device autodetection if <code>udid</code> is not provided <code>appium:udid</code> UDID of the device to be tested. Could be retrieved from Xcode-&gt;Window-&gt;Devices and Simulators window. Always set this capability if you run parallel tests or use a real device to run your tests. <code>appium:noReset</code> Prevents the device to be reset before the session startup if set to <code>true</code>. This means that the application under test is not going to be terminated neither its data cleaned. <code>false</code> by default <code>appium:fullReset</code> Being set to <code>true</code> always enforces the application under test to be fully uninstalled before starting a new session. The application data might be cached on real devices under particular circumstances. Please check  troubleshooting for more details regarding obsolete application data cleanup on real devices. <code>false</code> by default <code>appium:printPageSourceOnFindFailure</code> Enforces the server to dump the actual XML page source into the log if any error happens. <code>false</code> by default. <code>appium:includeDeviceCapsToSessionInfo</code> Whether to include screen information as the result of Get Session Capabilities. It includes <code>pixelRatio</code>, <code>statBarHeight</code> and <code>viewportRect</code>, but it  causes an extra API call to WDA which may increase the response time like this issue. Defaults to <code>true</code>. This capability has no effect since driver version 5 <code>appium:resetLocationService</code> Whether reset the location service in the session deletion on real device. Defaults to <code>false</code>. <code>appium:customSSLCert</code> Adds a root SSL certificate to IOS Simulators and real devices. Real devices only work if py-ios-device tool is available on the server machine. The certificate content must be provided in PEM format, e.g. <code>-----BEGIN CERTIFICATE-----MIIFWjCCBEKg...-----END CERTIFICATE-----</code>"},{"location":"reference/capabilities/#app","title":"App","text":"Capability Description <code>appium:bundleId</code> Bundle identifier of the app under test, for example <code>com.mycompany.myapp</code>. The capability value is calculated automatically if <code>app</code> is provided. If neither <code>app</code> or <code>bundleId</code> capability is provided then XCUITest driver starts from the Home screen. <code>appium:initialDeeplinkUrl</code> A deeplink URL used to run either the application assigned to <code>appium:bundleId</code>, or the default application assigned to handle the particular deeplink protocol if <code>appium:bundleId</code> is not set. If provided in combination with <code>browserName=safari</code> then makes Safari to start with the given URL preloaded, which speeds up the session startup. The value of <code>appium:initialSafariUrl</code> capability is ignored in such case. An error is thrown on session init if either the value of the capability is not a valid URL, or XCTest was not able to associate it with any existing app, or the actual iOS version is below 16.4 <code>appium:app</code> Full path to the application to be tested (the app must be located on the same machine where the server is running). <code>.ipa</code> and <code>.app</code> application extensions are supported. Zipped <code>.app</code> bundles are supported as well. Could also be an URL to a remote location. If neither of the <code>app</code> or <code>bundleId</code> capabilities are provided then the driver starts from the Home screen and expects the test to know what to do next. Do not provide both <code>app</code> and <code>browserName</code> capabilities at once. <code>appium:enforceAppInstall</code> If set to <code>false</code> it will make xcuitest driver to verify whether the app version currently installed on the device under test is older than the one, which is provided as <code>appium:app</code> value. No app reinstall is going to happen if the candidate app has the same or older version number than the already installed copy of it. The version number used for comparison must be provided as CFBundleVersion Semantic Versioning-compatible value in the application's Info.plist. No validation is performed by default, e.g. the provided app is always (re)installed, which could potentially slow down your test suites. The application data might be cached on real devices under particular circumstances when <code>appium:enforceAppInstall</code> is <code>true</code> if the application under test remained on the device under a certain situation. Please check troubleshooting for more details regarding obsolete application data cleanup on real devices. Available since XCUITest driver 4.19.0. <code>appium:localizableStringsDir</code> Where to look for localizable strings in the application bundle. Defaults to <code>en.lproj</code> <code>appium:otherApps</code> App or list of apps (as a JSON array) to install prior to running tests. For example: <code>[\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"]</code> <code>appium:language</code> Language to set for iOS app, for example <code>fr</code>. Please read Language IDs to get more details about available values for this capability. If a test is executed on a Simulator then UI language is changed as well. You can also change Simulator language in runtime using mobile: configureLocalization extension. <code>appium:locale</code> Locale to set for iOS app, for example <code>fr_CA</code>. Please read Locale IDs to get more details about available values for this capability. If a test is executed on a Simulator then UI locale is changed as well. You can also change Simulator locale in runtime using mobile: configureLocalization extension. <code>appium:calendarFormat</code> Calendar format to set for iOS Simulator, for example <code>gregorian</code> or <code>persian</code>. Can only be set in conjunction with <code>appium:locale</code>. <code>appium:appPushTimeout</code> The timeout for an application install/upgrade in milliseconds. Works for real devices only. The default value is <code>480000</code> ms (8 minutes) Deprecated Not used since v7.15.0 <code>appium:appInstallStrategy</code> Select application installation strategy for real devices. The following strategies are supported:<code>serial</code> (default) - pushes app files to the device in a sequential order; this is the least performant strategy, although the most reliable<code>parallel</code> - pushes app files simultaneously; this is usually the the most performant strategy, but sometimes could not be very stable<code>ios-deploy</code> - tells the driver to use a third-party tool ios-deploy to install the app; obviously the tool must be installed separately first and must be present in PATH before it could be used. <code>appium:appTimeZone</code> Defines the custom time zone override for the application under test. You can use UTC, PST, EST, as well as place-based timezone names such as America/Los_Angeles. The application must be (re)launched for the capability to take effect. See the List of tz database time zones for more details. The same behavior could be achieved by providing a custom value to the TZ environment variable via the <code>appium:processArguments</code> capability"},{"location":"reference/capabilities/#webdriveragent","title":"WebDriverAgent","text":"Capability Description Example <code>appium:xcodeOrgId</code> Apple developer team identifier string. Must be used in conjunction with <code>xcodeSigningId</code> to take effect. <code>JWL241K123</code> <code>appium:xcodeSigningId</code> String representing a signing certificate. Must be used in conjunction with <code>xcodeOrgId</code>. This is usually just <code>Apple Development</code> or <code>iPhone Developer</code>, so the default (if not included) is <code>iPhone Developer</code> <code>Apple Developer</code> <code>appium:xcodeConfigFile</code> Full path to an optional Xcode configuration file that specifies the code signing identity and team for running the <code>WebDriverAgent</code> on the real device. <code>/path/to/myconfig.xcconfig</code> <code>appium:updatedWDABundleId</code> Bundle id to update WDA to before building and launching it. This bundle id must be associated with a valid provisioning profile. The default value is <code>com.facebook.WebDriverAgentRunner</code>. <code>io.appium.WebDriverAgentRunner</code> <code>appium:keychainPath</code> Full path to the private development key exported from the system keychain. Used in conjunction with <code>keychainPassword</code> when testing on real devices. <code>/path/to/MyPrivateKey.p12</code> <code>appium:keychainPassword</code> Password for unlocking keychain specified in <code>keychainPath</code>. <code>super awesome password</code> <code>appium:derivedDataPath</code> Overrides the folder that should be used for derived data when performing a source building with xCode. xCode stores all build and test artifacts under this file system root. Use this capability to set a unique path while running parallel tests or to have more control over built artifacts, for example if you'd like to use preinstalled or prebuilt WDA to reduce the session startup time. If the capability is not set then Xcode will store the derived data in the default root taken from preferences (usually a subfolder of <code>/Users/&lt;username&gt;/Library/Developer/Xcode/DerivedData</code>). <code>/tmp/wda-861563ec</code> <code>appium:webDriverAgentUrl</code> If provided, Appium will connect to an existing <code>WebDriverAgent</code> instance at this URL instead of starting a new one. <code>http://localhost:8100</code> <code>appium:useNewWDA</code> If <code>true</code>, forces uninstall of any existing <code>WebDriverAgent</code> app on device. Set it to <code>true</code> if you want to apply different startup options for <code>WebDriverAgent</code> for each session. Although, it is only guaranteed to work stable on Simulator. Real devices require <code>WebDriverAgent</code> client to run for as long as possible without reinstall/restart to avoid issues like https://github.com/facebook/WebDriverAgent/issues/507. The <code>false</code> value (the default behaviour since driver version 2.35.0) will try to detect currently running WDA listener executed by previous testing session(s) and reuse it if possible, which is highly recommended for real device testing and to speed up suites of multiple tests in general. A new WDA session will be triggered at the default URL (http://localhost:8100) if WDA is not listening and <code>webDriverAgentUrl</code> capability is not set. The negative/unset value of <code>useNewWDA</code> capability has no effect prior to xcuitest driver version 2.35.0. <code>true</code> <code>appium:wdaLaunchTimeout</code> Time, in ms, to wait for <code>WebDriverAgent</code> to be pingable. Defaults to 60000ms. <code>30000</code> <code>appium:wdaConnectionTimeout</code> Timeout, in ms, for waiting for a response from <code>WebDriverAgent</code>. Defaults to 240000ms. <code>1000</code> <code>appium:wdaStartupRetries</code> Number of times to try to build and launch <code>WebDriverAgent</code> onto the device by <code>xcodebuild</code>. It does not work for <code>webDriverAgentUrl</code> and <code>usePreinstalledWDA</code> capabilities since they handle <code>WebDriverAgent</code> without the <code>xcodebuild</code>. Defaults to 2 for simulators and 1 for real devices. <code>4</code> <code>appium:wdaStartupRetryInterval</code> Time, in ms, to wait between tries to build and launch <code>WebDriverAgent</code>. Defaults to 10000ms. <code>20000</code> <code>appium:wdaLocalPort</code> This value if specified, will be used to forward traffic from Mac host to real ios devices over USB. Default value is same as port number used by WDA on device. <code>8100</code> <code>appium:wdaRemotePort</code> This value if specified, will be used as the port number to start WDA HTTP server on the remote device. This is only relevant for real devices, because Simulator shares ports with its host. If <code>webDriverAgentUrl</code> is provided then it might be used to provide a hint for the remote port number if it differs from the default one. Default value is 8100. <code>8100</code> <code>appium:wdaBaseUrl</code> This value if specified, will be used as a prefix to build a custom <code>WebDriverAgent</code> url. It is different from <code>webDriverAgentUrl</code>, because if the latter is set then it expects <code>WebDriverAgent</code> to be already listening and skips the building phase. Defaults to <code>http://localhost</code> <code>http://192.168.1.100</code> <code>appium:showXcodeLog</code> Whether to display the output of the Xcode command used to run the tests. If this is <code>true</code>, there will be lots of extra logging at startup. Defaults to <code>false</code> <code>true</code> <code>appium:iosInstallPause</code> Time in milliseconds to pause between installing the application and starting <code>WebDriverAgent</code> on the device. Used particularly for larger applications. Defaults to <code>0</code> <code>8000</code> <code>appium:prebuildWDA</code> Enables prebuilding if the WebDriverAgentRunner application before running the WDA app. With this capability, XCUITest driver builds the WDA project first, then it handles the session as <code>appium:usePrebuiltWDA</code> <code>true</code> behavior. Defaults to <code>false</code>. <code>true</code> <code>appium:usePrebuiltWDA</code> Skips the build phase of running the WDA app. Building is then the responsibility of the user. <code>appium:derivedDataPath</code> let the session use the path as <code>-derivedDataPath</code> argument for <code>xcodebuild</code> command. Defaults to <code>false</code>. <code>true</code> <code>appium:prebuiltWDAPath</code> The full path to the prebuilt WebDriverAgent-Runner application package to be installed if <code>appium:usePreinstalledWDA</code> capability is enabled. The package's bundle identifier could be customized via <code>appium:updatedWDABundleId</code> capability. <code>/path/to/WebDriverAgentRunner-Runner.app</code> <code>appium:usePreinstalledWDA</code> Whether to launch a preinstalled WebDriverAgentRunner application using a custom XCTest API client (via <code>com.apple.instruments</code> service) instead of running <code>xcodebuild</code> for real devices or simulators via simctl tool (since driver version 7.4.0). If <code>appium:prebuiltWDAPath</code> is provided, XCUITest driver will install WebDriverAgent-Runner app from the given path before launching the application. The preinstalled WebDriverAgent package must be built by Xcode 12+. The default target bundle identifier is <code>com.facebook.WebDriverAgentRunner.xctrunner</code>, although it could be customized by providing the <code>appium:updatedWDABundleId</code> capability value (the <code>.xctrunner</code> suffix is added automatically). Please read Run Preinstalled WebDriverAgentRunner for more details. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:updatedWDABundleIdSuffix</code> Add suffix for the bundle id provided by the <code>appium:updatedWDABundleId</code> capability value in <code>appium:usePreinstalledWDA</code> capability usage since XCUITest driver v7.6.0. This is for an advanced usage that sets an arbitrary <code>CFBundleIdentifier</code> for prebuilt WebDriverAgent package to sign with the bundle identifier's certificate. For example, if you would need to sign a WebDriverAgent package with <code>io.appium.wda</code> bundle identifier's certificate, the WebDriverAgent's package must have the same bundle identifier as <code>CFBundleIdentifier</code>. Then, the WebDriverAgent package can be launched by <code>io.appium.wda</code>, which does not have <code>.xctrunner</code>. Then <code>\"appium:updatedWDABundleIdSuffix\": \"\"</code> (an empty string) helps.  Please read Run Preinstalled WebDriverAgentRunner for more details. Defaults to <code>.xctrunner</code>. <code>\"\"</code>, <code>\".customsuffix\"</code> <code>appium:shouldUseSingletonTestManager</code> Use default proxy for test management within <code>WebDriverAgent</code>. Setting this to <code>false</code> sometimes helps with socket hangup problems. Defaults to <code>true</code>. <code>false</code> <code>appium:waitForIdleTimeout</code> The amount of time in float seconds to wait until the application under test is idling. XCTest requires the app's main thread to be idling in order to execute any action on it, so WDA might not even start/freeze if the app under test is constantly hogging the main thread. The default value is <code>10</code> (seconds). Setting it to zero disables idling checks completely (not recommended) and has the same effect as setting <code>waitForQuiescence</code> to <code>false</code>. Available since Appium 1.20.0. <code>1</code> <code>appium:useXctestrunFile</code> Use Xctestrun file to launch WDA. It will search for such file in <code>bootstrapPath</code>. Expected name of file is <code>WebDriverAgentRunner_iphoneos&lt;sdkVersion&gt;-arm64.xctestrun</code> for real device and <code>WebDriverAgentRunner_iphonesimulator&lt;sdkVersion&gt;-x86_64.xctestrun</code> for simulator. One can do <code>build-for-testing</code> for <code>WebDriverAgent</code> project for simulator and real device and then you will see Product Folder like this and you need to copy content of this folder at <code>bootstrapPath</code> location. Since this capability expects that you have already built <code>WDA</code> project, it neither checks whether you have necessary dependencies to build <code>WDA</code> nor will it try to build project. Defaults to <code>false</code>. Tips: <code>Xcodebuild</code> builds for the target platform version. We'd recommend you to build with minimal OS version which you'd like to run as the original WDA module. e.g. If you build WDA for 12.2, the module cannot run on iOS 11.4 because of loading some module error on simulator. A module built with 11.4 can work on iOS 12.2. (This is xcodebuild's expected behaviour.) <code>true</code> Deprecated <code>appium:useSimpleBuildTest</code> Build with <code>build</code> and run test with <code>test</code> in xcodebuild for all Xcode version if this is <code>true</code>, or build with <code>build-for-testing</code> and run tests with <code>test-without-building</code> for over Xcode 8 if this is <code>false</code>. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:wdaEventloopIdleDelay</code> Delays the invocation of <code>-[XCUIApplicationProcess setEventLoopHasIdled:]</code> by the number of seconds specified with this capability. This can help quiescence apps that fail to do so for no obvious reason (and creating a session fails for that reason). This increases the time for session creation because <code>-[XCUIApplicationProcess setEventLoopHasIdled:]</code> is called multiple times. If you enable this capability start with at least <code>3</code> seconds and try increasing it, if creating the session still fails. Defaults to <code>0</code>. <code>5</code> <code>appium:processArguments</code> Process arguments and environment which will be sent to the <code>WebDriverAgent</code> server in a new session request. Please use mobile: launchApp to launch an application with process arguments in the middle of a session. <code>{ args: [\"a\", \"b\", \"c\"] , env: { \"a\": \"b\", \"c\": \"d\" } }</code> or <code>'{\"args\": [\"a\", \"b\", \"c\"], \"env\": { \"a\": \"b\", \"c\": \"d\" }}'</code> <code>appium:autoLaunch</code> When set to <code>false</code>, prevents the application under test from being launched automatically as a part of the new session startup process. The launch become the responsibility of the user. Defaults to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:allowProvisioningDeviceRegistration</code> Allow <code>xcodebuild</code> to register your destination device on the developer portal if necessary. Requires a developer account to have been added in Xcode's Accounts preference pane. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:resultBundlePath</code> Specify the path to the result bundle path as <code>xcodebuild</code> argument for <code>WebDriverAgent</code> build under a security flag (Please check Opt-in Features section below). <code>WebDriverAgent</code> process must start/stop every time to pick up changed value of this property. Specifying <code>useNewWDA</code> to <code>true</code> may help there. Please read <code>man xcodebuild</code> for more details. <code>/path/to/resultbundle</code> <code>appium:resultBundleVersion</code> Specify the version of result bundle as <code>xcodebuild</code> argument for <code>WebDriverAgent</code> build. The default value depends on your Xcode version. Please read <code>man xcodebuild</code> for more details. <code>/path/to/resultbundle</code> <code>appium:maxTypingFrequency</code> Maximum frequency of keystrokes for typing and clear. If your tests are failing because of typing errors, you may want to adjust this. Defaults to 60 keystrokes per minute. <code>30</code> <code>appium:simpleIsVisibleCheck</code> Use native methods for determining visibility of elements. In some cases this takes a long time. Setting this capability to <code>false</code> will cause the system to use the position and size of elements to make sure they are visible on the screen. This can, however, lead to false results in some situations. Defaults to <code>false</code>. <code>true</code>, <code>false</code> Deprecated <code>appium:waitForQuiescence</code> It allows to turn on/off waiting for application quiescence in <code>WebDriverAgent</code>, while performing queries. The default value is <code>true</code>. You can avoid this kind of issues if you turn it off. Consider using <code>waitForIdleTimeout</code> capability instead for this purpose since Appium 1.20.0 <code>false</code> <code>appium:mjpegServerPort</code> The port number on which WDA broadcasts screenshots stream encoded into MJPEG format from the device under test. It might be necessary to change this value if the default port is busy because of other tests running in parallel. Default value: <code>9100</code> <code>12000</code> <code>appium:mjpegScreenshotUrl</code> The URL of a service that provides realtime device screenshots in MJPEG format. If provided then the actual command to retrieve a screenshot will be requesting pictures from this service rather than directly from the server. Appium does not handle port forward etc to the URL. <code>http://&lt;ip address to the device&gt;:9100</code> <code>appium:screenshotQuality</code> Changes the initial quality of display screenshots. This capability affects the screenshoting speed and the actual quality of resulting screenshots. Before version 5.4.0 of WebDriverAgent possible values were: <code>0</code>, <code>1</code> (default), <code>2</code>, where <code>0</code> abbreviates lossless PNG, <code>1</code> is a high-quality JPEG and <code>2</code> is a low-quality JPEG. In the version 5.4.0 one more mode has been added (<code>3</code>), which is now the default one. It abbreviates lossless HEIC with fallback to PNG if the device does not support hardware-accelerated HEIC encoding. You can also change the value of screenshotQuality in settings. <code>2</code> <code>appium:autoAcceptAlerts</code> Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (location, contacts, photos). Default is <code>false</code>. <code>true</code> or <code>false</code> <code>appium:autoDismissAlerts</code> Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (location, contacts, photos). Default is <code>false</code>. <code>true</code> or <code>false</code> <code>appium:disableAutomaticScreenshots</code> Disable automatic screenshots taken by XCTest at every interaction. Default is up to <code>WebDriverAgent</code>'s config to decide, which currently defaults to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:shouldTerminateApp</code> Specify if the app should be terminated on session end. This capability only has an effect if an application identifier has been passed to the test session (either explicitly, by setting bundleId, or implicitly, by providing app). Default is <code>true</code> unless <code>noReset</code> capability is set to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:forceAppLaunch</code> Specify if the app should be forcefully restarted if it is already running on session startup. This capability only has an effect if an application identifier has been passed to the test session (either explicitly, by setting bundleId, or implicitly, by providing app). Default is <code>true</code> unless <code>noReset</code> capability is set to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:useNativeCachingStrategy</code> Set this capability to <code>false</code> in order to use the custom elements caching strategy. This might help to avoid stale element exception on property change. By default the native XCTest cache resolution is used (<code>true</code>) for all native locators (e.g. all, but xpath). Check the corresponding WebDriverAgent pull request for more details. <code>true</code> or <code>false</code> <code>appium:appLaunchStateTimeoutSec</code> Allows to set the timeout in float seconds for the application state change on the session startup in range (0, 240) exclusively. The default value for it in XCTest is 60 seconds, which means WDA would throw an exception if the application under test is not ready for accessibility interactions in 60s after its process has started. Important: The fact the application's user interface is visible does not necessarily mean it could be immediately interacted with by XCTest. The latter must ensure the app's main thread is also idling. Setting this capability to a lower value might help to avoid prolonged test startup with problematic apps taking too much time to be ready and fail fast. It is not advised to increase the capability value above 60 seconds, rather consider fixing the affected application itself. Too low values though may cause unexpected app startup failures. The capability does not have an effect if the app under test is not (re)started at the beginning of the session. <code>10.5</code>"},{"location":"reference/capabilities/#simulator","title":"Simulator","text":"Capability Description Example <code>appium:orientation</code> Start a test session in a certain orientation. Note, that Simulator may ignore this capability if the simulated device itself does not support orientation change in its current state. For example, iPhones only allow orientation change to landscape if an app that declares landscape support in its manifest is running. Thus changing the orientation from portrait to something else being on home screen won't have any effect. <code>LANDSCAPE</code> or <code>PORTRAIT</code> <code>appium:scaleFactor</code> Simulator scale factor. This is useful to have if the default resolution of simulated device is greater than the actual display resolution, so you can scale the simulator to see the whole device screen without scrolling. Must be a string containing a positive float value. <code>'2.0'</code> <code>appium:connectHardwareKeyboard</code> Set this option to <code>true</code> in order to enable hardware keyboard in Simulator. The preference works only when XCUITest driver launches a simulator instance with this value. It is set to <code>false</code> by default, because this helps to workaround some XCTest bugs. <code>connectHardwareKeyboard: true</code> makes <code>forceSimulatorSoftwareKeyboardPresence: false</code> if no explicit value is set for <code>forceSimulatorSoftwareKeyboardPresence</code> capability since Appium 1.22.0. <code>true</code> or <code>false</code> <code>appium:forceSimulatorSoftwareKeyboardPresence</code> Set this option to <code>true</code> in order to turn software keyboard on and turn hardware keyboard off in Simulator since Appium 1.22.0. This option helps to avoid <code>Keyboard is not present</code> error. It is set to <code>true</code> by default. XCUITest driver respects preset simulator software/hardware keyboard preference when this value is <code>false</code>, so <code>connectHardwareKeyboard: false</code> and <code>forceSimulatorSoftwareKeyboardPresence: false</code> means for XCUITest driver to keep the current Simulator keyboard preferences. This option has priority over <code>connectHardwareKeyboard</code>. <code>true</code> or <code>false</code> <code>appium:skipSyncUiDialogTranslation</code> Set this option to <code>true</code> in order to skip synchronizing UI dialogs translation. While this option might leave some system UI alerts untranslated, it helps to avoid unexpected side effects (see this issue for more details). It is set to <code>false</code> by default. <code>true</code> or <code>false</code> Deprecated <code>appium:calendarAccessAuthorized</code> This capability is obsolete. Please use <code>appium:permissions</code> one instead with the <code>calendar</code> key. <code>true</code> or <code>false</code> <code>appium:isHeadless</code> Set this capability to <code>true</code> if automated tests are running on Simulator and the device display is not needed to be visible. This only has an effect since Xcode9 and only for simulators. All running instances of Simulator UI are going to be automatically terminated if headless test is started. <code>false</code> is the default value. <code>true</code> <code>appium:simulatorWindowCenter</code> Allows to explicitly set the coordinates of Simulator window center for Xcode9+ SDK. This capability only has an effect if Simulator window has not been opened yet for the current session before it started. Must be a tuple containing floats or integers, with no spaces. <code>{-100.0,100.0}</code> <code>appium:simulatorStartupTimeout</code> Allows to change the default timeout for Simulator startup. By default this value is set to 120000ms (2 minutes), although the startup could take longer on a weak hardware or if other concurrent processes use much system resources during the boot up procedure. <code>300000</code> <code>appium:simulatorTracePointer</code> Whether to highlight pointer moves in the Simulator window. The Simulator UI client must be shut down before the session startup in order for this capability to be applied properly. <code>false</code> by default. <code>true</code> <code>appium:shutdownOtherSimulators</code> If this capability set to <code>true</code> and the current device under test is an iOS Simulator then Appium will try to shutdown all the other running Simulators before to start a new session. This might be useful while executing webview tests on different devices, since only one device can be debugged remotely at once due to an Apple bug. The capability only has an effect if <code>--relaxed-security</code> command line argument is provided to the server. Defaults to <code>false</code>. <code>true</code> <code>appium:enforceFreshSimulatorCreation</code> Creates a new simulator in session creation and deletes it in session deletion. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:keepKeyChains</code> Set the capability to <code>true</code> in order to preserve Simulator keychains folder after full reset. This feature has no effect on real devices. Defaults to <code>false</code> <code>true</code> <code>appium:keychainsExcludePatterns</code> This capability accepts comma-separated path patterns, which are going to be excluded from keychains restore while full reset is being performed on Simulator. It might be useful if you want to exclude only particular keychain types from being restored, like the applications keychain. This feature has no effect on real devices. <code>*keychain*.db*</code> <code>appium:reduceMotion</code> It allows to turn on/off reduce motion accessibility preference. Setting reduceMotion <code>on</code> helps to reduce flakiness during tests. Only on simulators <code>true</code> <code>appium:reduceTransparency</code> It allows you to turn on/off reduce transparency accessibility preference. Setting reduceTransparency <code>on</code> helps to reduce screenshot image distortion during tests. Only on simulators <code>true</code> <code>appium:autoFillPasswords</code> It allows you to turn on/off autofill passwords function when text field is foccused. Works only with iOS16.4+ simulators <code>true</code> <code>appium:permissions</code> Allows to set permissions for the specified application bundle on Simulator only. The capability value is expected to be a valid JSON string with <code>{\"&lt;bundleId1&gt;\": {\"&lt;serviceName1&gt;\": \"&lt;serviceStatus1&gt;\", ...}, ...}</code> format. Since Xcode SDK 11.4 Apple provides native APIs to interact with application settings. Check the output of <code>xcrun simctl privacy booted</code> command to get the list of available permission names. Use <code>yes</code>, <code>no</code> and <code>unset</code> as values in order to <code>grant</code>, <code>revoke</code> or <code>reset</code> the corresponding permission. Below Xcode SDK 11.4 it is required that <code>applesimutils</code> package is installed and available in PATH. The list of available service names and statuses can be found at https://github.com/wix/AppleSimulatorUtils. <code>{\"com.apple.mobilecal\": {\"calendar\": \"YES\"}}</code> <code>appium:iosSimulatorLogsPredicate</code> Set the <code>--predicate</code> flag in the ios simulator logs <code>'process != \"locationd\" AND process != \"DTServiceHub\"' AND process != \"mobileassetd\"</code> <code>appium:simulatorLogLevel</code> Allows to customize the minimum log level for logs collected from simulators. Possible values are <code>default</code> (the default value), <code>info</code> and <code>debug</code> <code>debug</code> <code>appium:simulatorPasteboardAutomaticSync</code> Handle the <code>-PasteboardAutomaticSync</code> flag when simulator process launches. It could improve launching simulator performance not to sync pasteboard with the system when this value is <code>off</code>. <code>on</code> forces the flag enabled. <code>system</code> does not provide the flag to the launching command. <code>on</code>, <code>off</code>, or <code>system</code> is available. They are case insensitive. Defaults to <code>off</code> <code>system</code> <code>appium:simulatorDevicesSetPath</code> This capability allows to set an alternative path to the simulator devices set in case you have multiple sets deployed on your local system. Such feature could be useful if you, for example, would like to save disk space on the main system volume. <code>/MyVolume/Devices</code> <code>appium:safariGlobalPreferences</code> Allows changing of Mobile Safari's preferences at the session startup. Check the documentation on arguments of mobile: updateSafariPreferences extension to get more details on the value type requirements. Only available on real devices since driver version 7.9.0. A new Safari instance must be launched upon test startup for this capability to take effect on real devices. <code>{ ShowTabBar: 0, WarnAboutFraudulentWebsites: 0 }</code>"},{"location":"reference/capabilities/#web-context","title":"Web Context","text":"Capability Description Example <code>pageLoadStrategy</code> One of the available page load strategies. See https://www.w3.org/TR/webdriver/#capabilities. Default <code>normal</code>. <code>eager</code> <code>appium:absoluteWebLocations</code> This capability will direct the <code>Get Element Location</code> command, when used within webviews, to return coordinates which are relative to the origin of the page, rather than relative to the current scroll offset. This capability has no effect outside of webviews. Default <code>false</code>. <code>true</code> <code>appium:safariGarbageCollect</code> Turns on/off Web Inspector garbage collection when executing scripts on Safari. Turning on may improve performance. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:includeSafariInWebviews</code> Add Safari web contexts to the list of contexts available during a native/webview app test. This is useful if the test opens Safari and needs to be able to interact with it. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariLogAllCommunication</code> Log all plists sent to and received from the Web Inspector, as plain text. For some operations this can be a lot of data, so it is recommended to be used only when necessary. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariLogAllCommunicationHexDump</code> Log all communication sent to and received from the Web Inspector, as raw hex dump and printable characters. This logging is done before any data manipulation, and so can elucidate some communication issues. Like <code>appium:safariLogAllCommunication</code>, this can produce a lot of data in some cases, so it is recommended to be used only when necessary. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariSocketChunkSize</code> The size, in bytes, of the data to be sent to the Web Inspector on iOS 11+ real devices. Some devices hang when sending large amounts of data to the Web Inspector, and breaking them into smaller parts can be helpful in those cases. Defaults to <code>16384</code> (also the maximum possible) <code>1000</code> <code>appium:safariWebInspectorMaxFrameLength</code> The maximum size in bytes of a single data frame for the Web Inspector. Too high values could introduce slowness and/or memory leaks. Too low values could introduce possible buffer overflow exceptions. Defaults to 20MB (<code>20*1024*1024</code>) <code>1024</code>, <code>100*1024*1024</code> <code>appium:additionalWebviewBundleIds</code> Array (or JSON array) of possible bundle identifiers for webviews. This is sometimes necessary if the Web Inspector is found to be returning a modified bundle identifier for the app. If the value includes <code>*</code>, XCUITest driver will return all available webview contexts on the device. Defaults to <code>[]</code> <code>[\"io.appium.modifiedId', 'ABCDEF\"]</code>, <code>[\"*\"]</code> <code>appium:webviewAtomWaitTimeout</code> The time to wait, in <code>ms</code>, for each atom execution timeout of webviews in MobileSafari or hybrid apps. Defaults to <code>120000</code>. If the value was zero or less, the timeout keeps the default value. <code>20000</code> <code>appium:safariIgnoreWebHostnames</code> Provide a list of hostnames (comma-separated) that the Safari automation tools should ignore. This is to provide a workaround to prevent a webkit bug where the web context is unintentionally changed to a 3rd party website and the test gets stuck. The common culprits are search engines (yahoo, bing, google) and <code>about:blank</code> <code>'www.yahoo.com, www.bing.com, www.google.com, about:blank'</code> <code>appium:nativeWebTap</code> Enable native, non-javascript-based taps being in web context mode. Defaults to <code>false</code>. Warning: sometimes the preciseness of native taps could be broken, because there is no reliable way to map web element coordinates to native ones. <code>true</code> <code>appium:nativeWebTapStrict</code> Enabling this capability would skip the additional logic that tries to match web view elements to native ones by using their textual descriptions. Depending on the actual web view content this algorithm might sometimes be not very reliable and will slow down each click as we anyway fallback to the usual coordinates transformation flow if it fails. It is advised to enable strict tap if you use mobile: calibrateWebToRealCoordinatesTranslation extension. Only applicable if <code>nativeWebTap</code> is enabled. <code>false</code> by default <code>true</code> <code>appium:safariInitialUrl</code> Initial safari url, default is a local welcome page. Setting it to an empty string will skip the initial navigation. <code>https://www.github.com</code> <code>appium:safariAllowPopups</code> Allow javascript to open new windows in Safari. Default keeps the current setting. Only available on real devices since driver version 7.9.0. A new Safari instance must be launched upon test startup on real devices for this capability to take effect. <code>true</code> or <code>false</code> <code>appium:safariIgnoreFraudWarning</code> Prevent Safari from showing a fraudulent website warning. Default keeps the current setting. Only available on real devices since driver version 7.9.0. A new Safari instance must be launched upon test startup on real devices for this capability to take effect. <code>true</code> or <code>false</code> <code>appium:safariOpenLinksInBackground</code> Whether Safari should allow links to open in new windows. Default keeps the current sim setting. Only available on real devices since driver version 7.9.0. A new Safari instance must be launched upon test startup on real devices for this capability to take effect. <code>true</code> or <code>false</code> <code>appium:webviewConnectRetries</code> The maximum number of retries before giving up on web view pages detection. Under the hood the remote debugger waits until webkit delivers the list of connected applications pages (<code>_rpc_applicationSentListing</code>). The delay between each retry is 500ms, which creates a minimum 10s of waiting time with the default retries amount of <code>20</code>. <code>10</code> <code>appium:webviewConnectTimeout</code> The time to wait, in <code>ms</code>, for the presence of webviews in MobileSafari or hybrid apps. Under the hood the remote debugger waits until webkit delivers the list of connected applications (<code>_rpc_reportConnectedApplicationList</code>) after sending a request for setting the connection key (<code>_rpc_reportIdentifier</code>). For better stability it might be necessary to increase this value if you run tests on Simulator and the host does not perform fast enough, for example in the continuous integration environment. <code>5000</code> ms by default. <code>10000</code> <code>appium:enableAsyncExecuteFromHttps</code> Capability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to <code>false</code> <code>true</code> or <code>false</code> <code>appium:fullContextList</code> Returns the detailed information on contexts for the Get Contexts command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:enablePerformanceLogging</code> Enable Safari's performance logging (default <code>false</code>) <code>true</code>, <code>false</code> <code>appium:autoWebview</code> Move directly into Webview context if available. Default <code>false</code> <code>true</code>, <code>false</code> <code>appium:skipTriggerInputEventAfterSendkeys</code> If this capability is set to <code>true</code>, then whenever you call the Send Keys method in a web context, the driver will not fire an additional <code>input</code> event on the input field used for the call. This event, turned on by default, helps in situations where JS frameworks (like React) do not respond to the input events that occur by default when the underlying Selenium atom is executed. Default <code>false</code> <code>true</code>, <code>false</code> <code>appium:sendKeyStrategy</code> If this capability is set to <code>oneByOne</code>, then whenever you call the Send Keys method in a web context, the driver will type each character the given string consists of in serial order to the element. This strategy helps in situations where JS frameworks (like React) update the view for each input. If <code>appium:skipTriggerInputEventAfterSendkeys</code> capability is <code>true</code>, it will affect every type. For example, when you are going to type the word <code>appium</code> with <code>oneByOne</code> strategy and <code>appium:skipTriggerInputEventAfterSendkeys</code> is enabled, the <code>appium:skipTriggerInputEventAfterSendkeys</code> option affects each typing action: <code>a</code>, <code>p</code>, <code>p</code>,<code>i</code>, <code>u</code> and <code>m</code>. Suppose any other value or no value has been provided to the <code>appium:sendKeyStrategy</code> capability. In that case, the driver types the given string in the destination input element. <code>appium</code> Send Keys input types <code>appium</code> if <code>oneByOne</code> was not set. <code>oneByOne</code> <code>appium:showSafariConsoleLog</code> Adds Safari JavaScript console events to Appium server logs (<code>true</code>) and writes fully serialized events into the <code>safariConsole</code> logs bucket (both <code>true</code> and <code>false</code>). If unset then no console events are being collected, which helps to save CPU and memory resources. Before the driver version 7.22 the default behavior was to always collect console logs if the capability is not set. Setting the value to <code>false</code> mimics that legacy behavior. <code>true</code>, <code>false</code> <code>appium:showSafariNetworkLog</code> Adds Safari network events to Appium server logs (<code>true</code>) and writes fully serialized events into the <code>safariNetwork</code> logs bucket (both <code>true</code> and <code>false</code>). If unset then no network events are being collected, which helps to save CPU and memory resources. Before the driver version 7.22 the default behavior was to always collect network logs if the capability is not set. Setting the value to <code>false</code> mimics that legacy behavior. <code>true</code>, <code>false</code>"},{"location":"reference/capabilities/#other","title":"Other","text":"Capability Description Example <code>appium:resetOnSessionStartOnly</code> Whether to perform reset on test session finish (<code>false</code>) or not (<code>true</code>). Keeping this variable set to <code>true</code> and Simulator running (the default behaviour since version 1.6.4) may significantly shorten the duration of test session initialization. Defaults to <code>true</code> <code>true</code> or <code>false</code> <code>appium:commandTimeouts</code> Custom timeout(s) in milliseconds for WDA backend commands execution. This might be useful if WDA backend freezes unexpectedly or requires too much time to fail and blocks automated test execution. The value is expected to be of type string and can either contain max milliseconds to wait for each WDA command to be executed before terminating the session forcefully or a valid JSON string, where keys are internal Appium command names (you can find these in logs, look for \"Executing command 'command_name'\" records) and values are timeouts in milliseconds. You can also set the 'default' key to assign the timeout for all other commands not explicitly enumerated as JSON keys. <code>'120000'</code>, <code>'{\"findElement\": 40000, \"findElements\": 40000, \"setValue\": 20000, \"default\": 120000}'</code> <code>appium:useJSONSource</code> Get JSON source from WDA and transform it to XML on the Appium server side. Defaults to <code>false</code>. <code>true</code> <code>appium:skipLogCapture</code> Skips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:launchWithIDB</code> Launch WebDriverAgentRunner with idb instead of xcodebuild. This could save a significant amout of time by skiping the xcodebuild process, although the idb might not be very reliable, especially with fresh Xcode SDKs. Check the idb repository for more details on possible compatibility issues. Defaults to <code>false</code> <code>true</code> or <code>false</code> <code>appium:showIOSLog</code> Whether to show any logs captured from a device in the appium logs. Default <code>false</code> <code>true</code> or <code>false</code> <code>appium:clearSystemFiles</code> Whether to clean temporary XCTest files (for example logs) when a testing session is closed. <code>false</code> by default <code>true</code> or <code>false</code> <code>appium:newCommandTimeout</code> How long (in seconds) the driver should wait for a new command from the client before assuming the client has stopped sending requests. After the timeout the session is going to be deleted. <code>60</code> seconds by default. Setting it to zero disables the timer. <code>100</code>"},{"location":"reference/commands/","title":"Commands","text":"<p>The driver comes with a set of many available commands, in addition to the commands included in the Appium base driver. Refer to the documentation of your Appium client for the exact syntax to call these commands.</p> <p>Please note that most of the driver-specific functionality is available using Execute Methods instead.</p> <p>Info</p> <p>Check the Appium base driver documentation for commands inherited by the XCUITest driver</p>"},{"location":"reference/commands/#getclipboard","title":"<code>getClipboard</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/device/get_clipboard</code></p> <p>Gets the content of the primary clipboard on the device under test. See Get/Set Clipboard for more details</p>"},{"location":"reference/commands/#arguments","title":"Arguments","text":"Name Type <code>contentType?</code> <code>any</code>"},{"location":"reference/commands/#returned-result","title":"Returned Result","text":"<p><code>string</code></p> <p>The actual clipboard content encoded into base64 string. An empty string is returned if the clipboard contains no data.</p>"},{"location":"reference/commands/#setclipboard","title":"<code>setClipboard</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/device/set_clipboard</code></p> <p>Sets the primary clipboard's content on the device under test. See Get/Set Clipboard for more details</p>"},{"location":"reference/commands/#arguments_1","title":"Arguments","text":"Name Type Description <code>content</code> <code>any</code> - <code>contentType?</code> <code>any</code> - <code>label?</code> <code>string</code> The content to be set as base64 encoded string."},{"location":"reference/commands/#returned-result_1","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#getgeolocation","title":"<code>getGeoLocation</code>","text":"<p><code>GET</code> <code>/session/:sessionId/location</code></p> <p>Returns the location of the device under test. Location Services for WebDriverAgent must be set to 'Always' to get the location data correctly.</p> <p>The 'latitude', 'longitude' and 'altitude' could be zero even if the Location Services are set to 'Always', because the device may need some time to update the location data.</p> <p>For iOS 17+ simulators and real devices, this method will return the result of <code>mobile: getSimulatedLocation</code> extension if the simulated location was previously set by <code>mobile: setSimulatedLocation</code>.</p> <p><code>Throws</code></p> <p>If the device under test returns an error message. i.e.: tvOS returns unsupported error</p>"},{"location":"reference/commands/#returned-result_2","title":"Returned Result","text":"<p><code>Promise</code>&lt;<code>altitude</code>: <code>number</code>, <code>latitude</code>: <code>number</code>, <code>longitude</code>: <code>number</code>&gt;</p>"},{"location":"reference/commands/#setgeolocation","title":"<code>setGeoLocation</code>","text":"<p><code>POST</code> <code>/session/:sessionId/location</code></p> <p>Set location of the device under test.</p> <p>For iOS 17+ real devices, this method will call the <code>mobile: setSimulatedLocation</code> extension.</p>"},{"location":"reference/commands/#arguments_2","title":"Arguments","text":"Name Type Description <code>location</code> <code>Location</code> An object with <code>latitude</code> and <code>longitude</code> values"},{"location":"reference/commands/#returned-result_3","title":"Returned Result","text":"<p><code>Promise</code>&lt;<code>altitude</code>: <code>number</code>, <code>latitude</code>: <code>number</code>, <code>longitude</code>: <code>number</code>&gt;</p>"},{"location":"reference/commands/#startrecordingscreen","title":"<code>startRecordingScreen</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/start_recording_screen</code></p> <p>Start recording the device screen. This functionality is available in the iOS Simulator since Xcode 9, and in real devices since iOS 11.</p> <p>Screen activity is recorded to an MPEG-4 file. Note that audio is not recorded with the video file. If the screen recording has already been started, this command will force stop it and start a new recording. The previously recorded video file will also be deleted.</p> <p>Info</p> <p>This command requires the <code>ffmpeg</code> utility to be installed (<code>brew install ffmpeg</code>)</p> <p><code>Throws</code></p> <p>If the screen recording has failed to start.</p>"},{"location":"reference/commands/#arguments_3","title":"Arguments","text":"Name Type <code>options?</code> <code>any</code>"},{"location":"reference/commands/#returned-result_4","title":"Returned Result","text":"<p><code>string</code></p> <p>Base64-encoded content of the recorded media file if any screen recording is currently running, or an empty string.</p>"},{"location":"reference/commands/#stoprecordingscreen","title":"<code>stopRecordingScreen</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/stop_recording_screen</code></p> <p>Stop an ongoing screen recording and return the video. This functionality is available in the iOS Simulator since Xcode 9, and in real devices since iOS 11.</p> <p>If no screen recording process is running, the command will attempt to retrieve the most recently recorded file. If no previously recorded file is found, the method will return an empty string.</p> <p><code>Throws</code></p> <p>If there was an error while getting the name of a media file, or the file content cannot be uploaded to the remote location.</p>"},{"location":"reference/commands/#arguments_4","title":"Arguments","text":"Name Type <code>options?</code> <code>any</code>"},{"location":"reference/commands/#returned-result_5","title":"Returned Result","text":"<p><code>null</code> | <code>string</code></p> <p>Base64-encoded content of the recorded media file if <code>remotePath</code> parameter is empty or null, or an empty string.</p>"},{"location":"reference/commands/#getsize","title":"<code>getSize</code>","text":"<p><code>GET</code> <code>/session/:sessionId/element/:elementId/size</code></p> <p>Get the size of an element</p>"},{"location":"reference/commands/#returned-result_6","title":"Returned Result","text":"<p><code>Size</code></p> <p>The positions of the element</p>"},{"location":"reference/commands/#submit","title":"<code>submit</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/submit</code></p> <p>Submit the form an element is in</p>"},{"location":"reference/commands/#returned-result_7","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#background","title":"<code>background</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: backgroundApp</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/app/background</code></p> <p>Close app (simulate device home button). It is possible to restore the app after the timeout or keep it minimized based on the parameter value.</p>"},{"location":"reference/commands/#arguments_5","title":"Arguments","text":"Name Type <code>seconds</code> <code>any</code>"},{"location":"reference/commands/#returned-result_8","title":"Returned Result","text":"<p><code>unknown</code></p>"},{"location":"reference/commands/#queryappstate","title":"<code>queryAppState</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: queryAppState</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/device/app_state</code></p> <p>Get the running state of an app</p>"},{"location":"reference/commands/#returned-result_9","title":"Returned Result","text":"<p><code>AppState</code></p> <p>A number representing the state. <code>0</code> means not installed, <code>1</code> means not running, <code>2</code> means running in background but suspended, <code>3</code> means running in the background, and <code>4</code> means running in the foreground</p>"},{"location":"reference/commands/#islocked","title":"<code>isLocked</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: isLocked</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/device/is_locked</code></p> <p>Determine whether the device is locked</p>"},{"location":"reference/commands/#returned-result_10","title":"Returned Result","text":"<p><code>boolean</code></p> <p><code>true</code> if the device is locked, <code>false</code> otherwise</p>"},{"location":"reference/commands/#lock","title":"<code>lock</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: lock</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/device/lock</code></p> <p>Lock the device (and optionally unlock the device after a certain amount of time)</p> <p><code>Default Value</code></p> <p>0</p>"},{"location":"reference/commands/#arguments_6","title":"Arguments","text":"Name Type <code>seconds?</code> <code>any</code>"},{"location":"reference/commands/#returned-result_11","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#unlock","title":"<code>unlock</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: unlock</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/device/unlock</code></p> <p>Unlock the device</p>"},{"location":"reference/commands/#returned-result_12","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#mobileshake","title":"<code>mobileShake</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: shake</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/device/shake</code></p> <p>Shake the device</p>"},{"location":"reference/commands/#returned-result_13","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#getstrings","title":"<code>getStrings</code>","text":"<p>Note</p> <p>We recommend using the <code>mobile: getAppStrings</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/app/strings</code></p> <p>Return the language-specific strings for an app</p>"},{"location":"reference/commands/#arguments_7","title":"Arguments","text":"Name Type Default value Description <code>language?</code> <code>any</code> <code>undefined</code> - <code>stringFile?</code> <code>string</code> <code>null</code> The language abbreviation to fetch app strings mapping for. If no language is provided then strings for the 'en language would be returned"},{"location":"reference/commands/#returned-result_14","title":"Returned Result","text":"<p><code>StringRecord</code>&lt;<code>string</code>&gt;</p> <p>A record of localized keys to localized text</p>"},{"location":"reference/commands/#setvalueimmediate","title":"<code>setValueImmediate</code>","text":"<p>Deprecated</p> <p>This method is deprecated</p> <p><code>POST</code> <code>/session/:sessionId/appium/element/:elementId/value</code></p>"},{"location":"reference/commands/#arguments_8","title":"Arguments","text":"Name Type <code>text</code> <code>any</code>"},{"location":"reference/commands/#returned-result_15","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#keys","title":"<code>keys</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use <code>setValue</code> instead</p> <p><code>POST</code> <code>/session/:sessionId/keys</code></p> <p>Send keys to the app</p>"},{"location":"reference/commands/#arguments_9","title":"Arguments","text":"Name Type <code>value</code> <code>any</code>"},{"location":"reference/commands/#returned-result_16","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#receiveasyncresponse","title":"<code>receiveAsyncResponse</code>","text":"<p>Deprecated</p> <p>This method is deprecated</p> <p><code>POST</code> <code>/session/:sessionId/appium/receive_async_response</code></p> <p>Collect the response of an async script execution</p>"},{"location":"reference/commands/#arguments_10","title":"Arguments","text":"Name Type <code>response</code> <code>any</code>"},{"location":"reference/commands/#returned-result_17","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#toggleenrolltouchid","title":"<code>toggleEnrollTouchId</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use the <code>mobile: enrollBiometric</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment</code></p> <p>Toggle whether the device is enrolled in the touch ID program</p>"},{"location":"reference/commands/#arguments_11","title":"Arguments","text":"Name Type Default value <code>enabled?</code> <code>any</code> <code>true</code>"},{"location":"reference/commands/#returned-result_18","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#touchid","title":"<code>touchId</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use the <code>mobile: sendBiometricMatch</code> extension instead</p> <p><code>POST</code> <code>/session/:sessionId/appium/simulator/touch_id</code></p> <p>Trigger a touch/fingerprint match or match failure</p>"},{"location":"reference/commands/#arguments_12","title":"Arguments","text":"Name Type Default value <code>match</code> <code>any</code> <code>true</code>"},{"location":"reference/commands/#returned-result_19","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#asyncscripttimeout","title":"<code>asyncScriptTimeout</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use <code>scriptTimeoutW3C</code> instead</p> <p><code>POST</code> <code>/session/:sessionId/timeouts/async_script</code></p> <p>Alias for XCUITestDriver.scriptTimeoutW3C.</p>"},{"location":"reference/commands/#arguments_13","title":"Arguments","text":"Name Type <code>ms</code> <code>any</code>"},{"location":"reference/commands/#returned-result_20","title":"Returned Result","text":"<p><code>null</code></p>"},{"location":"reference/commands/#getlocation","title":"<code>getLocation</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use <code>getElementRect</code> instead</p> <p><code>GET</code> <code>/session/:sessionId/element/:elementId/location</code></p> <p>Get the position of an element on screen</p>"},{"location":"reference/commands/#returned-result_21","title":"Returned Result","text":"<p><code>Position</code></p> <p>The position of the element</p>"},{"location":"reference/commands/#getlocationinview","title":"<code>getLocationInView</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use <code>getElementRect</code> instead</p> <p><code>GET</code> <code>/session/:sessionId/element/:elementId/location_in_view</code></p> <p>Alias for <code>getLocation</code></p>"},{"location":"reference/commands/#returned-result_22","title":"Returned Result","text":"<p><code>Position</code></p> <p>The position of the element</p>"},{"location":"reference/commands/#getwindowsize","title":"<code>getWindowSize</code>","text":"<p>Deprecated</p> <p>This method is deprecated. Please use <code>getElementRect</code> instead</p> <p><code>GET</code> <code>/session/:sessionId/window/:windowhandle/size</code></p> <p>Get the window size</p>"},{"location":"reference/commands/#returned-result_23","title":"Returned Result","text":"<p><code>any</code></p>"},{"location":"reference/element-attributes/","title":"Element Attributes","text":"<p>The XCUITest driver supports the following element attributes:</p> Name Description Example <code>name</code> Could contain either element's identifier or its label, depending on which one is available first. Could also be <code>null</code>. It is recommended to prefer the usage of accessibilityIdentifier over accessibilityLabel for automation purposes, since the <code>identifier</code> property is supposed to stay constant under different locales and does not affect accessibility services such as VoiceOver. In applications written using ReactNative framework this attribute reflects the value of the <code>testID</code> property. <code>hello</code> <code>label</code> Element's label value. Could be <code>null</code>. Since XCUITest driver 4.7.3 (WebDriverAgent 4.8.0), the behavior of this value was better aligned with XCTest, so it could include line breaks (<code>\\n</code>). Before this version, line breaks were replaced by spaces. <code>hello</code>, <code>hello\\nworld</code> <code>type</code> Element's type name <code>XCUIElementTypeButton</code> <code>visible</code> Whether the element is visible. This value is not available in the \"vanilla\" XCTest and is read directly from the accessibility layer <code>false</code> <code>focused</code> Whether the element is focused. Before driver version 4.25.4, this was only available for tvOS. <code>true</code> <code>accessible</code> Whether the element is accessible. This value is not available in the \"vanilla\" XCTest and is read directly from the accessibility layer <code>true</code> <code>enabled</code> Whether the element is enabled. <code>false</code> <code>selected</code> Whether the element is selected <code>false</code> <code>index</code> Element's index in the hierarchy relatively to its parent. Only available since Appium 1.20.0. Indexing starts from <code>0</code>. <code>2</code> <code>rect</code> Element's rectangle. The actual data of this attribute is based on element's frame. <code>{'x': 0, 'y': 0, 'width': 100, 'height': 100}</code> <code>value</code> Element's value. This is a complex attribute, whose calculation algorithm depends on the actual element type. Check WebDriverAgent sources to know more about how it is compiled (method <code>- (NSString *)wdValue</code>). Could be <code>null</code> <code>hello</code> <code>hittable</code> Whether the element is hittable. This attribute is not included into the XML page source due to performance reasons, although you can use it in element locators or fetch its value using getAttribute API. Available since driver version 4.35. <code>true</code>"},{"location":"reference/execute-methods/","title":"Execute Methods","text":"<p>In addition to standard W3C APIs, the driver provides many custom command extensions for executing platform-specific scenarios. Use the following examples in order to invoke them from your client code:</p> JavaJS (WebdriverIO)PythonRubyC# <pre><code>var result = driver.executeScript(\"mobile: &lt;methodName&gt;\", Map.ofEntries(\n    Map.entry(\"arg1\", \"value1\"),\n    Map.entry(\"arg2\", \"value2\")\n    // you may add more pairs if needed or skip providing the map completely\n    // if all arguments are defined as optional\n));\n</code></pre> <pre><code>const result = await driver.executeScript('mobile: &lt;methodName&gt;', [{\n    arg1: \"value1\",\n    arg2: \"value2\",\n}]);\n</code></pre> <pre><code>result = driver.execute_script('mobile: &lt;methodName&gt;', {\n    'arg1': 'value1',\n    'arg2': 'value2',\n})\n</code></pre> <pre><code>result = @driver.execute_script 'mobile: &lt;methodName&gt;', {\n    arg1: 'value1',\n    arg2: 'value2',\n}\n</code></pre> <pre><code>object result = driver.ExecuteScript(\"mobile: &lt;methodName&gt;\", new Dictionary&lt;string, object&gt;() {\n    {\"arg1\", \"value1\"},\n    {\"arg2\", \"value2\"}\n}));\n</code></pre>"},{"location":"reference/execute-methods/#mobile-selectpickerwheelvalue","title":"mobile: selectPickerWheelValue","text":"<p>Performs selection of the next or previous picker wheel value. This might be useful if these values are populated dynamically, so you don't know which one to select or value selection suing <code>sendKeys</code> API does not work because of an XCTest bug. The method throws an exception if it fails to change the current picker value.</p>"},{"location":"reference/execute-methods/#arguments","title":"Arguments","text":"Name Type Required Description Example elementId (<code>element</code> before version 1.22) string yes PickerWheel's internal element id (as hexadecimal hash string) to perform value selection on. The element must be of type XCUIElementTypePickerWheel abcdef12-1111-2222-3333-444444 order string yes Either <code>next</code> to select the value next to the current one from the target picker wheel or <code>previous</code> to select the previous one. next offset number no The value in range [0.01, 0.5]. It defines how far from picker wheel's center the click should happen. The actual distance is calculated by multiplying this value to the actual picker wheel height. Too small offset value may not change the picker wheel value and too high value may cause the wheel to switch two or more values at once. Usually the optimal value is located in range [0.15, 0.3]. <code>0.2</code> by default 0.15 value string no If provided WDA will try to automatically scroll in the given direction until the actual picker value reaches the expected one or the amount of scrolling attempts is exceeded. myvalue maxAttempts number no The maximum number of scrolling attempts to reach <code>value</code> before an error will be thrown. Only makes sense in combination with <code>value</code>. 25 by default 50"},{"location":"reference/execute-methods/#mobile-sendmemorywarning","title":"mobile: sendMemoryWarning","text":"<p>Simulates sending of Low Memory warning to the target application. It might be useful to verify the didReceiveMemoryWarning API in the application under test. This feature only works on real devices running iOS 17+ with Xcode 15+ SDK. The target application must be running while this API is called.</p>"},{"location":"reference/execute-methods/#arguments_1","title":"Arguments","text":"Name Type Required Description Example bundleId string yes Bundle identifier of the app to simulate the warning for com.great.app"},{"location":"reference/execute-methods/#mobile-alert","title":"mobile: alert","text":"<p>Tries to apply the given action to the currently visible alert.</p>"},{"location":"reference/execute-methods/#arguments_2","title":"Arguments","text":"Name Type Required Description Example action string yes The actual action to apply. Could be either: <code>accept</code>, <code>dismiss</code> or <code>getButtons</code> accept buttonLabel string no The name of the button used to perform the chosen alert action. Only makes sense if the action is <code>accept</code> or <code>dismiss</code> Accept"},{"location":"reference/execute-methods/#returned-result","title":"Returned Result","text":"<p>The list of alert button names if the selected action is <code>getButtons</code></p>"},{"location":"reference/execute-methods/#mobile-setpasteboard","title":"mobile: setPasteboard","text":"<p>Sets the Simulator's pasteboard content to the given value. Does not work for real devices.</p>"},{"location":"reference/execute-methods/#arguments_3","title":"Arguments","text":"Name Type Required Description Example content string yes The content to set hello encoding string no The content's encoding. <code>utf8</code> by default ascii"},{"location":"reference/execute-methods/#mobile-getpasteboard","title":"mobile: getPasteboard","text":"<p>Gets the Simulator's pasteboard content. Does not work for real devices.</p>"},{"location":"reference/execute-methods/#arguments_4","title":"Arguments","text":"Name Type Required Description Example encoding string no The expected encoding of the returned string. <code>utf8</code> by default ascii"},{"location":"reference/execute-methods/#returned-result_1","title":"Returned Result","text":"<p>The pasteboard content string.</p>"},{"location":"reference/execute-methods/#mobile-source","title":"mobile: source","text":"<p>Allows to retrieve the source tree of the current page in different representation formats.</p>"},{"location":"reference/execute-methods/#arguments_5","title":"Arguments","text":"Name Type Required Description Example format string yes One of possible page tree source representation formats: <code>xml</code> (the default value), <code>description</code> and <code>json</code>. The <code>xml</code> format generates the output similar to what <code>getPageSource</code> standard API returns. <code>description</code> representation is how XCTest \"sees\" the page internally and is the same string as debugDescription API would return for the root application element. This source representation format is useful for debugging purposes and is the fastest one to fetch. <code>json</code> representation is similar to <code>xml</code>, but the tree hierarchy there is represented as JSON elements tree rather than as XML nodes. description excludedAttributes string no One or more comma-separated attribute names to be excluded from the XML output, thus only makes sense if <code>format</code> is set to <code>xml</code>. It might be sometimes helpful to exclude, for example, the <code>visible</code> attribute, to significantly speed-up page source retrieval. visible,accessible"},{"location":"reference/execute-methods/#returned-result_2","title":"Returned Result","text":"<p>The page source tree formatted according to the given format argument.</p>"},{"location":"reference/execute-methods/#mobile-getcontexts","title":"mobile: getContexts","text":"<p>Retrieves the list of available contexts including the extended context information, like urls and page names. This is different from the standard <code>getContexts</code> API, because the latter only has web view names without any additional information. In situation where multiple web views are available at once the client code would have to connect to each of them in order to detect the one, which needs to be interacted with. Although, this extra effort is not needed with the information provided by this extension.</p>"},{"location":"reference/execute-methods/#arguments_6","title":"Arguments","text":"Name Type Required Description Example waitForWebviewMs number no Tells Appium for how long (in milliseconds) to wait for web view(s) to appear. <code>5000</code>ms by default 10000"},{"location":"reference/execute-methods/#returned-result_3","title":"Returned Result","text":"<p>The list of available context objects along with their properties:</p> <ul> <li>id: The identifier of the context. The native context will be 'NATIVE_APP' and the webviews will be 'WEBVIEW_xxx'</li> <li>title: The title associated with the webview content. Could be <code>null</code></li> <li>url: The url associated with the webview content. Could be <code>null</code></li> </ul>"},{"location":"reference/execute-methods/#mobile-installapp","title":"mobile: installApp","text":"<p>Installs the given application to the device under test. Make sure the application is built for a correct architecture and is signed with a proper developer signature (for real devices) prior to install it.</p>"},{"location":"reference/execute-methods/#arguments_7","title":"Arguments","text":"Name Type Required Description Example app string yes See the description of the <code>appium:app</code> capability /path/to/my.app timeoutMs number no The maximum time to wait until app install is finished in milliseconds on real devices. If not provided then the value of <code>appium:appPushTimeout</code> capability is used. If the capability is not provided then equals to 240000ms 500000 Deprecated Not Used since v7.15.0 strategy string no One of possible app installation strategies on real devices. This argument is ignored on simulators. If not provided then the value of <code>appium:appInstallStrategy</code> is used. If the latter is also not provided then <code>serial</code> is used. See the description of <code>appium:appInstallStrategy</code> capability for more details on available values. parallel checkVersion bool no If set to <code>true</code>, it will make xcuitest driver to verify whether the app version currently installed on the device under test is older than the one, which is provided as <code>app</code> value. No app install is going to happen if the candidate app has the same or older version number than the already installed copy of it. The version number used for comparison must be provided as CFBundleVersion Semantic Versioning-compatible value in the application's <code>Info.plist</code>. No validation is performed and the <code>app</code> is installed if <code>checkVersion</code> was not provided or <code>false</code>, which is default behavior. true"},{"location":"reference/execute-methods/#mobile-isappinstalled","title":"mobile: isAppInstalled","text":"<p>Checks whether the given application is installed on the device under test. Offloaded applications are handled as not installed.</p>"},{"location":"reference/execute-methods/#arguments_8","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be checked com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_4","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-removeapp","title":"mobile: removeApp","text":"<p>Removes the given application from the device under test. Offloaded application can also be removed.</p> <p>For real devices, please also check how to explicitly clear the application local data.</p>"},{"location":"reference/execute-methods/#arguments_9","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be removed com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_5","title":"Returned Result","text":"<p>Either <code>true</code> if the application was successfully uninstalled, otherwise <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-launchapp","title":"mobile: launchApp","text":"<p>Executes the given application on the device under test. If the application is already running then it would be activated. If the application is not installed or cannot be launched then an exception is thrown.</p> <p>It accepts <code>arguments</code> and <code>environment</code> to start an application with them.</p> <p>As an usage example, <code>arguments</code> allow you to enforce language and locale for the application to start with. XCTest lets you to start an application process by specifying Language and Locale IDs via process <code>arguments</code> with <code>-AppleLanguages</code> and <code>-AppleLocale</code>. Check the Testing Specific Languages and Regions part of the Testing Your Internationalized App for more details. Make sure to terminate the application before launching it with <code>arguments</code> if it is already running.</p> JavaJS (WebdriverIO)PythonRubyC# <pre><code>driver.executeScript(\"mobile:launchApp\", Map.of(\n    \"bundleId\", \"com.apple.Preferences\",\n    \"arguments\", Arrays.asList(\"-AppleLanguages\", \"(ja)\", \"-AppleLocale\", \"ja_JP\")\n));\n</code></pre> <pre><code>await driver.executeScript('mobile:launchApp', [{\n  bundleId: 'com.apple.Preferences',\n  arguments: ['-AppleLanguages', '(ja)', '-AppleLocale', 'ja_JP']\n}]);\n</code></pre> <pre><code>driver.execute_script(\"mobile:launchApp\", {\n  \"bundleId\": \"com.apple.Preferences\",\n  \"arguments\": [\"-AppleLanguages\", \"(ja)\", \"-AppleLocale\", \"ja_JP\"]\n})\n</code></pre> <pre><code>driver.execute_script \"mobile:launchApp\", {\n  \"bundleId\": \"com.apple.Preferences\",\n  \"arguments\": [\"-AppleLanguages\", \"(ja)\", \"-AppleLocale\", \"ja_JP\"]\n}\n</code></pre> <pre><code>driver.ExecuteScript(\"mobile:launchApp\", new Dictionary&lt;string, object&gt;() {\n    {\"bundleId\", \"com.apple.Preferences\"},\n    {\"arguments\", new List&lt;string&gt;() { \"-AppleLanguages\", \"(ja)\", \"-AppleLocale\", \"ja_JP\" }}\n});\n</code></pre>"},{"location":"reference/execute-methods/#arguments_10","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be launched com.mycompany.myapp arguments string|array no One or more command line arguments for the app. If the app is already running then this argument is ignored. ['-s', '-m'] environment dict no Environment variables mapping for the app. If the app is already running then this argument is ignored. {'var': 'value'}"},{"location":"reference/execute-methods/#mobile-terminateapp","title":"mobile: terminateApp","text":"<p>Terminates the given app on the device under test via XCTest's terminate API. If the app is not installed an exception is thrown. If the app is not running then nothing is done.</p>"},{"location":"reference/execute-methods/#arguments_11","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be terminated com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_6","title":"Returned Result","text":"<p>Either <code>true</code> if the app was successfully terminated, otherwise <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-killapp","title":"mobile: killApp","text":"<p>Kill the given app on the real device under test by instruments service. If the app is not running or failed to kill, then nothing is done.</p> <p>XCUITest driver 4.4 and higher does not require py-ios-device. XCUITest driver 4.3 requires py-ios-device.</p>"},{"location":"reference/execute-methods/#arguments_12","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be terminated com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_7","title":"Returned Result","text":"<p>Either <code>true</code> if the app was successfully killed, otherwise <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-queryappstate","title":"mobile: queryAppState","text":"<p>Queries the state of an installed application from the device under test. An exception will be thrown if the app with given identifier is not installed.</p>"},{"location":"reference/execute-methods/#arguments_13","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be queried com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_8","title":"Returned Result","text":"<p>An integer number is returned, which encodes the application state. Possible values are described in XCUIApplicationState XCTest documentation topic.</p>"},{"location":"reference/execute-methods/#mobile-activateapp","title":"mobile: activateApp","text":"<p>Puts the given application to foreground if it is running in the background. An error is thrown if the app is not installed or is not running. Nothing is done if the app is already running in the foreground.</p>"},{"location":"reference/execute-methods/#arguments_14","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be activated com.mycompany.myapp"},{"location":"reference/execute-methods/#mobile-listapps","title":"mobile: listApps","text":"<p>List applications installed on the real device under test. This extension throws an error if called for a Simulator device. Offload applications will not be in the result.</p>"},{"location":"reference/execute-methods/#arguments_15","title":"Arguments","text":"Name Type Required Description Example applicationType string no The type of applications to list. Either <code>System</code> or <code>User</code> (the default one) System"},{"location":"reference/execute-methods/#returned-result_9","title":"Returned Result","text":"<p>A list of apps, where each item is a map where keys are bundle identifiers and values are maps of platform-specific app properties. Having <code>UIFileSharingEnabled</code> set to <code>true</code> in the app properties map means this app supports files upload and download into its <code>documents</code> container. Read the File Transfer guide for more details.</p>"},{"location":"reference/execute-methods/#mobile-clearapp","title":"mobile: clearApp","text":"<p>Deletes data files from the data container of an installed app, so it could start from the clean state next time it is launched. The destination app will be terminated if it is running when this API is invoked. Sometimes it might also be necessary to invoke the following APIs to fully reset the state of an installed app (make sure the app is not running while calling them): - mobile: clearKeychains - mobile: resetPermission</p> <p>This API might not be 100% reliable for some apps. The only reliable method to fully reset an existing app that Apple supports is to uninstall it and then perform a fresh install of the same app.</p> <p>This API only works on simulators. An exception is thrown if executed with real devices.</p>"},{"location":"reference/execute-methods/#arguments_16","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be cleared com.mycompany.myapp"},{"location":"reference/execute-methods/#returned-result_10","title":"Returned Result","text":"<p><code>true</code> if at least one item has been successfully deleted from the app data container.</p>"},{"location":"reference/execute-methods/#mobile-startperfrecord","title":"mobile: startPerfRecord","text":"<p>Starts performance profiling for the device under test. Relaxing security is mandatory for simulators. It can always work for real devices. Since XCode 12 the method tries to use <code>xctrace</code> tool to record performance stats. The <code>instruments</code> developer utility is used as a fallback for this purpose if <code>xctrace</code> is not available. It is possible to record multiple profiles at the same time. Read Instruments User Guide for more details. If the recording for the given profile is already running then nothing is done.</p>"},{"location":"reference/execute-methods/#arguments_17","title":"Arguments","text":"Name Type Required Description Example timeout number no The maximum count of milliseconds to record the profiling information. It is recommended to always limit the maximum duration of perf record operation, since the resulting logs are pretty huge and may easily exceed the free space on th local storage volume. <code>300000</code>ms by default (5 minutes) <code>600000</code> profileName string no The name of existing performance profile to apply. Can also contain the full path to the chosen template on the server file system. Note, that not all profiles are supported on mobile devices. <code>Activity Monitor</code> by default. <code>Time Profile</code> pid string or number no The ID of the process to measure the performance for. Set it to <code>current</code> in order to measure the performance of the process, which belongs to the currently active application. All processes running on the device are measured if pid is unset (the default setting). current"},{"location":"reference/execute-methods/#mobile-stopperfrecord","title":"mobile: stopPerfRecord","text":"<p>Stops the performance recording operation previosuly started by <code>mobile: startPerfRecord</code> call. If the previous call has already been completed due to the timeout then its result is returned immediately. An error is thrown if the performance recording has failed to start and recorded no data.</p>"},{"location":"reference/execute-methods/#arguments_18","title":"Arguments","text":"Name Type Required Description Example profileName string no The name of existing performance profile to stop the recording for. Multiple recorders for different profile names could be executed at the same time. <code>Activity Monitor</code> by default. <code>Time Profile</code> remotePath string no The path to the remote location, where the resulting zipped .trace file should be uploaded. The following protocols are supported: http/https, ftp Null or empty string value (the default setting) means the content of resulting file should be zipped, encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated file is too big to fit into the available process memory. https://myserver/upload user string no The name of the user for the remote authentication. Only works if <code>remotePath</code> is provided. myuser pass string no The password for the remote authentication. Only works if <code>remotePath</code> is provided. mypassword method string no The http multipart upload method name. Only works if <code>remotePath</code> is provided. <code>PUT</code> by default POST headers dict no Additional headers mapping for multipart http(s) uploads {'User-Agent': 'Myserver 1.0'} fileFieldName string no The name of the form field, where the file content BLOB should be stored for http(s) uploads. <code>file</code> by default payload formFields dict or array no Additional form fields for multipart http(s) uploads {'field2': 'value2'}"},{"location":"reference/execute-methods/#returned-result_11","title":"Returned Result","text":"<p>The resulting file in .trace format can be either returned directly as base64-encoded zip archive or uploaded to a remote location (such files could be pretty large), depending on the <code>remotePath</code> argument value. Afterwards it is possible to unarchive and open such file with Xcode Developer Tools.</p>"},{"location":"reference/execute-methods/#mobile-installcertificate","title":"mobile: installCertificate","text":"<p>Installs a custom certificate onto the device. Since Xcode SDK 11.4 Apple has added a dedicated simctl subcommand to quickly handle certificates on Simulator over CLI. On real devices the certificate could be installed via CLI if py-ios-device tool is available on the server machine. On simulators before Xcode 11.4 SDK Apple provides no official way to do it via the command line. In such case (and also as a fallback if CLI setup fails) this method tries to wrap the certificate into .mobileconfig format and then deploys the wrapped file to the internal HTTP server, so one can open it via mobile Safari. Then the algorithm goes through the profile installation procedure by clicking the necessary buttons using WebDriverAgent.</p>"},{"location":"reference/execute-methods/#arguments_19","title":"Arguments","text":"Name Type Required Description Example content string yes Base64-encoded content of the public certificate in PEM format a23234... commonName string no Common name of the certificate. If this is not set then the script will try to parse it from the given certificate content. com.myorg isRoot boolean no This option defines where the certificate should be installed to: either Trusted Root Store (<code>true</code>, the default option) or the Keychain (<code>false</code>). On environments other than Xcode 11.4+ Simulator this option is ignored. false"},{"location":"reference/execute-methods/#returned-result_12","title":"Returned Result","text":"<p>The content of the generated .mobileconfig file as base64-encoded string. This config might be useful for debugging purposes. If the certificate has been successfully set via CLI then nothing is returned.</p>"},{"location":"reference/execute-methods/#mobile-removecertificate","title":"mobile: removeCertificate","text":"<p>Removes installed certificate for real devices only if py-ios-device tool is available on the server machine since driver version 4.19.2.</p>"},{"location":"reference/execute-methods/#arguments_20","title":"Arguments","text":"Name Type Required Description Example name string yes Name of the profile com.orgname.profile.mdmprofile"},{"location":"reference/execute-methods/#returned-result_13","title":"Returned Result","text":"<p>Returns status acknowledgment <code>{'Status': 'Acknowledged'}</code> if successfully removed certificate or <code>None</code> if unable to remove certificate.</p>"},{"location":"reference/execute-methods/#mobile-listcertificates","title":"mobile: listCertificates","text":"<p>Lists installed certificates for real devices only if py-ios-device tool is available on the server machine since driver version 4.10.0.</p>"},{"location":"reference/execute-methods/#returned-result_14","title":"Returned Result","text":"<p>Returns map of certificates installed on the real device. The response looks like:</p> <pre><code>{\n    'OrderedIdentifiers': ['com.orgname.profile.mdmprofile'],\n    'ProfileManifest': {\n        'com.orgname.profile.mdmprofile': {\n            'Description': 'MDM Profile',\n            'IsActive': True\n        }\n    },\n    'ProfileMetadata': {\n        'com.orgname.profile.mdmprofile': {\n            'PayloadDescription': 'MDM Profile for testing,\n            'PayloadDisplayName': 'MDM Profile',\n            'PayloadOrganization': 'My Org, Inc.',\n            'PayloadRemovalDisallowed': False,\n            'PayloadUUID': '9ab3fa27-cc45-4c23-a94a-714686397a86',\n            'PayloadVersion': 1\n        }\n    },\n    'Status': 'Acknowledged'\n}\n</code></pre>"},{"location":"reference/execute-methods/#mobile-startlogsbroadcast","title":"mobile: startLogsBroadcast","text":"<p>Starts iOS system logs broadcast websocket on the same host and port where Appium server is running at <code>/ws/session/:sessionId:/appium/syslog</code> endpoint. The method will return immediately if the web socket is already listening. Each connected webcoket listener will receive syslog lines as soon as they are visible to Appium. Read Using Mobile Execution Commands to Continuously Stream Device Logs with Appium Appium Pro article for more details on this feature.</p>"},{"location":"reference/execute-methods/#mobile-stoplogsbroadcast","title":"mobile: stopLogsBroadcast","text":"<p>Stops the syslog broadcasting wesocket server previously started by <code>mobile: startLogsBroadcast</code>. This method will return immediately if no server is running.</p>"},{"location":"reference/execute-methods/#mobile-batteryinfo","title":"mobile: batteryInfo","text":"<p>Reads the battery information from the device under test. This endpoint only returns reliable result on real devices.</p>"},{"location":"reference/execute-methods/#returned-result_15","title":"Returned Result","text":"<p>The actual battery info map, which consists of the following entries:</p> <ul> <li>level: Battery level in range [0.0, 1.0], where 1.0 means 100% charge.</li> <li>state: Battery state as an integer number. The following values are possible:</li> <li>UIDeviceBatteryStateUnknown = 0</li> <li>UIDeviceBatteryStateUnplugged = 1  // on battery, discharging</li> <li>UIDeviceBatteryStateCharging = 2   // plugged in, less than 100%</li> <li>UIDeviceBatteryStateFull = 3       // plugged in, at 100%</li> </ul>"},{"location":"reference/execute-methods/#mobile-deviceinfo","title":"mobile: deviceInfo","text":"<p>Returns the miscellaneous information about the device under test. It includes device information via lockdown in a real device since XCUITest driver 4.2.0.</p>"},{"location":"reference/execute-methods/#returned-result_16","title":"Returned Result","text":"<p>The returned device information map contains the following entries:</p> Name Type Description Example currentLocale string Device locale name. See autoupdatingCurrentLocale for more details. ja_EN, zh-Hant_US timeZone string Device time zone name. See NSTimeZone documentation for more details. America/New_York name string Device name, synonym for model. Prior to iOS 16, user-assigned device name. See UIDevice.name documentation for more details. iPhone model string The model of the device. See UIDevice.model documentation for more details. iPod touch uuid string Device identifier for vendor. Could be equal to <code>unknown</code> if cannot be retrieved. 12345abcd userInterfaceIdiom number The style of the interface on the current device. Could help to determine the device type (e.g. iPhone vs iPad). See UIDevice.userInterfaceIdiom for more details. 0 (UIUserInterfaceIdiomUnspecified), 1 (UIUserInterfaceIdiomPhone), 2 (UIUserInterfaceIdiomPad), 3 (UIUserInterfaceIdiomTV) userInterfaceStyle string The device's UI appearance style. Possible values are: <code>automatic</code>, <code>light</code>, <code>dark</code>, <code>unknown</code>. dark isSimulator number Whether the device is a simulator (1) or a real device (0) 1 thermalState number Thermal state of the device. See NSProcessInfoThermalState documentation on possible values. 0 (NSProcessInfoThermalStateNominal), 1 (NSProcessInfoThermalStateFair), 2 (NSProcessInfoThermalStateSerious), 3 (NSProcessInfoThermalStateCritical)"},{"location":"reference/execute-methods/#mobile-getdevicetime","title":"mobile: getDeviceTime","text":"<p>Returns the actual device time.</p>"},{"location":"reference/execute-methods/#arguments_21","title":"Arguments","text":"Name Type Required Description Example format string no The format specifier string. Read MomentJS documentation to get the full list of supported datetime format specifiers. The default format is <code>YYYY-MM-DDTHH:mm:ssZ</code>, which complies to ISO-8601 <code>YYYY-MM-DD HH:mm:ss</code>"},{"location":"reference/execute-methods/#returned-result_17","title":"Returned Result","text":"<p>The retrieved datetime string formatted according to the given format specfier.</p>"},{"location":"reference/execute-methods/#mobile-activeappinfo","title":"mobile: activeAppInfo","text":"<p>Returns information about the active application.</p>"},{"location":"reference/execute-methods/#returned-result_18","title":"Returned Result","text":"<p>The API returns a map with the following entries</p> Name Type Description Example pid number The process identifier of the active application 1234 bundleId string The bundle identifier of the active application com.yolo.myapp name string The name of the active application, if present Safari processArguments map The map containing actual process arguments. Check the description of the appium:processArguments capability for more details on its format. Might be empty if no process arguments have been provided on the app startup. {\"args\": [\"--help\"], \"env\": {\"PATH\": \"/\"}}"},{"location":"reference/execute-methods/#mobile-pressbutton","title":"mobile: pressButton","text":"<p>Emulates press action on the given physical device button. iOS is pressButton:, tvOS is pressButton: or pressButton:forDuration:. mobile: performIoHidEvent calls a more universal API to perform press with duration on any supported device.</p>"},{"location":"reference/execute-methods/#arguments_22","title":"Arguments","text":"Name Type Required Description Example name string yes The name of the button to be pressed. Supported button names for iOS-based devices are (case-insensitive): <code>home</code>, <code>volumeup</code>, <code>volumedown</code>. For tvOS-based devices (case-insensitive): <code>home</code>, <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>menu</code>, <code>playpause</code>, <code>select</code> home durationSeconds number no Duration in float seconds for tvOS-based devices since Appium 1.22.0 10"},{"location":"reference/execute-methods/#mobile-pushnotification","title":"mobile: pushNotification","text":"<p>Simulates push notification delivery to Simulator. Only application remote push notifications are supported. VoIP, Complication, File Provider, and other types are not supported. Check the output of <code>xcrun simctl help push</code> command for more details.</p>"},{"location":"reference/execute-methods/#arguments_23","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the target application com.apple.Preferences payload map yes Valid Apple Push Notification values. Read the <code>Create the JSON Payload</code> topic of the official Apple documentation for more details on the payload creation. <code>{\"aps\": {\"alert\": {\"title\": \"This is a simulated notification!\"}, \"badge\": 3, \"sound\": \"default\"} }</code>"},{"location":"reference/execute-methods/#mobile-expectnotification","title":"mobile: expectNotification","text":"<p>Blocks until the expected notification is delivered. It is a thin wrapper over XCTNSNotificationExpectation and XCTDarwinNotificationExpectation entities. The extension call throws TimeoutError if the expected notification has not been delivered within the given timeout.</p>"},{"location":"reference/execute-methods/#arguments_24","title":"Arguments","text":"Name Type Required Description Example name string yes The name of the notification to expect com.example.fooAllDone type string no Which notification type to expect. Either <code>plain</code> (the default value) to wait for a notification from the default notification center or <code>darwin</code> to wait for a system notification. darwin timeoutSeconds number no For how long to wait until the notification is delivered in float seconds. 60 seconds by default 5.5"},{"location":"reference/execute-methods/#mobile-performiohidevent","title":"mobile: performIoHidEvent","text":"<p>Emulates triggering of the given low-level IO HID device event. Constants for possible events are defined in HID Usage Tables. For example, in order to emulate single press on Home button the extension should be called with the following arguments: - page: <code>0x0C</code> (<code>kHIDPage_Consumer</code>, select the <code>Customer</code> page) - usage: <code>0x40</code> (<code>kHIDUsage_Csmr_Menu</code>, the <code>Csmr</code> prefix here means this usage is dedicated to the <code>Customer</code> page) - durationSeconds: <code>0.005</code> (The event duration should be 5 milliseconds to be recognized as a single press by iOS)</p> <p>Some popular constants:</p> Name Value Description kHIDPage_Consumer 0x0C The page containing all usages prefixed with <code>kHIDUsage_Csmr_</code> kHIDUsage_Csmr_VolumeIncrement 0xE9 Volume Up kHIDUsage_Csmr_VolumeDecrement 0xEA Volume Down kHIDUsage_Csmr_Menu 0x40 Home kHIDUsage_Csmr_Power 0x30 Power/Lock kHIDUsage_Csmr_Snapshot 0x65 Power + Home"},{"location":"reference/execute-methods/#arguments_25","title":"Arguments","text":"Name Type Required Description Example page int yes The event page identifier. Look for constants perfixed with <code>kHIDPage_</code> in the table above 0x0C usage int yes The event usage identifier (usages are defined per-page). Look for constants prefixed with <code>kHIDUsage_</code> in the table above 0x40 durationSeconds number yes The event duration in float seconds. XCTest uses <code>0.005</code> for a single press event duration 2.5"},{"location":"reference/execute-methods/#mobile-enrollbiometric","title":"mobile: enrollBiometric","text":"<p>Enrolls biometric authentication on Simulator.</p>"},{"location":"reference/execute-methods/#arguments_26","title":"Arguments","text":"Name Type Required Description Example isEnabled boolean no Whether to enable/disable biometric enrollment. <code>true</code> by default. true"},{"location":"reference/execute-methods/#mobile-sendbiometricmatch","title":"mobile: sendBiometricMatch","text":"<p>Emulates biometric match/non-match event on Simulator. The biometric feature is expected to be already enrolled before executing that.</p>"},{"location":"reference/execute-methods/#arguments_27","title":"Arguments","text":"Name Type Required Description Example type string no The biometric feature name. Either <code>touchId</code> or <code>faceId</code>. <code>touchId</code> by default. faceId match boolean no Whether to simulate biometric match (<code>true</code>, the default value) or non-match (<code>false</code>). true"},{"location":"reference/execute-methods/#mobile-isbiometricenrolled","title":"mobile: isBiometricEnrolled","text":"<p>Checks whether biometric is currently enrolled or not on a Simulator device.</p>"},{"location":"reference/execute-methods/#returned-result_19","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-clearkeychains","title":"mobile: clearKeychains","text":"<p>Clears keychains on Simulator. An exception is thrown for real devices.</p>"},{"location":"reference/execute-methods/#mobile-getpermission","title":"mobile: getPermission","text":"<p>Gets application permission state on Simulator. This method requires WIX applesimutils to be installed on the host where Appium server is running.</p>"},{"location":"reference/execute-methods/#arguments_28","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the destination app. com.mycompany.myapp service string yes One of available service names. The following services are supported: <code>calendar</code>, <code>camera</code>, <code>contacts</code>, <code>homekit</code>, <code>microphone</code>, <code>photos</code>, <code>reminders</code>, <code>medialibrary</code>, <code>motion</code>, <code>health</code>, <code>siri</code>, <code>speech</code>. true"},{"location":"reference/execute-methods/#returned-result_20","title":"Returned Result","text":"<p>Either 'yes', 'no', 'unset' or 'limited'</p>"},{"location":"reference/execute-methods/#mobile-setpermission","title":"mobile: setPermission","text":"<p>Set application permission state on Simulator.</p> <p><code>location</code> and <code>location-always</code> services are by <code>xcrun simctl privacy</code> command since XCUITest driver version 5.11.0. The command will kill the <code>bundleId</code> application process if it is running.</p> <p>Other services such as <code>contacts</code> are processed by WIX applesimutils, which will not kill the <code>bundleId</code> application process. WIX applesimutils needs to be installed on the host where Appium server is running.</p>"},{"location":"reference/execute-methods/#arguments_29","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the destination app. com.mycompany.myapp access map yes One or more access rules to set. The following keys are supported: <code>all</code> (Apply the action to all services), <code>calendar</code> (Allow access to calendar), <code>contacts-limited</code> (Allow access to basic contact info), <code>contacts</code> (Allow access to full contact details), <code>location</code> (Allow access to location services when app is in use), <code>location-always</code> (Allow access to location services at all times), <code>photos-add</code> (Allow adding photos to the photo library), <code>photos</code> (Allow full access to the photo library), <code>media-library</code> (Allow access to the media library), <code>microphone</code> (Allow access to audio input), <code>motion</code> (Allow access to motion and fitness data), <code>reminders</code> (Allow access to reminders), <code>siri</code> (Allow use of the app with Siri.). The following values are supported: <code>yes</code> (To grant the permission), <code>no</code> (To revoke the permission), <code>unset</code> (To reset the permission) {'all': 'yes'}"},{"location":"reference/execute-methods/#mobile-resetpermission","title":"mobile: resetPermission","text":"<p>Resets the given permission for the active application under test. Works for both Simulator and real devices using Xcode SDK 11.4+</p>"},{"location":"reference/execute-methods/#arguments_30","title":"Arguments","text":"Name Type Required Description Example service string or int yes One of available service names. The supported service names are: <code>calendar</code>, <code>camera</code>, <code>contacts</code>, <code>health</code>, <code>homekit</code>, <code>keyboardnet</code>, <code>location</code>, <code>medialibrary</code>, <code>microphone</code>, <code>photos</code>, <code>reminders</code>, <code>systemroot</code>, <code>userdesktop</code>, <code>userdocuments</code>, <code>userdownloads</code>, <code>bluetooth</code>. This could also be an integer protected resource identifier taken from XCUIProtectedResource photos"},{"location":"reference/execute-methods/#mobile-getappearance","title":"mobile: getAppearance","text":"<p>Get the device's UI appearance style.</p>"},{"location":"reference/execute-methods/#returned-result_21","title":"Returned Result","text":"<p>An object, with the following entries: - style: The device's UI appearance value. This could be one of: <code>light</code>, <code>dark</code>, <code>unknown</code>, <code>unsupported</code></p>"},{"location":"reference/execute-methods/#mobile-setappearance","title":"mobile: setAppearance","text":"<p>Set the device's UI appearance style.</p>"},{"location":"reference/execute-methods/#arguments_31","title":"Arguments","text":"Name Type Required Description Example style string yes Either <code>light</code> or <code>dark</code> dark"},{"location":"reference/execute-methods/#mobile-getclipboard","title":"mobile: getClipboard","text":"<p>Gets the content of the primary clipboard on the device under test.</p>"},{"location":"reference/execute-methods/#arguments_32","title":"Arguments","text":"Name Type Required Description Example contentType string no <code>plaintext</code> (default), <code>image</code> or <code>url</code> image"},{"location":"reference/execute-methods/#returned-result_22","title":"Returned Result","text":"<p>The actual clipboard content encoded into base64 string. An empty string is returned if the clipboard contains no data.</p>"},{"location":"reference/execute-methods/#mobile-setclipboard","title":"mobile: setClipboard","text":"<p>Sets the primary clipboard's content on the device under test.</p>"},{"location":"reference/execute-methods/#arguments_33","title":"Arguments","text":"Name Type Required Description Example content string yes The content to be set as base64-encoded string. QXBwaXVt contentType string no <code>plaintext</code> (default), <code>image</code> or <code>url</code> image"},{"location":"reference/execute-methods/#mobile-siricommand","title":"mobile: siriCommand","text":"<p>Presents the Siri UI, if it is not currently active, and accepts a string which is then processed as if it were recognized speech. Check the documentation on activateWithVoiceRecognitionText XCTest method for more details.</p>"},{"location":"reference/execute-methods/#arguments_34","title":"Arguments","text":"Name Type Required Description Example text string yes The actual command that will be passed to Siri service Hello Siri"},{"location":"reference/execute-methods/#mobile-pullfile","title":"mobile: pullFile","text":"<p>Pulls a remote file from the device.</p>"},{"location":"reference/execute-methods/#arguments_35","title":"Arguments","text":"Name Type Required Description Example remotePath string yes The path to an existing remote file on the device. See the File Transfer guide for accepted formats. If the file with the given name does not exist an exception will be thrown. @com.mycompany.myapp:documents/myfile.txt"},{"location":"reference/execute-methods/#returned-result_23","title":"Returned Result","text":"<p>Base64-encoded string, which represents the content of the remote file.</p>"},{"location":"reference/execute-methods/#mobile-pushfile","title":"mobile: pushFile","text":"<p>Pushes a local file to the device.</p>"},{"location":"reference/execute-methods/#arguments_36","title":"Arguments","text":"Name Type Required Description Example remotePath string yes The path on the device to where the payload should be written. The value format is similar to the one used in pullFile extension. If the file with the same name already exists then it will be silently overridden. @com.mycompany.myapp:documents/myfile.txt payload string yes Base64-encoded content of the file to be pushed. QXBwaXVt"},{"location":"reference/execute-methods/#mobile-pullfolder","title":"mobile: pullFolder","text":"<p>Pulls a remote folder from the device.</p>"},{"location":"reference/execute-methods/#arguments_37","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same as for pullFile extension, but should be pointing to a remote folder @com.mycompany.myapp:documents/myfolder/"},{"location":"reference/execute-methods/#returned-result_24","title":"Returned Result","text":"<p>Base64-encoded string, which represents the zipped content of the remote folder.</p>"},{"location":"reference/execute-methods/#mobile-deletefile","title":"mobile: deleteFile","text":"<p>Deletes the given file from the device under test.</p>"},{"location":"reference/execute-methods/#arguments_38","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same as for pullFile extension @com.mycompany.myapp:documents/myfile.txt"},{"location":"reference/execute-methods/#mobile-deletefolder","title":"mobile: deleteFolder","text":"<p>Deletes the given folder from the device under test.</p>"},{"location":"reference/execute-methods/#arguments_39","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same value as for <code>mobile: deleteFile</code> except of the fact it should be pointing to a folder and should end with a single slash <code>/</code> @com.mycompany.myapp:documents/myfolder/"},{"location":"reference/execute-methods/#mobile-configurelocalization","title":"mobile: configureLocalization","text":"<p>Change localization settings on the currently booted Simulator. The changed settings are only applied for the newly started applications/activities. Currently running applications will stay unchanged. This means, for example, that the keyboard should be hidden and shown again in order to observe the changed layout, and corresponding apps must be restarted in order to observe their interface using the newly set locale/language. Also this method might leave some system UI alerts untranslated. Be careful while setting the actual arguments since their actual values are not strictly checked. This could lead to an unexpected behavior if an incorrect/unsupported language or locale abbreviation is provided.</p>"},{"location":"reference/execute-methods/#arguments_40","title":"Arguments","text":"Name Type Required Description Example keyboard map no On-screen keyboard properties. The <code>name</code> key is required and should be set to a valid locale abbreviation. The <code>layout</code> key is also required. The <code>hardware</code> key is optional and could be omitted or set to <code>Automated</code>. You could switch the keyboard layout in system preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleKeyboards</code> to see possible combinations. <code>{\"name\": \"de_CH\", \"layout\": \"QWERTZ\", \"hardware\": \"Automated\"}</code> language map no System language properties. The <code>name</code> key is required and should be set to a valid language abbreviation. You could switch the system language in preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleLanguages</code> to see possible combinations. <code>{\"name\": \"zh-Hant-CN\"}</code> locale map no System locale properties. The <code>name</code> key is required and should be set to a valid language abbreviation. The <code>calendar</code>key is optonal and could be set to a valid calendar format name. You could switch the system locale/calendar format in preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleLocale</code> to see possible combinations. <code>{\"name\": \"uk_UA\", \"calendar\": \"gregorian\"}</code>"},{"location":"reference/execute-methods/#returned-result_25","title":"Returned Result","text":"<p><code>true</code> if any of settings has been successfully changed.</p>"},{"location":"reference/execute-methods/#mobile-startaudiorecording","title":"mobile: startAudioRecording","text":"<p>Records the given hardware audio input into an .mp4 file. You must allow the <code>audio_record</code> security feature in order to use this extension. Also it is required that FFMpeg is installed on the machibe where Appium server is running.</p>"},{"location":"reference/execute-methods/#arguments_41","title":"Arguments","text":"Name Type Required Description Example audioInput string or int yes The name of the corresponding audio input device to use for the capture. The full list of capture devices could be shown using <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> Terminal command. 1 audioCodec string no The name of the audio codec. The Advanced Audio Codec (aac) is used by default. aac audioBitrate string no The bitrate of the resulting audio stream. <code>128k</code> by default. 256k audioChannels string or int no The count of audio channels in the resulting stream. Setting it to <code>1</code> will create a single channel (mono) audio stream. <code>2</code> By default 1 audioRate string or int no The sampling rate of the resulting audio stream. 44100 by default 22050 timeLimit string or int no The maximum recording time, in seconds. The default value is <code>180</code>, the maximum value is <code>43200</code> (12 hours). 60 forceRestart boolean no Whether to restart audio capture process forcefully when startRecordingAudio is called (<code>true</code>) or ignore the call until the current audio recording is completed (<code>false</code>, the default value). true"},{"location":"reference/execute-methods/#mobile-stopaudiorecording","title":"mobile: stopAudioRecording","text":"<p>Stops recording of the audio input. If no audio recording process is running then the endpoint will try to get the recently recorded file. If no previously recorded file is found and no active audio recording processes are running then the method returns an empty string.</p>"},{"location":"reference/execute-methods/#returned-result_26","title":"Returned Result","text":"<p>Base64-encoded content of the recorded media file or an empty string if no audio recording has been started before.</p>"},{"location":"reference/execute-methods/#mobile-startpcap","title":"mobile: startPcap","text":"<p>Start mobile device network traffic capture. This extension only works if py-ios-device utility is installed on the server machine and only supports real iOS devices.</p>"},{"location":"reference/execute-methods/#arguments_42","title":"Arguments","text":"Name Type Required Description Example timeLimitSec string or int no The maximum recording time, in seconds. The default value is <code>180</code>, the maximum value is <code>43200</code> (12 hours). 60 forceRestart boolean no Whether to restart traffic capture process forcefully when startPcap is called (<code>true</code>) or ignore the call until the current traffic capture is completed (<code>false</code>, the default value). true"},{"location":"reference/execute-methods/#mobile-stoppcap","title":"mobile: stopPcap","text":"<p>Stops network traffic capture. If no traffic capture process is running then the endpoint will try to get the recently recorded file. If no previously recorded file is found and no active traffic capture processes are running then the method returns an empty string.</p>"},{"location":"reference/execute-methods/#returned-result_27","title":"Returned Result","text":"<p>Base64-encoded content of the traffic capture file (.pcap) or an empty string if no traffic capture has been started before. Netowrk capture files could be opened in Wireshark application.</p>"},{"location":"reference/execute-methods/#mobile-runxctest","title":"mobile: runXCTest","text":"<p>Run a native XCTest script. Launches a subprocess that runs the XC Test and blocks until it is completed. Parses the stdout of the process and returns its result as an array. Facebook's IDB tool is required to run such tests.</p>"},{"location":"reference/execute-methods/#arguments_43","title":"Arguments","text":"Name Type Required Description Example testRunnerBundleId string yes Test app bundle io.appium.XCTesterAppUITests.xctrunner appUnderTestBundleId string yes App-under-test bundle com.mycompany.myapp xcTestBundleID string yes xctest bundle id io.appium.XCTesterAppUITests testType string no Test type. Either <code>ui</code> (the default one), <code>app</code> or <code>logic</code> app env map no Environment variables mapping to be passed to the test {'myvar': 'myvalue'} args array no Launch arguments to start the test with (see https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments for reference) ['-arg1', '--arg2'] timeout string or int no Timeout if session doesn't complete after given time (in milliseconds). <code>360000</code>ms by default 120000"},{"location":"reference/execute-methods/#returned-result_28","title":"Returned Result","text":"<p>The API calls returns a map with the following entries:</p> <ul> <li>results: The array of test results. Each item in this array conists of the following entries:</li> <li>testName: Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')</li> <li>passed: Did the tests pass?</li> <li>crashed: Did the tests crash?</li> <li>status: Test result status (e.g.: 'passed', 'failed', 'crashed')</li> <li>duration: How long did the tests take (in seconds)</li> <li>failureMessage: Failure message (if applicable)</li> <li>location The geolocation of the test (if applicable)</li> <li>code: The exit code of the process. <code>0</code> value marks a successful execution.</li> <li>signal: The signal that terminated the process. Could be <code>null</code> (e.g.: <code>SIGTERM</code>)</li> </ul>"},{"location":"reference/execute-methods/#mobile-installxctestbundle","title":"mobile: installXCTestBundle","text":"<p>Installs an XCTest bundle to the device under test. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"reference/execute-methods/#arguments_44","title":"Arguments","text":"Name Type Required Description Example xctestBundle string yes Path to your xctest .app bundle. Could be an URL /path/to/my/bundle.app"},{"location":"reference/execute-methods/#mobile-listxctestbundles","title":"mobile: listXCTestBundles","text":"<p>List XCTest bundles that are installed on device. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"reference/execute-methods/#returned-result_29","title":"Returned Result","text":"<p>Array of XCTest bundles (e.g.: [\"XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance\"])</p>"},{"location":"reference/execute-methods/#mobile-listxctestsintestbundle","title":"mobile: listXCTestsInTestBundle","text":"<p>List XCTests in a test bundle. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"reference/execute-methods/#arguments_45","title":"Arguments","text":"Name Type Required Description Example bundle string yes Bundle ID of the XCTest 'com.bundle.myapp'"},{"location":"reference/execute-methods/#returned-result_30","title":"Returned Result","text":"<p>Array of xctests in the test bundle (e.g.: <code>[ 'XCTesterAppUITests.XCTesterAppUITests/testExample', 'XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance' ]</code>)</p>"},{"location":"reference/execute-methods/#mobile-viewportrect","title":"mobile: viewportRect","text":"<p>Retrieves the viewport dimensions. The viewport is the device's screen size with status bar size subtracted if the latter is present/visible.</p>"},{"location":"reference/execute-methods/#returned-result_31","title":"Returned Result","text":"<p>The response looks like <code>{\"value\":{\"left\":0,\"top\":96,\"width\":828,\"height\":1696}}</code>.</p> <p><code>left</code> and <code>top</code> are distance from the <code>left</code> of the screen and the <code>top</code> of the screen. iOS Drawing Concepts could help about the relationship of coordinate.</p> <p><code>width</code> and <code>height</code> are the screen's width and height.</p>"},{"location":"reference/execute-methods/#mobile-viewportscreenshot","title":"mobile: viewportScreenshot","text":"<p>Takes a screenshot of the device viewport (see <code>mobile: viewportRect</code>)</p> <p>Unreliable</p> <p>This method is unreliable. We recommend using <code>getScreenshot</code> instead</p>"},{"location":"reference/execute-methods/#returned-result_32","title":"Returned Result","text":"<p>Base64-encoded string, which represents the viewport screenshot.</p>"},{"location":"reference/execute-methods/#mobile-devicescreeninfo","title":"mobile: deviceScreenInfo","text":"<p>Get information about screen.</p>"},{"location":"reference/execute-methods/#returned-result_33","title":"Returned Result","text":"<p>The response looks like <code>{\"value\":{\"statusBarSize\":{\"width\":414,\"height\":48},\"scale\":2}}</code></p> <p><code>statusBarSize</code> contains status bar dimensions. It is the result of status bar. <code>scale</code> is screen scale.</p>"},{"location":"reference/execute-methods/#mobile-swipe","title":"mobile: swipe","text":"<p>This gesture performs a simple \"swipe\" gesture on the particular screen element or on the application element, which is usually the whole screen. This method does not accept coordinates and simply emulates single swipe with one finger. It might be useful for such cases like album pagination, switching views, etc. More advanced cases may require to call mobile: dragFromToForDuration, where one can supply coordinates and duration.</p>"},{"location":"reference/execute-methods/#arguments_46","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to swipe on. Application element will be used instead if this argument is not provided fe50b60b-916d-420b-8728-ee2072ec53eb direction Either 'up', 'down', 'left' or 'right' yes The direction in which to swipe up velocity number no This argument is optional and is only supported since Appium server version 1.19 and Xcode SDK version 11.4+. The value is measured in pixels per second and same values could behave differently on different devices depending on their display density. Higher values make swipe gesture faster (which usually scrolls larger areas if we apply it to a list) and lower values slow it down. Only values greater than zero have effect. 250"},{"location":"reference/execute-methods/#examples","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: swipe\", ImmutableMap.of(\n    \"velocity\": 2500,\n    \"direction\": \"down\",\n    \"elementId\", e.getId()\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript(\"mobile: swipe\", [{   velocity: 2500,   direction: \"down\",   elementId: e.elementId }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: swipe\", {\n  \"velocity\": 2500,\n  \"direction\": \"down\",\n  \"elementId\": e.id\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: swipe', {\n  velocity: 2500,\n  direction: 'down',\n  elementId: e.ref\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: swipe\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"direction\", \"down\" },\n    {\"velocity\", 2500 }\n});\n</code></pre>"},{"location":"reference/execute-methods/#references","title":"References","text":"<ul> <li>swipeDown</li> <li>swipeDownWithVelocity:</li> <li>swipeUp</li> <li>swipeUpWithVelocity:</li> <li>swipeLeft</li> <li>swipeLeftWithVelocity:</li> <li>swipeRight</li> <li>swipeRightWithVelocity:</li> </ul>"},{"location":"reference/execute-methods/#mobile-scroll","title":"mobile: scroll","text":"<p>Scrolls the element or the whole screen. Different scrolling strategies are supported. Arguments define the choosen strategy: either 'name', 'direction', 'predicateString' or 'toVisible' in that order. All strategies are exclusive and only one strategy can be applied at a single moment of time. Use \"mobile: scroll\" to emulate precise scrolling in tables or collection views, where it is already known to which element the scrolling should be performed. Although, there is one known limitation there: in case it is necessary to perform too many scroll gestures on parent container to reach the necessary child element (tens of them) then the method call may fail. Important: The implemntation of this extension relies on several undocumented XCTest features, which might not always be reliable. Thus it might not always work as expected.</p>"},{"location":"reference/execute-methods/#arguments_47","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to scroll on (e.g. the container). The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb name string no The accessibility id of the child element, to which scrolling is performed. The same result can be achieved by setting predicateString argument to 'name == accessibilityId'. Has no effect if elementId is not a container cell12 direction Either 'up', 'down', 'left' or 'right' yes The main difference from swipe call with the same argument is that scroll will try to move the current viewport exactly to the next/previous page (the term \"page\" means the content, which fits into a single device screen) down predicateString string no The NSPredicate locator of the child element, to which the scrolling should be performed. Has no effect if elementId is not a container label == \"foo\" toVisible boolean no If set to true then asks to scroll to the first visible elementId in the parent container. Has no effect if elementId is not set true"},{"location":"reference/execute-methods/#examples_1","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>driver.executeScript(\"mobile: scroll\", ImmutableMap.of(\n    \"direction\", \"down\"\n));\n</code></pre> <p>```js await driver.executeScript('mobile: scroll', [{   direction: 'down' }]);</p> <pre><code>driver.execute_script(\"mobile: scroll\", {\n  \"direction\": \"down\"\n})\n</code></pre> <pre><code>driver.execute_script 'mobile: scroll', {\n  direction: 'down'\n}\n</code></pre> <pre><code>driver.ExecuteScript(\"mobile: scroll\", new Dictionary&lt;string, object&gt;() {\n    {\"direction\", \"down\"}\n});\n</code></pre>"},{"location":"reference/execute-methods/#mobile-pinch","title":"mobile: pinch","text":"<p>Performs pinch gesture on the given element or on the application element.</p>"},{"location":"reference/execute-methods/#arguments_48","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to pinch on. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb scale number yes Pinch scale of type float. Use a scale between 0 and 1 to \"pinch close\" or zoom out and a scale greater than 1 to \"pinch open\" or zoom in. 0.5 velocity number yes The velocity of the pinch in scale factor per second (float value) 2.2"},{"location":"reference/execute-methods/#examples_2","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: pinch\", ImmutableMap.of(\n    \"scale\", 0.5,\n    \"velocity\", 1.1,\n    \"elementId\", e.getId()\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript('mobile: pinch', [{   scale: 0.5,   velocity: 1.1,   elementId: e.elementId }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: pinch\", {\n  \"scale\": 0.5,\n  \"velocity\": 1.1,\n  \"elementId\": e.id\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: pinch', {\n  scale: 0.5,\n  velocity: 1.1,\n  elementId: e.ref\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: pinch\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"scale\", 0.5 },\n    {\"velocity\", 1.1 },\n});\n</code></pre>"},{"location":"reference/execute-methods/#reference","title":"Reference","text":"<p>pinchWithScale:velocity:</p>"},{"location":"reference/execute-methods/#mobile-doubletap","title":"mobile: doubleTap","text":"<p>Performs double tap gesture on the given element or on the screen.</p>"},{"location":"reference/execute-methods/#arguments_49","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to double tap on. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb x number no Horizontal coordinate offset. 100 y number no Vertical coordinate offset. 100"},{"location":"reference/execute-methods/#examples_3","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: doubleTap\", ImmutableMap.of(\n    \"elementId\", e.getId()\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript('mobile: doubleTap', [{   elementId: e.elementId }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: doubleTap\", {\n  \"elementId\": e.id\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: doubleTap', {\n  elementId: e.ref\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: doubleTap\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id}\n});\n</code></pre>"},{"location":"reference/execute-methods/#mobile-touchandhold","title":"mobile: touchAndHold","text":"<p>Performs long press gesture on the given element or on the screen.</p>"},{"location":"reference/execute-methods/#arguments_50","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to long tap on. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb duration number yes The float duration of press action in seconds 1.5 x number no Horizontal coordinate offset. 100 y number no Vertical coordinate offset. 100"},{"location":"reference/execute-methods/#examples_4","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: touchAndHold\", ImmutableMap.of(\n    \"elementId\", e.getId(),\n    \"duration\", 2.0\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript('mobile: touchAndHold', [{   elementId: e.elementId,   duration: 2.0 }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: touchAndHold\", {\n  \"elementId\": e.id,\n  \"duration\": 2.0\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: touchAndHold', {\n  elementId: e.ref,\n  duration: 2.0\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: touchAndHold\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"duration\", 2.0}\n});\n</code></pre>"},{"location":"reference/execute-methods/#reference_1","title":"Reference","text":"<p>pressForDuration:</p>"},{"location":"reference/execute-methods/#mobile-twofingertap","title":"mobile: twoFingerTap","text":"<p>Performs two finger tap gesture on the given element or on the application element.</p>"},{"location":"reference/execute-methods/#arguments_51","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to tap on. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb"},{"location":"reference/execute-methods/#examples_5","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: twoFingerTap\", ImmutableMap.of(\n    \"elementId\", e.getId()\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript('mobile: twoFingerTap', [{   elementId: e.elementId }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: twoFingerTap\", {\n  \"elementId\": e.id\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: twoFingerTap', {\n  elementId: e.ref\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: twoFingerTap\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id}\n});\n</code></pre>"},{"location":"reference/execute-methods/#reference_2","title":"Reference","text":"<p>twoFingerTap</p>"},{"location":"reference/execute-methods/#mobile-tap","title":"mobile: tap","text":"<p>Performs tap gesture by coordinates on the given element or on the screen.</p>"},{"location":"reference/execute-methods/#arguments_52","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to tap on. x and y tap coordinates will be calculated relatively to the current element position on the screen if this argument is provided. Otherwise they should be calculated relatively to the active application element. fe50b60b-916d-420b-8728-ee2072ec53eb x number yes Horizontal coordinate offset. 100 y number yes Vertical coordinate offset. 100"},{"location":"reference/execute-methods/#mobile-dragfromtoforduration","title":"mobile: dragFromToForDuration","text":"<p>Performs drag and drop gesture by coordinates. This can be done either on an element or on the screen</p>"},{"location":"reference/execute-methods/#arguments_53","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to perform drag on. All the coordinates will be calculated relatively this this element position on the screen. Absolute screen coordinates are expected if this argument is not set fe50b60b-916d-420b-8728-ee2072ec53eb duration number yes Float number of seconds in range [0.5, 60]. How long the tap gesture at starting drag point should be before to start dragging 5.3 fromX number yes The x coordinate of starting drag point 100 fromY number yes The y coordinate of starting drag point 100 toX number yes The x coordinate of ending drag point 200 toY number yes The y coordinate of ending drag point 200"},{"location":"reference/execute-methods/#examples_6","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: dragFromToForDuration\", ImmutableMap.of(\n    \"elementId\", e.getId(),\n    \"duration\", 1.0,\n    \"fromX\", 100,\n    \"fromY\", 100,\n    \"toX\", 200,\n    \"toY\", 200\n));\n</code></pre> <p>```js const e = await $('~target element'); await driver.executeScript('mobile: dragFromToForDuration', [{   elementId: e.elementId,   duration: 1.0,   fromX: 100,   fromY: 100,   toX: 200,   toY: 200 }]);</p> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: dragFromToForDuration\", {\n  \"elementId\": e.id,\n  \"duration\": 1.0,\n  \"fromX\": 100,\n  \"fromY\": 100,\n  \"toX\": 200,\n  \"toY\": 200\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: dragFromToForDuration', {\n  elementId: e.ref,\n  duration: 1.0,\n  fromX: 100,\n  fromY: 100,\n  toX: 200,\n  toY: 200\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: dragFromToForDuration\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"duration\", 1.0,}\n    {\"fromX\", 100},\n    {\"fromY\", 100},\n    {\"toX\", 200},\n    {\"toY\", 200}\n});\n</code></pre>"},{"location":"reference/execute-methods/#reference_3","title":"Reference","text":"<p>clickForDuration:thenDragToElement:</p>"},{"location":"reference/execute-methods/#mobile-dragfromtowithvelocity","title":"mobile: dragFromToWithVelocity","text":"<p>Initiates a press-and-hold gesture, drags to another coordinate or an element with a velocity you specify, and holds for a duration you specify.</p>"},{"location":"reference/execute-methods/#arguments_54","title":"Arguments","text":"Name Type Required Description Example fromElementId string no The internal element identifier (as hexadecimal hash string) to start the drag gesture from. Absolute screen coordinates are expected if this argument is not set fe50b60b-916d-420b-8728-ee2072ec53eb toElementId string no The internal element identifier (as hexadecimal hash string) to end the drag gesture on. This parameter is mandatory if <code>fromElementId</code> is provided fe50b60b-916d-420b-8728-ee2072ec53eb pressDuration number yes Float number of seconds in range [0, 60]. How long the tap gesture at starting drag point should be before to start dragging 0.5 holdDuration number yes Float number of seconds in range [0, 60]. The duration for which to hold over the other coordinate or the given element after dragging 0.1 velocity number yes The speed at which to move from the initial press position to the other element or coordinate, expressed in pixels per second 400 fromX number no The x coordinate of starting drag point. Must be provided if <code>fromElementId</code> is not defined 100 fromY number no The y coordinate of starting drag point. Must be provided if <code>fromElementId</code> is not defined 100 toX number no The x coordinate of ending drag point. Must be provided if <code>fromElementId</code> is not defined 200 toY number no The y coordinate of ending drag point. Must be provided if <code>fromElementId</code> is not defined 200"},{"location":"reference/execute-methods/#references_1","title":"References","text":"<p>pressForDuration:thenDragToElement:withVelocity:thenHoldForDuration: pressForDuration:thenDragToCoordinate:withVelocity:thenHoldForDuration:</p>"},{"location":"reference/execute-methods/#mobile-rotateelement","title":"mobile: rotateElement","text":"<p>Performs rotate gesture on the given element.</p>"},{"location":"reference/execute-methods/#arguments_55","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no Internal element id (as hexadecimal hash string) to perform rotation on. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb rotation number yes The rotation of the gesture in radians Math.PI velocity number yes The velocity of the rotation gesture in radians per second Math.PI / 4"},{"location":"reference/execute-methods/#examples_7","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\ndriver.executeScript(\"mobile: rotateElement\", ImmutableMap.of(\n    // rotate clockwise, 90 degrees\n    \"rotation\", -Math.PI / 2,\n    // in approximately two seconds\n    \"velocity\", Math.PI / 4,\n    \"elementId\", e.getId()\n));\n</code></pre> <pre><code>const e = await $('~target element');\nawait driver.executeScript('mobile: rotateElement', [{\n  rotation: -Math.PI / 2,\n  velocity: Math.PI / 4,\n  elementId: e.elementId\n}]);\n</code></pre> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: rotateElement\", {\n  \"rotation\": -math.pi / 2,\n  \"velocity\": math.pi / 4,\n  \"elementId\": e.id\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: rotateElement', {\n  elementId: e.ref,\n  rotation: PI / 2,\n  velocity: PI / 4\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: rotateElement\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"rotation\", -Math.PI / 2 },\n    {\"velocity\", Math.PI / 4 },\n});\n</code></pre>"},{"location":"reference/execute-methods/#reference_4","title":"Reference","text":"<p>rotate:withVelocity:</p>"},{"location":"reference/execute-methods/#mobile-tapwithnumberoftaps","title":"mobile: tapWithNumberOfTaps","text":"<p>Sends one or more taps with one or more touch points since Appium 1.17.1.</p>"},{"location":"reference/execute-methods/#arguments_56","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to perform one or more taps. The active application element will be used instead if this parameter is not provided. fe50b60b-916d-420b-8728-ee2072ec53eb numberOfTaps number no The number of taps. 1 by default 2 numberOfTouches number no The number of touch points. 1 by default 2"},{"location":"reference/execute-methods/#examples_8","title":"Examples","text":"JavaJS (WebdriverIO)PythonRubyC# <pre><code>RemoteWebElement e = driver.findElement(AppiumBy.accessibilityId(\"target element\"));\nvar result = driver.executeScript(\"mobile: tapWithNumberOfTaps\", Map.of(\n    \"elementId\", e.getId(),\n    \"numberOfTaps\", 2,\n    \"numberOfTouches\", 1,\n));\n</code></pre> <pre><code>const e = await $('~target element');\nawait driver.executeScript('mobile: tapWithNumberOfTaps', [{\n  elementId: e.elementId,\n  numberOfTaps: 2,\n  numberOfTouches: 1\n}]);\n</code></pre> <pre><code>e = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value='target element')\ndriver.execute_script(\"mobile: tapWithNumberOfTaps\", {\n  \"elementId\": e.id,\n  \"numberOfTaps\": 2,\n  \"numberOfTouches\": 1\n})\n</code></pre> <pre><code>e = driver.find_element :accessibility_id, 'target element'\ndriver.execute_script 'mobile: tapWithNumberOfTaps', {\n  elementId: e.ref,\n  numberOfTaps: 2,\n  numberOfTouches: 1\n}\n</code></pre> <pre><code>var e = driver.FindElement(By.AccessibilityId(\"target element\"))\ndriver.ExecuteScript(\"mobile: touchAndHold\", new Dictionary&lt;string, object&gt;() {\n    {\"elementId\", element.Id},\n    {\"numberOfTaps\", 2 },\n    {\"numberOfTouches\", 1 },\n});\n</code></pre> <ul> <li>numberOfTaps=1, numberOfTouches=1 -&gt; \"vanilla\" single tap</li> <li>numberOfTaps=2, numberOfTouches=1 -&gt; double tap</li> <li>numberOfTaps=3, numberOfTouches=1 -&gt; tripple tap</li> <li>numberOfTaps=2, numberOfTouches=2 -&gt; double tap with two fingers</li> </ul>"},{"location":"reference/execute-methods/#reference_5","title":"Reference","text":"<p>tapWithNumberOfTaps:numberOfTouches:</p>"},{"location":"reference/execute-methods/#mobile-forcepress","title":"mobile: forcePress","text":"<p>Emulates force press on the given element/coordinates. An error is thrown if the target device does not support force press gesture.</p>"},{"location":"reference/execute-methods/#arguments_57","title":"Arguments","text":"Name Type Required Description Example elementId string no The internal element identifier (as hexadecimal hash string) to perform one or more taps. It is expected that both x and y are provided if this argument is ommitted. If the element identifier is provided without coordinates then the actual element's touch point will be calculated automatically by WebDriverAgent. fe50b60b-916d-420b-8728-ee2072ec53eb x number no x coordinate of the gesture. It is calculated relatively to the given element (if provided). Otherwise the gesture destination point is calculated relatively to the active application. 100 y number no y coordinate of the gesture. It is calculated relatively to the given element (if provided). Otherwise the gesture destination point is calculated relatively to the active application 100 duration number no The float number of seconds the force press action would take. If duration is provided then it is also expected that a custom pressure value is provided as well. <code>0.5</code> by default. 2.5 pressure number no The float number defining how much pressure to apply. If pressure is provided then it is also expected that a custom duration value is provided as well. <code>1.0</code> by default 1.5"},{"location":"reference/execute-methods/#mobile-scrolltoelement","title":"mobile: scrollToElement","text":"<p>Scrolls the current viewport to the given element. It is expected the destination element is inside a scrollable container and is hittable. The scroll direction is detected automatically. This API uses native XCTest calls, so it performs scrolling pretty fast. The same native call is implicitly performed by a vanilla <code>click</code> API if the destination element is out of the current viewport. An exception is thrown if the scrolling action cannot be performed. This extension is available since the driver version 4.7.0.</p>"},{"location":"reference/execute-methods/#arguments_58","title":"Arguments","text":"Name Type Required Description Example elementId string yes The internal element identifier (as hexadecimal hash string) to scroll to. The destination element must be located in a scrollable container and must be hittable. If the element is already present in the current viewport then no action is performed. fe50b60b-916d-420b-8728-ee2072ec53eb"},{"location":"reference/execute-methods/#mobile-resetlocationservice","title":"mobile: resetLocationService","text":"<p>Reset the location service on real device since Appium 1.22.0. It could delay a few seconds to reflect the location by the system. It raises an error if the device is simulator or an error occurred during the reset.</p>"},{"location":"reference/execute-methods/#mobile-enableconditioninducer","title":"mobile: enableConditionInducer","text":"<p>Important: Device conditions are available for real devices running iOS 13.0 and later.</p> <p>This API is going to throw an error if it is called while another condition inducer has been already enabled and is not explicitly disabled.</p> <pre><code>mobile: enableConditionInducer\nmobile: disableConditionInducer\nmobile: listConditionInducers\n</code></pre> <p>The above three extensions are available since the driver version 4.9.0.</p> <p>You can create a condition on a connected device to test your app under adverse conditions, such as poor network connectivity or thermal constraints.</p> <p>When you start a device condition, the operating system on the device behaves as if its environment has changed. The device condition remains active until you stop the device condition or disconnect the device. For example, you can start a device condition, run your app, monitor your app\u2019s energy usage, and then stop the condition.</p> <p>Reference: Test under adverse device conditions (iOS)</p> Name Type Required Description Example conditionID string yes Get the conditionID parameter through the command <code>mobile: availableConditionInducer</code> SlowNetworkCondition profileID string yes Get the profileID parameter through the command <code>mobile: availableConditionInducer</code> SlowNetwork100PctLoss"},{"location":"reference/execute-methods/#returned-result_34","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code>, where <code>true</code> means enabling of the condition inducer has been successful</p>"},{"location":"reference/execute-methods/#mobile-listconditioninducers","title":"mobile: listConditionInducers","text":"<p>Get all condition inducer configuration profiles</p>"},{"location":"reference/execute-methods/#returned-result_35","title":"Returned Result","text":"<p>The response looks like</p> <pre><code>[{\n    \"profiles\": [\n        {\n            \"name\": \"100% packet loss\",\n            \"identifier\": \"SlowNetwork100PctLoss\",   // enableConditionInducer profileID\n            \"description\": \"Name: 100% Loss Scenario\n                            Downlink Bandwidth: 0 Mbps\n                            Downlink Latency: 0 ms\n                            Downlink Packet Loss Ratio: 100%\n                            Uplink Bandwidth: 0 Mbps\n                            Uplink Latency: 0 ms\n                            Uplink Packet Loss Ratio: 100%\"\n        },\n    ],\n    \"profilesSorted\": true,\n    \"identifier\": \"SlowNetworkCondition\",   // enableConditionInducer conditionID\n    \"isDestructive\": false,\n    \"isInternal\": false,\n    \"activeProfile\": \"\",\n    \"name\": \"Network Link\",\n    \"isActive\": false\n}]\n</code></pre>"},{"location":"reference/execute-methods/#mobile-disableconditioninducer","title":"mobile: disableConditionInducer","text":"<p>Disable device condition inducer.</p> <p>Usually a persistent connection is maintained after enable the condition inducer, and this method is only valid for this connection.</p> <p>If the connection is disconnected, condition inducer will be automatically disabled</p>"},{"location":"reference/execute-methods/#returned-result_36","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code>, where <code>true</code> means disabling of the condition inducer has been successful</p>"},{"location":"reference/execute-methods/#mobile-calibratewebtorealcoordinatestranslation","title":"mobile: calibrateWebToRealCoordinatesTranslation","text":"<p>Calibrates web to real coordinates translation. This API can only be called from Safari web context. It must load a custom page to the browser, and then restore the original one, so don't call it if you can potentially lose the current web app state. The outcome of this API is then used if <code>nativeWebTap</code> capability/setting is enabled. The returned value could also be used to manually transform web coordinates to real device ones in client scripts.</p> <p>It is adviced to call this API at least once before changing the device orientation or device screen layout as the recetly received value is cached for the session lifetime and may become obsolete.</p> <p>It is advised to enable <code>nativeWebTapStrict</code> capability/setting to speed up dynamic coordinates transformation if you use this extension.</p>"},{"location":"reference/execute-methods/#returned-result_37","title":"Returned Result","text":"<p>An object with three properties used to properly shift Safari web element coordinates into native context: - <code>offsetX</code>: Webview X offset in real coordinates - <code>offsetY</code>: Webview Y offset in real coordinates - <code>pixelRatioX</code>: Webview X pixel ratio - <code>pixelRatioY</code>: Webview Y pixel ratio</p> <p>The following formulas are used for coordinates translation: <code>RealX = offsetX + webviewX * pixelRatioX</code> <code>RealY = offsetY + webviewY * pixelRatioY</code></p>"},{"location":"reference/execute-methods/#mobile-updatesafaripreferences","title":"mobile: updateSafariPreferences","text":"<p>Updates preferences of Mobile Safari on Simulator</p>"},{"location":"reference/execute-methods/#arguments_59","title":"Arguments","text":"Name Type Required Description Example preferences map yes An object containing Mobile Safari preferences to be updated. The list of available setting names and their values could be retrieved by changing the corresponding Safari settings under Preferences-&gt;Safari and then inspecting <code>Library/Preferences/com.apple.mobilesafari.plist</code> file inside of <code>com.apple.mobilesafari</code> app container. The full path to the Mobile Safari's container could be retrieved from <code>xcrun simctl get_app_container &lt;sim_udid&gt; com.apple.mobilesafari data</code> command output. Use the <code>xcrun simctl spawn &lt;sim_udid&gt; defaults read &lt;path_to_plist&gt;</code> command to print the actual .plist content to the Terminal. { ShowTabBar: 0, WarnAboutFraudulentWebsites: 0 }"},{"location":"reference/execute-methods/#mobile-deeplink","title":"mobile: deepLink","text":"<p>Opens the given URL with the default or the given application. This functionality is only available since xcuitest driver version 4.17. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p>"},{"location":"reference/execute-methods/#arguments_60","title":"Arguments","text":"Name Type Required Description Example url string yes The URL to be opened. This parameter is manadatory. https://apple.com, myscheme:yolo bundleId string no The bundle identifier of an application to open the given url with. If not provided then the default application for the given url scheme is going to be used. com.myapp.yolo"},{"location":"reference/execute-methods/#mobile-getsimulatedlocation","title":"mobile: getSimulatedLocation","text":"<p>Retrieves simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p>"},{"location":"reference/execute-methods/#returned-result_38","title":"Returned Result","text":"<p>This API returns a map with the following entries:</p> Name Type Description Example latitude number Measurement of distance north or south of the Equator. <code>null</code> if mobile: setSimulatedLocation has not been called before or the simulated geolocation has been reset by mobile: resetSimulatedLocation. 50.08546 longitude number Measurement of distance east or west of the prime meridian. <code>null</code> if mobile: setSimulatedLocation has not been called before or the simulated geolocation has been reset by mobile: resetSimulatedLocation. -20.12345"},{"location":"reference/execute-methods/#mobile-setsimulatedlocation","title":"mobile: setSimulatedLocation","text":"<p>Sets simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p> <p>It is recommended for iOS 17+ real devices to simulate the device location.</p>"},{"location":"reference/execute-methods/#arguments_61","title":"Arguments","text":"Name Type Required Description Example latitude number yes Measurement of distance north or south of the Equator. 50.08546 longitude number yes Measurement of distance east or west of the prime meridian. -20.12345"},{"location":"reference/execute-methods/#mobile-resetsimulatedlocation","title":"mobile: resetSimulatedLocation","text":"<p>Resets the previously set simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p> <p>Warning Do not forget to reset the simulated geolocation value after your automated test is finished. If the value is not reset explicitly then the simulated one will remain until the next device restart.</p>"},{"location":"reference/execute-methods/#mobile-getappstrings","title":"mobile: getAppStrings","text":"<p>Retrieves string resources for the given app language. An error is thrown if strings cannot be fetched or no strings exist for the given language abbreviation</p>"},{"location":"reference/execute-methods/#arguments_62","title":"Arguments","text":"Name Type Required Description Example language string no The language abbreviation to fetch app strings mapping for. If no language is provided then strings for the 'en language would be returned fr stringFile string no Relative path to the corresponding .strings file starting from the corresponding .lproj folder base/main.strings"},{"location":"reference/execute-methods/#returned-result_39","title":"Returned Result","text":"<p>App strings map, where keys are resource identifiers.</p>"},{"location":"reference/execute-methods/#mobile-hidekeyboard","title":"mobile: hideKeyboard","text":"<p>Tries to hide the on-screen keyboard. Throws an exception if the keyboard cannot be hidden. On non-tablet devices the keyboard might not have an explicit button to hide it. In such case this API won't work and the only way to close the keyboard would be to simulate the same action an app user would do to close it. For example, swipe from top to bottom or tap the screen somewhere at the area not covered by the keyboard.</p>"},{"location":"reference/execute-methods/#arguments_63","title":"Arguments","text":"Name Type Required Description Example keys string[] no One or more keyboard key names used to close/hide it. On tablet's such button is usually called 'done'."},{"location":"reference/execute-methods/#mobile-iskeyboardshown","title":"mobile: isKeyboardShown","text":"<p>Checks if the system on-screen keyboard is visible.</p>"},{"location":"reference/execute-methods/#returned-result_40","title":"Returned Result","text":"<p><code>true</code> if the keyboard is visible</p>"},{"location":"reference/execute-methods/#mobile-keys","title":"mobile: keys","text":"<p>Send keys to the given element or to the application under test. This API is only supported since Xcode 15/iOS 17. It is not supported on tvOS. The API only works on iPad. On iOS calling it has no effect.</p>"},{"location":"reference/execute-methods/#arguments_64","title":"Arguments","text":"Name Type Required Description Example elementId string no Unique identifier of the element to send the keys to. If unset then keys are sent to the current application under test. 21045BC8-013C-43BD-9B1E-4C6DC7AB0744 keys array yes Array of keys to type. Each item could either be a string, that represents a key itself (see the official documentation on XCUIElement's typeKey:modifierFlags: method and on XCUIKeyboardKey constants) or a dictionary with <code>key</code> and <code>modifierFlags</code> entries, if the key should also be entered with modifiers. ['h', 'i'] or [{key: 'h', modifierFlags: 1 &lt;&lt; 1}, {key: 'i', modifierFlags: 1 &lt;&lt; 2}] or ['XCUIKeyboardKeyEscape'] <p>Note</p> <p>The <code>modifierFlags</code> argument is of <code>unsigned long</code> type and defines the bitmask with depressed modifier keys for the given key. XCTest defines the following possible bitmasks for modifier keys:</p> <p><pre>\ntypedef NS_OPTIONS(NSUInteger, XCUIKeyModifierFlags) {\n   XCUIKeyModifierNone       = 0,\n   XCUIKeyModifierCapsLock   = (1UL &lt;&lt; 0),\n   XCUIKeyModifierShift      = (1UL &lt;&lt; 1),\n   XCUIKeyModifierControl    = (1UL &lt;&lt; 2),\n   XCUIKeyModifierOption     = (1UL &lt;&lt; 3),\n   XCUIKeyModifierCommand    = (1UL &lt;&lt; 4),\n   XCUIKeyModifierFunction   = (1UL &lt;&lt; 5),\n   // These values align with UIKeyModifierFlags and CGEventFlags.\n   XCUIKeyModifierAlphaShift = XCUIKeyModifierCapsLock,\n   XCUIKeyModifierAlternate  = XCUIKeyModifierOption,\n};\n</pre></p> <p>So, for example, if you want Ctrl and Shift to be depressed while entering your key then <code>modifierFlags</code> should be set to <code>(1 &lt;&lt; 1) | (1 &lt;&lt; 2)</code>, where the first constant defines <code>XCUIKeyModifierShift</code> and the seconds one - <code>XCUIKeyModifierControl</code>. We apply the bitwise or (<code>|</code>) operator between them to raise both bitflags in the resulting value. The left bitshift (<code>&lt;&lt;</code>) operator defines the binary bitmask for the given modifier key. You may combine more keys using the same approach.</p>"},{"location":"reference/execute-methods/#mobile-lock","title":"mobile: lock","text":"<p>Lock the device (and optionally unlock it after a certain amount of time). Only simple (e.g. without a password) locks are supported.</p>"},{"location":"reference/execute-methods/#arguments_65","title":"Arguments","text":"Name Type Required Description Example seconds number string no The number of seconds after which to unlock the device. Set to <code>0</code> or leave it empty to require manual unlock (e.g. do not block and automatically unlock afterwards)."},{"location":"reference/execute-methods/#mobile-unlock","title":"mobile: unlock","text":"<p>Unlocks the previously locked device. Only simple (e.g. without a password) locks are supported.</p>"},{"location":"reference/execute-methods/#mobile-islocked","title":"mobile: isLocked","text":"<p>Determine whether the device is locked.</p>"},{"location":"reference/execute-methods/#returned-result_41","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"reference/execute-methods/#mobile-shake","title":"mobile: shake","text":"<p>Shakes the device. This functionality is only supported on simulators.</p>"},{"location":"reference/execute-methods/#mobile-backgroundapp","title":"mobile: backgroundApp","text":"<p>Puts the app to the background and waits the given number of seconds. Then restores the app if necessary. The call is blocking.</p>"},{"location":"reference/execute-methods/#arguments_66","title":"Arguments","text":"Name Type Required Description Example seconds number no The amount of seconds to wait between putting the app to background and restoring it. Any negative value means to not restore the app after putting it to background (the default behavior). 5"},{"location":"reference/execute-methods/#mobile-performaccessibilityaudit","title":"mobile: performAccessibilityAudit","text":"<p>Performs accessbility audit of the current application according to the given type or multiple types. Wraps the XCTest's performAccessibilityAuditWithAuditTypes API. Only available since Xcode 15/iOS 17.</p>"},{"location":"reference/execute-methods/#arguments_67","title":"Arguments","text":"Name Type Required Description Example auditTypes string[] no One or more type names to perform the audit for. The full list of available names could be found in the official XCTest API documentation. If no type if provided explicitly then <code>XCUIAccessibilityAuditTypeAll</code> is assumed. ['XCUIAccessibilityAuditTypeContrast', 'XCUIAccessibilityAuditTypeElementDetection']"},{"location":"reference/execute-methods/#returned-result_42","title":"Returned Result","text":"<p>List of found issues or an empty list. Each list item is a map consisting of the following items:</p> Name Type Description Example detailedDescription string The detailed description of the found accessbility issue. Some longer issue description compactDescription string The compact description of the found accessbility issue. Some compact issue description auditType string or number The name of the audit type this issue belongs to. Could be a number if the type name is unknown. 'XCUIAccessibilityAuditTypeContrast' element string The description of the element this issue was found for. 'Yes' button elementDescription string The debug description of the element this issue was found for. Availble since driver version A long string describing the element itself and its position in the page tree hierarchy elementAttributes dict JSON object containing various attributes of the element. See the example below <pre><code>\"elementAttributes\":{\n    \"isEnabled\":\"1\",\n    \"isVisible\":\"1\",\n    \"isAccessible\":\"0\",\n    \"frame\":\"{{129, 65}, {135, 18}}\",\n    \"isFocused\":\"0\",\n    \"rect\":{\n        \"y\":65,\n        \"x\":129,\n        \"width\":135,\n        \"height\":18\n    },\n    \"value\":\"Some Button\",\n    \"label\":\"Some Button\",\n    \"type\":\"StaticText\",\n    \"name\":\"Some Button\",\n    \"rawIdentifier\":null\n}\n</code></pre>"},{"location":"reference/execute-methods/#mobile-startxctestscreenrecording","title":"mobile: startXCTestScreenRecording","text":"<p>Start a new screen recording via XCTest.</p> <p>Since this feature is based on the native implementation provided by Apple it provides the best quality for the least perfomance penalty in comparison to alternative implementations.</p> <p>Even though the feature is available for real devices there is no possibility to delete video files stored on the device yet, which may lead to internal storage overload. That is why it was put under the <code>xctest_screen_record</code> security feature flag if executed from a real device test.</p> <p>If the screen recording is already running this API is a noop.</p> <p>The feature is only available since Xcode 15/iOS 17.</p>"},{"location":"reference/execute-methods/#arguments_68","title":"Arguments","text":"Name Type Required Description Example fps number no The Frames Per Second value for the resulting video. Providing higher values will create video files that are greater in size, but with smoother transitions. It is highly recommeneded to keep this value is range 1-60. 24 by default 60"},{"location":"reference/execute-methods/#returned-result_43","title":"Returned Result","text":"<p>The API response consists of the following entries:</p> Name Type Description Example uuid string Unique identifier of the video being recorded 1D988774-C7E2-4817-829D-3B835DDAA7DF fps numner FPS value 24 codec number The magic for the used codec. Value of zero means h264 video codec is being used 0 startedAt number The timestamp when the screen recording has started in float seconds since Unix epoch 1709826124.123"},{"location":"reference/execute-methods/#mobile-getxctestscreenrecordinginfo","title":"mobile: getXCTestScreenRecordingInfo","text":"<p>Retrieves information about the current running screen recording. If no screen recording is running then <code>null</code> is returned.</p>"},{"location":"reference/execute-methods/#returned-result_44","title":"Returned Result","text":"<p>Same as for mobile: startXCTestScreenRecording</p>"},{"location":"reference/execute-methods/#mobile-stopxctestscreenrecording","title":"mobile: stopXCTestScreenRecording","text":"<p>Stops the current XCTest screen recording previously started by the mobile: startXctestScreenRecording API.</p> <p>An error is thrown if no screen recording is running.</p> <p>The resulting movie is returned as base-64 string or is uploaded to a remote location if corresponding options have been provided.</p> <p>The resulting movie is automatically deleted from the local file system FOR SIMULATORS ONLY. In order to clean it up from a real device it is necessary to properly shut down XCTest by calling <code>POST /wda/shutdown</code> API or by doing device factory reset.</p>"},{"location":"reference/execute-methods/#arguments_69","title":"Arguments","text":"Name Type Required Description Example remotePath string no The path to the remote location, where the resulting .mov file should be uploaded. The following protocols are supported: http/https, ftp Null or empty string value (the default setting) means the content of resulting file should be encoded as Base64 and passed to the endpoint response value. An exception will be thrown if the generated file is too big to fit into the available process memory. https://myserver/upload user string no The name of the user for the remote authentication. Only works if <code>remotePath</code> is provided. myuser pass string no The password for the remote authentication. Only works if <code>remotePath</code> is provided. mypassword method string no The http multipart upload method name. Only works if <code>remotePath</code> is provided. <code>PUT</code> by default POST headers dict no Additional headers mapping for multipart http(s) uploads {'User-Agent': 'Myserver 1.0'} fileFieldName string no The name of the form field, where the file content BLOB should be stored for http(s) uploads. <code>file</code> by default payload formFields dict or array no Additional form fields for multipart http(s) uploads {'field2': 'value2'}"},{"location":"reference/execute-methods/#returned-result_45","title":"Returned Result","text":"<p>Same as for mobile: startXCTestScreenRecording plus the below entry:</p> Name Type Description Example payload string Base64-encoded content of the recorded media file if <code>remotePath</code> parameter is empty/null or an empty string otherwise. The resulting media is expected to a be a valid QuickTime movie (.mov). <code>YXBwaXVt....</code>"},{"location":"reference/execute-methods/#mobile-simctl","title":"mobile: simctl","text":"<p>Runs the given command as a subcommand of <code>xcrun simctl</code> against the device under test. Does not work for real devices.</p>"},{"location":"reference/execute-methods/#arguments_70","title":"Arguments","text":"Name Type Required Description Example command string yes a subcommand for the <code>simctl</code>. Available commands are boot, get_app_container, getenv, icloud_sync, install, install_app_data, io, keychain, launch, location, logverbose, openurl, pbcopy, pbpaste, privacy, push, shutdown, spawn, status_bar, terminate, ui, and uninstall. Please check each usage details with <code>xcrun simctl help</code>. <code>'getenv'</code> args array no array of string as arguments for the command after <code>&lt;device&gt;</code>. For example <code>getenv</code> subcommand accept <code>simctl getenv &lt;device&gt; &lt;variable name&gt;</code>. The <code>&lt;device&gt;</code> will be filled out automatically. This <code>args</code> should be the <code>&lt;variable name&gt;</code> part only. <code>['HOME']</code> timeout number no Command timeout in milliseconds. If the command blocks for longer than this timeout then an exception is going to be thrown. The default timeout is <code>600000</code> ms. <code>10000</code>"},{"location":"reference/execute-methods/#returned-result_46","title":"Returned Result","text":"Name Type Description Example stdout string The standard output of the command. <code>'/Users/user/Library/Developer/CoreSimulator/Devices/60EB8FDB-92E0-4895-B466-0153C6DE7BAE/data\\n'</code> stderr string The standard error of the command. <code>''</code> (an empty string) code string The status code of the command. <code>0</code>"},{"location":"reference/ios-predicate/","title":"Predicate Locator Strategy","text":"<p>The XCUITest driver supports searching elements using the predicate and class chain locator search strategies. They are powered by Apple XCTest, provide flexibility and are much faster than XPath. Predicates can be used to restrict a set of elements to select only those for which some condition evaluates to true.</p> <p>Tip</p> <p>In addition to the examples listed here, make sure to check the links in the More Information section below!</p>"},{"location":"reference/ios-predicate/#quick-examples","title":"Quick Examples","text":"Predicate StringClass Chain <pre><code>// java\ndriver.findElements(AppiumBy.iOSNsPredicateString(\"isVisible == 1\"));\n</code></pre> <pre><code>// java\ndriver.findElements(AppiumBy.iOSClassChain(\"**/XCUIElementTypeWindow[`label LIKE '*yolo*'`]\"));\n</code></pre> <p>The predicate string example would select all visible elements on the page, while the class chain example would find all elements of type <code>XCUIElementTypeWindow</code> whose label contains <code>yolo</code>. Class chain queries allow to create much more complicated search expressions and may contain multiple predicates. Check the More Information section below for how to build such queries.</p>"},{"location":"reference/ios-predicate/#basic-comparisons","title":"Basic Comparisons","text":"<ul> <li> <p><code>=</code> , <code>==</code> - The left-hand expression is equal to the right-hand expression:   <pre><code>// java\ndriver.findElements(AppiumBy.iOSNsPredicateString(\"label == 'Olivia'\"));\n\n// same in Xpath:\ndriver.findElements(AppiumBy.xpath(\"//*[@label = 'Olivia']\"));\n</code></pre></p> </li> <li> <p><code>&gt;=</code> , <code>=&gt;</code> - The left-hand expression is greater than or equal to the right-hand expression.</p> </li> <li> <p><code>&lt;=</code> , <code>=&lt;</code> - The left-hand expression is less than or equal to the right-hand expression.</p> </li> <li> <p><code>&gt;</code> - The left-hand expression is greater than the right-hand expression.</p> </li> <li> <p><code>&lt;</code> - The left-hand expression is less than the right-hand expression.</p> </li> <li> <p><code>!=</code> , <code>&lt;&gt;</code> - The left-hand expression is not equal to the right-hand expression.</p> </li> <li> <p><code>BETWEEN</code> - The left-hand expression is between, or equal to either of, the values specified in   the right-hand side. The right-hand side is a two value array (an array is required to specify   order) giving upper and lower bounds. For example, <code>1 BETWEEN { 0 , 33 }</code>, or <code>$INPUT BETWEEN { $LOWER, $UPPER }</code>.   In Objective-C, you could create a <code>BETWEEN</code> predicate as shown in the following example:</p> <pre><code>driver.findElements(AppiumBy.iOSNsPredicateString(\"rect.x BETWEEN { 1, 100 }\"));\n</code></pre> <p>This creates a predicate that matches all elements whole left top coordinate is in range between 1 and 100.</p> </li> </ul>"},{"location":"reference/ios-predicate/#boolean-value-predicates","title":"Boolean Value Predicates","text":"<ul> <li> <p><code>TRUEPREDICATE</code> - A predicate that always evaluates to <code>TRUE</code> .</p> </li> <li> <p><code>FALSEPREDICATE</code> - A predicate that always evaluates to <code>FALSE</code>.</p> </li> </ul>"},{"location":"reference/ios-predicate/#basic-compound-predicates","title":"Basic Compound Predicates","text":"<ul> <li> <p><code>AND</code> , <code>&amp;&amp;</code> - Logical AND.</p> </li> <li> <p><code>OR</code> , <code>||</code> - Logical OR.</p> </li> <li> <p><code>NOT</code> , <code>!</code> - Logical NOT.</p> </li> </ul>"},{"location":"reference/ios-predicate/#string-comparisons","title":"String Comparisons","text":"<p>String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters <code>c</code> and <code>d</code> within square braces to specify case and diacritic insensitivity respectively, for example, <code>value BEGINSWITH[cd] 'bar'</code>.</p> <ul> <li> <p><code>BEGINSWITH</code> - The left-hand expression begins with the right-hand expression.</p> <pre><code>driver.findElement(AppiumBy.iOSNsPredicateString(\"type == 'XCUIElementTypeButton' AND name BEGINSWITH 'results toggle'\"));\n\n// same in Xpath:\ndriver.findElement(AppiumBy.xpath(\"//XCUIElementTypeButton[starts-with(@name, 'results toggle')]\"));\n</code></pre> </li> <li> <p><code>CONTAINS</code> - The left-hand expression contains the right-hand expression.</p> <pre><code>driver.findElement(AppiumBy.iOSNsPredicateString(\"type == 'XCUIElementCollectionView' AND name CONTAINS 'opera'\"));\n\n// same in Xpath:\ndriver.findElement(AppiumBy.xpath(\"//XCUIElementCollectionView[contains(@name, 'opera')]\"));\n</code></pre> </li> <li> <p><code>ENDSWITH</code> - The left-hand expression ends with the right-hand expression.</p> </li> <li> <p><code>LIKE</code> - The left hand expression equals the right-hand expression: <code>?</code> and <code>*</code> are allowed as   wildcard characters, where <code>?</code> matches 1 character and <code>*</code> matches 0 or more characters. In Mac   OS X v10.4, wildcard characters do not match newline characters.</p> <pre><code>driver.findElement(AppiumBy.iOSNsPredicateString(\"name LIKE '*Total: $*'\"));\n\n// XPath1 does not have an alternative to the above expression\n</code></pre> </li> <li> <p><code>MATCHES</code> - The left hand expression equals the right hand expression using a regex-style   comparison according to ICU v3 (for more details see the ICU User Guide for   Regular Expressions).</p> <pre><code>driver.findElement(AppiumBy.iOSNsPredicateString(\"value MATCHES '.*of [1-9]'\"));\n\n// XPath1 does not have an alternative to the above expression\n</code></pre> </li> </ul>"},{"location":"reference/ios-predicate/#aggregate-operations","title":"Aggregate Operations","text":"<ul> <li><code>IN</code> - Equivalent to an SQL IN operation, the left-hand side must appear in the collection   specified by the right-hand side. For example, <code>name IN { 'Ben', 'Melissa', 'Matthew' }</code>.   The collection may be an array, a set, or a dictionary (in the case of a dictionary, its values   are used).</li> </ul>"},{"location":"reference/ios-predicate/#identifiers","title":"Identifiers","text":"<ul> <li> <p>C style identifier - Any C style identifier that is not a reserved word.</p> </li> <li> <p>#symbol - Used to escape a reserved word into a user identifier.</p> </li> <li> <p>[\\]{octaldigit}{3} - Used to escape an octal number ( <code>\\</code> followed by 3 octal digits).</p> </li> <li> <p>[\\][xX]{hexdigit}{2} - Used to escape a hex number ( <code>\\x</code> or <code>\\X</code> followed by 2 hex digits).</p> </li> <li> <p>[\\][uU]{hexdigit}{4} - Used to escape a Unicode number ( <code>\\u</code> or <code>\\U</code> followed by 4 hex digits).</p> </li> </ul>"},{"location":"reference/ios-predicate/#literals","title":"Literals","text":"<p>Single and double quotes produce the same result, but they do not terminate each other. For example, <code>\"abc\"</code> and <code>'abc'</code> are identical, whereas <code>\"a'b'c\"</code> is equivalent to a space-separated concatenation of <code>a, 'b', c</code>.</p> <ul> <li> <p><code>FALSE</code> , <code>NO</code> - Logical false.</p> </li> <li> <p><code>TRUE</code> , <code>YES</code> - Logical true.</p> </li> <li> <p><code>NULL</code> , <code>NIL</code> - A null value.</p> </li> <li> <p><code>SELF</code> - Represents the object being evaluated.</p> </li> <li> <p><code>\"text\"</code> - A character string.</p> </li> <li> <p><code>'text'</code> - A character string.</p> </li> <li> <p>Comma-separated literal array - For example, <code>{ 'comma', 'separated', 'literal', 'array' }</code> .</p> </li> <li> <p>Standard integer and fixed-point notations - For example, <code>1 , 27 , 2.71828 , 19.75</code> .</p> </li> <li> <p>Floating-point notation with exponentiation - For example, <code>9.2e-5</code> .</p> </li> <li> <p><code>0x</code> - Prefix used to denote a hexadecimal digit sequence.</p> </li> <li> <p><code>0o</code> - Prefix used to denote an octal digit sequence.</p> </li> <li> <p><code>0b</code> - Prefix used to denote a binary digit sequence.</p> </li> </ul>"},{"location":"reference/ios-predicate/#reserved-keywords","title":"Reserved Keywords","text":"<p>The following keywords are reserved:</p> <p><code>AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE</code></p>"},{"location":"reference/ios-predicate/#available-attributes","title":"Available Attributes","text":"<p>Check the Element Attributes document to know all element attribute names and types that are available for usage in predicate locators.</p>"},{"location":"reference/ios-predicate/#more-information","title":"More Information","text":"<ul> <li>Apple Developer documentation on Predicates</li> <li>NSPredicate Cheat Sheet</li> <li>Class Chain Queries Construction Rules</li> </ul>"},{"location":"reference/locator-strategies/","title":"Locator Strategies","text":"<p>The XCUITest driver supports several location strategies in the native context. The following table lists them in performance order (the first one is the fastest one):</p> Name Description Speed Ranking Example <code>className</code> Performs search by element's <code>type</code> attribute. The full list of supported XCUIElement type names could be found in the official XCTest documentation on XCUIElementType \u2b50\u2b50\u2b50\u2b50\u2b50 <code>XCUIElementTypeButton</code> <code>id</code>, <code>name</code>, <code>accessibility id</code> All these locator types are synonyms and internally get transformed into search by element's <code>name</code> attribute. \u2b50\u2b50\u2b50\u2b50\u2b50 <code>my name</code> <code>-ios predicate string</code> This strategy is mapped to the native XCTest predicate locator. Check the NSPredicate cheat sheet for more details on how to build effective predicate expressions. All the supported element attributes could be used in these expressions. \u2b50\u2b50\u2b50\u2b50\u2b50 <code>(name == 'done' OR value == 'done') AND type IN {'XCUIElementTypeButton', 'XCUIElementTypeKey'}</code> <code>-ios class chain</code> This strategy is mapped to the native XCTest predicate locator, but with respect to the actual element tree hierarchy. Such locators are basically a supertype of <code>-ios predicate string</code>. Read Class Chain Queries Construction Rules for more details on how to build such locators. \u2b50\u2b50\u2b50\u2b50 <code>**/XCUIElementTypeCell[$name == 'done' OR value == 'done'$]/XCUIElementTypeButton[-1]</code> <code>xpath</code> For elements lookup using the Xpath strategy the driver uses the same XML tree that is generated by the page source API. This means such locators are the slowest (sometimes up to 10x slower) in comparison to the ones above, which all depend on native XCTest primitives, but are the most flexible. Use Xpath locators only if there is no other way to locate the given element. Only Xpath 1.0 is supported. \u2b50\u2b50 <code>//XCUIElementTypeButton[@value=\\\"Regular\\\"]/parent::*</code> <p>Also, consider checking the How To Achieve The Best Lookup Performance article.</p>"},{"location":"reference/scripts/","title":"Scripts","text":"<p>Appium drivers can include scripts for executing specific actions. The following table lists the scripts bundled with the XCUITest driver. These scripts can be run as follows:</p> <pre><code>appium driver run xcuitest &lt;script-name&gt;\n</code></pre> Script Name Description <code>open-wda</code> Opens the WebDriverAgent project in Xcode <code>build-wda</code> Builds the WebDriverAgent project using the first available iPhone simulator and the latest iOS supported by the current Xcode version by default <code>build-wda --sdk=17.5 --name=\"iPhone 15\"</code> Builds the WebDriverAgent project using the iPhone 15 simulator with iOS 17.5. If <code>--sdk</code> and <code>--name</code> params are not specified - the latest iOS and the first available iPhone simulator will be used"},{"location":"reference/security-flags/","title":"Security Feature Flags","text":"<p>Some insecure driver features are disabled by default. They can be enabled upon launching Appium as follows: <pre><code>appium --allow-insecure &lt;feature-name&gt;\n</code></pre> or <pre><code>appium --relaxed-security\n</code></pre></p> Feature Name Description <code>shutdown_other_sims</code> Allow any session to use a capability to shutdown any running simulators on the host <code>perf_record</code> Allow recording the system performance and other metrics of the simulator <code>audio_record</code> Allow recording of host audio input(s) <code>customize_result_bundle_path</code> Allow customizing the paths to result bundles, using the <code>resultBundlePath</code> capability"},{"location":"reference/server-args/","title":"Appium Server Arguments","text":"<p>Some driver arguments can be set when launching the Appium server. This can be done as follows:</p> <pre><code>appium --driver-xcuitest-[argName]=[argValue]\n</code></pre> Argument Description Default Example <code>webdriveragent-port</code> Local port used for communicating with WebDriverAgent <code>8100</code> <code>--driver-xcuitest-webdriveragent-port=8200</code>"},{"location":"reference/settings/","title":"Settings","text":"<p>The XCUITest driver supports Appium's Settings API. Along with the common settings, the following driver-specific settings are available:</p> Name Type Description <code>elementResponseAttributes</code> <code>string</code> Comma-separated list of element attribute names to be included into findElement response. By default only element UUID is present there, but it is also possible to add the following items: <code>name</code>, <code>text</code>, <code>rect</code>, <code>enabled</code>, <code>displayed</code>, <code>selected</code>, <code>attribute/&lt;element_attribute_name&gt;</code>. It is required that <code>shouldUseCompactResponses</code> setting is set to <code>false</code> in order for this one to apply. <code>shouldUseCompactResponses</code> <code>boolean</code> Used in combination with <code>elementResponseAttributes</code> setting. If set to <code>false</code> then the findElement response is going to include the items enumerated in <code>elementResponseAttributes</code> setting. <code>true</code> by default <code>screenshotQuality</code> <code>int</code> See the description of the corresponding capability. <code>mjpegServerFramerate</code> <code>int</code> The maximum count of screenshots per second taken by the MJPEG screenshots broadcaster. Must be in range 1..60. <code>10</code> by default <code>mjpegScalingFactor</code> <code>int</code> The percentage value used to apply downscaling on the screenshots generated by the MJPEG screenshots broadcaster. Must be in range 1..100. <code>100</code> is by default, which means that screenshots are not downscaled. <code>mjpegServerScreenshotQuality</code> <code>int</code> The percentage value used to apply lossy JPEG compression on the screenshots generated by the MJPEG screenshots broadcaster. Must be in range 1..100. <code>25</code> is by default, which means that screenshots are compressed to the quarter of their original quality. <code>customSnapshotTimeout</code> <code>float</code> Removed since XCUITest driver v8.0.0. Set how much time in float seconds is allowed to resolve a single accessibility snapshot with custom attributes. Snapshots are mainly used for page source generation, XML lookup and custom attributes retrieval (these are visibility and accessibility ones). It might be necessary to increase this value if the actual page source is very large and contains hundreds of UI elements. Defaults to 15 seconds. Since Appium 1.19.1 if this timeout expires and no custom snapshot could be made then WDA tries to calculate the missing attributes using its own algorithms, so setting this value to zero might speed up, for example, page source retrieval, but for the cost of preciseness of some element attributes. <code>waitForIdleTimeout</code> <code>float</code> Has the same meaning as corresponding capability (see above) <code>animationCoolOffTimeout</code> <code>float</code> The amount of time in float seconds to wait until the application under test does not have any active animations. This check is usually applied after each automation action that is supposed to change the state of the application under test, like <code>click</code> one, and blocks XCTest until the transition of the tested application to a new state completes or the cool off timeout occurs. The default value is <code>2</code> (seconds). Setting it to zero disables animation checks completely. <code>snapshotMaxDepth</code> <code>int</code> Changes the value of maximum depth for traversing elements source tree. It may help to prevent out of memory or timeout errors while getting the elements source tree, but it might restrict the depth of source tree. Please consider restricting this value if you observed an error like Timed out snapshotting com.apple.testmanagerd... message or Cannot get 'xml' source of the current application in your Appium log since they are possibly timeout related. A part of elements source tree might be lost if the value was too small. Defaults to <code>50</code> <code>useFirstMatch</code> <code>boolean</code> Enabling this setting makes single element lookups faster, but there is the known problem related to nested elements lookup. Defaults to <code>false</code>. <code>reduceMotion</code> <code>boolean</code> Changes the 'reduce motion' preference of accessibility feature. Defaults to <code>false</code> <code>defaultActiveApplication</code> <code>string</code> Sets the hint for active application selection. This helps WebDriverAgent to select the current application if there are multiple items in the active applications list and the desired one is also one of them. The setting is particularly useful for split-screen apps automation. Defaults to <code>auto</code>, which makes WebDriverAgent to select the application whose element is located at <code>screenPoint</code> location or a single item from the active apps list if the length of this list is equal to one. <code>activeAppDetectionPoint</code> <code>string</code> Defines the coordinates of the current screen point. WebDriverAgent uses this point to detect the active application if multiple application are active on the screen. The format of this value is <code>x,y</code>, where x and y are float or integer numbers representing valid screen coordinates. Setting this value to a point outside the actual screen coordinates might corrupt WebDriverAgent functionality. By default the screen point coordinates equal to 20% of the minimum screen dimension each, e.g. <code>MIN(w, h) * 0.2, MIN(w, h) * 0.2</code> <code>includeNonModalElements</code> <code>boolean</code> Whether returns all of elements including no modal dialogs on iOS 13+. It fixes cannot find elements on nested modal presentations, but it might make visibility attributes unreliable. You could also enable <code>shouldUseTestManagerForVisibilityDetection</code> setting (defaults to <code>false</code>) or <code>simpleIsVisibleCheck</code> capability to improve the visibility detection. This issue may happen between iOS 13.0 to 13.2 (Xcode 11.0 to 11.2). The query issued in <code>includeNonModalElements</code> returns <code>nil</code> with newer iOS/Xcode versions and Appium/WDA return proper elements three without this setting being used. Defaults to <code>false</code>. <code>acceptAlertButtonSelector</code> <code>string</code> Allows to customize accept alert button selector. It helps you to handle an arbitrary element as accept button in <code>accept alert</code> command. The selector should be a valid class chain expression, where the search root is the alert element itself. The default button location algorithm is used if the provided selector is wrong or does not match any element. Example: <code>**/XCUIElementTypeButton[`label CONTAINS[c] 'accept'`]</code> <code>dismissAlertButtonSelector</code> <code>string</code> Allows to customize dismiss alert button selector. It helps you to handle an arbitrary element as dismiss button in <code>dismiss alert</code> command. The selector should be a valid class chain expression, where the search root is the alert element itself. The default button location algorithm is used if the provided selector is wrong or does not match any element. Example: <code>**/XCUIElementTypeButton[`label CONTAINS[c] 'dismiss'`]</code> <code>screenshotOrientation</code> <code>string</code> Adjust screenshot orientation for iOS. Appium tries to return a screenshot and adjust its orientation properly using internal heuristics, but sometimes it does not work, especially in landscape mode. The actual screenshot orientation depends on various factors such as OS versions, model versions and whether this is a real or simulator device. This option allows you to enforce the given image orientation. Acceptable values: <code>auto</code> (default), <code>portrait</code>, <code>portraitUpsideDown</code>, <code>landscapeRight</code>, <code>landscapeLeft</code>. <code>boundElementsByIndex</code> <code>boolean</code> Whether to look up elements with <code>allElementsBoundByAccessibilityElement</code> (default) or <code>allElementsBoundByIndex</code>. This Stack Overflow topic explains the differences. Defaults to <code>false</code>. <code>keyboardAutocorrection</code> <code>boolean</code> Changes the 'Auto-Correction' preference in Keyboards setting. Defaults to <code>false</code>. <code>keyboardPrediction</code> <code>boolean</code> Changes the 'Predictive' preference in Keyboards setting. Defaults to <code>false</code>. <code>nativeWebTap</code> <code>boolean</code> See the description of the corresponding capability. <code>nativeWebTapStrict</code> <code>boolean</code> See the description of the corresponding capability. <code>nativeWebTapTabBarVisibility</code> <code>enum</code> Bypass finding whether the existence of the tab bar before tapping on the element. It could make native web tap faster. If it's <code>visible</code>, tab bar offset will be added without checking the existence of the tab bar. It's <code>invisible</code>, the tab bar offset will be <code>zero</code>. If you want to leave Appium to check and measure the tab bar offset, unset or set <code>detect</code>. Only applicable if <code>nativeWebTap</code> and <code>nativeWebTapStrict</code> are enabled. Unset by default. <code>nativeWebTapSmartAppBannerVisibility</code> <code>enum</code> The same as <code>nativeWebTapTabBarVisibility</code>, this keyword will bypass finding whether the existence of the smart app banner. <code>safariTabBarPosition</code> <code>string</code> Handle offset of Safari tab bar in <code>nativeWebTap</code> enabled interactions. If <code>platformVersion</code> was greater than or equal to 15 and iPhone device, the value is <code>bottom</code> by default. Otherwise <code>top</code>. When the value is <code>top</code>, Appium considers offset as the bar length. iOS 15+ environment can customize the bar position in the settings app, so please adjust the offset with this. Acceptable values: <code>bottom</code>, <code>top</code> <code>useJSONSource</code> <code>boolean</code> See the description of the corresponding capability. <code>pageSourceExcludedAttributes</code> <code>string</code> One or more comma-separated attribute names to be excluded from the output. It might be sometimes helpful to exclude, for example, the <code>visible</code> attribute, to significantly speed-up page source retrieval. Attributes which can be excluded with <code>useJSONSource</code> are frame, enabled, visible, accessible and focused. Defaults to an empty string. Example: <code>\"visible,accessible\"</code> <code>maxTypingFrequency</code> <code>int</code> Maximum frequency of keystrokes for typing and clear. If your tests are failing because of typing errors, you may want to adjust this. Defaults to <code>60</code> keystrokes per minute. <code>respectSystemAlerts</code> <code>boolean</code> Currently we detect the app under test as active if XCTest returns XCUIApplicationStateRunningForeground state for it. In case the app under test is covered by a system alert from the Springboard app this approach might be confusing as we cannot interact with it unless an alert is properly handled. If this setting is set to true (by default it is false) then it forces WDA to verify the presence of alerts shown by Springboard and return the latter while performing the automated app detection. It affects the performance of active app detection, but might be more convenient for writing test scripts (e.g. eliminates the need of proactive switching between system and custom apps). Also, this behavior emulates the legacy active application detection logic before version 6 of the driver. <code>webScreenshotMode</code> <code>native</code> or <code>page</code> or <code>viewport</code> Defines the screenshoting logic if the current context is set to a web one. The default value is <code>native</code>, which makes the driver to take screenshots from WDA, e.g. the whole device screen including status bars. The <code>page</code> mode tries to retrieve the screenshot of the whole active web page, while the <code>viewport</code> one only retrieves a shot of the visible viewport. <code>useClearTextShortcut</code> <code>boolean</code> Whether to use the fastest operation (using IOHIDEvent) to clear texts. In headless mode, simulator's keyboard won't show up anymore after clearing texts using this approach in some cases (see this issue for more details). Defaults to true"}]}